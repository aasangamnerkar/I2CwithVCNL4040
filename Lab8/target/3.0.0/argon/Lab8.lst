
d:/WindyCity_IOT/Labs/Lab8/target/3.0.0/argon/Lab8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003a54  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7a70  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e564  000d7a74  0001e564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000224  2003e5cc  2003e5cc  0002e5cc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7adc  000d7adc  00027adc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7b04  000d7b04  00027b04  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001e7852  00000000  00000000  00027b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001b9fd  00000000  00000000  0020f35a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003ff96  00000000  00000000  0022ad57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000030e8  00000000  00000000  0026aced  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009a28  00000000  00000000  0026ddd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003fff1  00000000  00000000  002777fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004ad2f  00000000  00000000  002b77ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0012913f  00000000  00000000  0030251d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008cf4  00000000  00000000  0042b65c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fe2f 	bl	d6c90 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fe37 	bl	d6cac <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e564 	.word	0x2003e564
   d4048:	000d7a74 	.word	0x000d7a74
   d404c:	2003e5cc 	.word	0x2003e5cc
   d4050:	2003e5cc 	.word	0x2003e5cc
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f002 fa03 	bl	d6468 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d7a48 	.word	0x000d7a48
   d407c:	000d7a6c 	.word	0x000d7a6c

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b81e 	b.w	d40c0 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f857 	bl	d4138 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f002 b9ad 	b.w	d63ec <_post_loop>

000d4092 <_Znaj>:
   d4092:	f001 be7d 	b.w	d5d90 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f001 be83 	b.w	d5da0 <free>
	...

000d409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d409e:	4a03      	ldr	r2, [pc, #12]	; (d40ac <__cxa_pure_virtual+0x10>)
   d40a0:	2100      	movs	r1, #0
   d40a2:	200c      	movs	r0, #12
   d40a4:	f001 fdd8 	bl	d5c58 <panic_>
  while (1);
   d40a8:	e7fe      	b.n	d40a8 <__cxa_pure_virtual+0xc>
   d40aa:	bf00      	nop
   d40ac:	000d59c9 	.word	0x000d59c9

000d40b0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b0:	7800      	ldrb	r0, [r0, #0]
   d40b2:	fab0 f080 	clz	r0, r0
   d40b6:	0940      	lsrs	r0, r0, #5
   d40b8:	4770      	bx	lr

000d40ba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ba:	2301      	movs	r3, #1
   d40bc:	7003      	strb	r3, [r0, #0]
   d40be:	4770      	bx	lr

000d40c0 <setup>:

VCNL4040 sensor;
OledWingAdafruit display;

void setup()
{
   d40c0:	b510      	push	{r4, lr}
  pinMode(D6, OUTPUT);
   d40c2:	2101      	movs	r1, #1
   d40c4:	2006      	movs	r0, #6
   d40c6:	f002 fd27 	bl	d6b18 <pinMode>
  pinMode(D7, OUTPUT);
   d40ca:	2101      	movs	r1, #1
   d40cc:	2007      	movs	r0, #7
  pinMode(D8, OUTPUT);

  Wire.begin(); //Join i2c bus

  display.setup();
   d40ce:	4c17      	ldr	r4, [pc, #92]	; (d412c <setup+0x6c>)
  pinMode(D7, OUTPUT);
   d40d0:	f002 fd22 	bl	d6b18 <pinMode>
  pinMode(D8, OUTPUT);
   d40d4:	2101      	movs	r1, #1
   d40d6:	2008      	movs	r0, #8
   d40d8:	f002 fd1e 	bl	d6b18 <pinMode>
  Wire.begin(); //Join i2c bus
   d40dc:	f002 fd98 	bl	d6c10 <_Z19__fetch_global_Wirev>
   d40e0:	f002 fbae 	bl	d6840 <_ZN7TwoWire5beginEv>
  display.setup();
   d40e4:	4620      	mov	r0, r4
   d40e6:	f000 fd7f 	bl	d4be8 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   d40ea:	4620      	mov	r0, r4
   d40ec:	f001 f916 	bl	d531c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   d40f0:	2101      	movs	r1, #1
   d40f2:	4620      	mov	r0, r4
   d40f4:	f000 fd29 	bl	d4b4a <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   d40f8:	2200      	movs	r2, #0
   d40fa:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println();
   d40fe:	4620      	mov	r0, r4
   d4100:	e9c4 2304 	strd	r2, r3, [r4, #16]
   d4104:	f002 f8bb 	bl	d627e <_ZN5Print7printlnEv>
  display.display();
   d4108:	4620      	mov	r0, r4
   d410a:	f001 fb73 	bl	d57f4 <_ZN16Adafruit_SSD13067displayEv>

  if (sensor.begin() == false)
   d410e:	f002 fd7f 	bl	d6c10 <_Z19__fetch_global_Wirev>
   d4112:	4601      	mov	r1, r0
   d4114:	4806      	ldr	r0, [pc, #24]	; (d4130 <setup+0x70>)
   d4116:	f000 ff5e 	bl	d4fd6 <_ZN8VCNL40405beginER7TwoWire>
   d411a:	b928      	cbnz	r0, d4128 <setup+0x68>
  {
    Serial.println("Device not found. Please check wiring.");
   d411c:	f002 faa6 	bl	d666c <_Z16_fetch_usbserialv>
   d4120:	4904      	ldr	r1, [pc, #16]	; (d4134 <setup+0x74>)
   d4122:	f002 f8b8 	bl	d6296 <_ZN5Print7printlnEPKc>
    while (1); //Freeze!
   d4126:	e7fe      	b.n	d4126 <setup+0x66>
  }

}
   d4128:	bd10      	pop	{r4, pc}
   d412a:	bf00      	nop
   d412c:	2003e5d0 	.word	0x2003e5d0
   d4130:	2003e640 	.word	0x2003e640
   d4134:	000d6d38 	.word	0x000d6d38

000d4138 <loop>:

void loop()
{
   d4138:	b530      	push	{r4, r5, lr}
  display.loop();
   d413a:	4863      	ldr	r0, [pc, #396]	; (d42c8 <loop+0x190>)
{
   d413c:	b089      	sub	sp, #36	; 0x24
  display.loop();
   d413e:	f000 fd7c 	bl	d4c3a <_ZN16OledWingAdafruit4loopEv>
  unsigned int proxValue = sensor.getProximity(); 
   d4142:	4862      	ldr	r0, [pc, #392]	; (d42cc <loop+0x194>)
   d4144:	f000 fe47 	bl	d4dd6 <_ZN8VCNL404012getProximityEv>
   d4148:	4605      	mov	r5, r0
  Serial.println(proxValue);
   d414a:	f002 fa8f 	bl	d666c <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d414e:	4629      	mov	r1, r5
   d4150:	4604      	mov	r4, r0
   d4152:	220a      	movs	r2, #10
   d4154:	f002 f8a9 	bl	d62aa <_ZN5Print11printNumberEmh>
        n += println();
   d4158:	4620      	mov	r0, r4
   d415a:	f002 f890 	bl	d627e <_ZN5Print7printlnEv>
  //very far away
  if (proxValue < 100)
   d415e:	2d63      	cmp	r5, #99	; 0x63
  {
    analogWrite(D6, 0);
   d4160:	f04f 0100 	mov.w	r1, #0
   d4164:	f04f 0006 	mov.w	r0, #6
  if (proxValue < 100)
   d4168:	f200 809f 	bhi.w	d42aa <loop+0x172>
    analogWrite(D6, 0);
   d416c:	f002 fd11 	bl	d6b92 <_Z11analogWritetm>
    analogWrite(D7, 255);
   d4170:	21ff      	movs	r1, #255	; 0xff
   d4172:	2007      	movs	r0, #7
   d4174:	f002 fd0d 	bl	d6b92 <_Z11analogWritetm>
    analogWrite(D8, 0);
   d4178:	2100      	movs	r1, #0
    analogWrite(D6, 0);
    analogWrite(D7, 0);
    analogWrite(D8, 255);
  }

  if (display.pressedA())
   d417a:	4c53      	ldr	r4, [pc, #332]	; (d42c8 <loop+0x190>)
    analogWrite(D8, 255);
   d417c:	2008      	movs	r0, #8
   d417e:	f002 fd08 	bl	d6b92 <_Z11analogWritetm>
  if (display.pressedA())
   d4182:	4620      	mov	r0, r4
   d4184:	f000 fd72 	bl	d4c6c <_ZN16OledWingAdafruit8pressedAEv>
   d4188:	b358      	cbz	r0, d41e2 <loop+0xaa>
  {

    sensor.powerOnProximity(); //Power down the proximity portion of the sensor
   d418a:	4850      	ldr	r0, [pc, #320]	; (d42cc <loop+0x194>)
   d418c:	f000 fecf 	bl	d4f2e <_ZN8VCNL404016powerOnProximityEv>
    sensor.powerOffAmbient(); //Power up the ambient sensor
   d4190:	484e      	ldr	r0, [pc, #312]	; (d42cc <loop+0x194>)
   d4192:	f000 fea9 	bl	d4ee8 <_ZN8VCNL404015powerOffAmbientEv>

    display.clearDisplay();
   d4196:	4620      	mov	r0, r4
   d4198:	f001 f8c0 	bl	d531c <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1);
   d419c:	2101      	movs	r1, #1
   d419e:	4620      	mov	r0, r4
   d41a0:	f000 fcd3 	bl	d4b4a <_ZN12Adafruit_GFX11setTextSizeEh>
   d41a4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d41a8:	2000      	movs	r0, #0
   d41aa:	e9c4 0304 	strd	r0, r3, [r4, #16]
    display.setTextColor(WHITE);
    display.setCursor(0,0);
    
    String output = "Proximity Value: "; 
   d41ae:	4948      	ldr	r1, [pc, #288]	; (d42d0 <loop+0x198>)
   d41b0:	4668      	mov	r0, sp
   d41b2:	f001 ffbb 	bl	d612c <_ZN6StringC1EPKc>
    output += (String) proxValue;
   d41b6:	220a      	movs	r2, #10
   d41b8:	4629      	mov	r1, r5
   d41ba:	a804      	add	r0, sp, #16
   d41bc:	f001 ffdc 	bl	d6178 <_ZN6StringC1Ejh>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d41c0:	a904      	add	r1, sp, #16
   d41c2:	4668      	mov	r0, sp
   d41c4:	f002 f802 	bl	d61cc <_ZN6String6concatERKS_>
   d41c8:	a804      	add	r0, sp, #16
   d41ca:	f001 ff64 	bl	d6096 <_ZN6StringD1Ev>

    display.println(output);
   d41ce:	9900      	ldr	r1, [sp, #0]
   d41d0:	4620      	mov	r0, r4
   d41d2:	f002 f860 	bl	d6296 <_ZN5Print7printlnEPKc>
    display.display();
   d41d6:	4620      	mov	r0, r4
   d41d8:	f001 fb0c 	bl	d57f4 <_ZN16Adafruit_SSD13067displayEv>
    String output = "Proximity Value: "; 
   d41dc:	4668      	mov	r0, sp
   d41de:	f001 ff5a 	bl	d6096 <_ZN6StringD1Ev>

  }

  if (display.pressedB())
   d41e2:	4839      	ldr	r0, [pc, #228]	; (d42c8 <loop+0x190>)
   d41e4:	f000 fd4c 	bl	d4c80 <_ZN16OledWingAdafruit8pressedBEv>
   d41e8:	b378      	cbz	r0, d424a <loop+0x112>
  {

    sensor.powerOffProximity(); //Power down the proximity portion of the sensor
   d41ea:	4838      	ldr	r0, [pc, #224]	; (d42cc <loop+0x194>)
   d41ec:	f000 feaa 	bl	d4f44 <_ZN8VCNL404017powerOffProximityEv>
    sensor.powerOnAmbient(); //Power up the ambient sensor
   d41f0:	4836      	ldr	r0, [pc, #216]	; (d42cc <loop+0x194>)
   d41f2:	f000 fe6f 	bl	d4ed4 <_ZN8VCNL404014powerOnAmbientEv>

    display.clearDisplay();
   d41f6:	4834      	ldr	r0, [pc, #208]	; (d42c8 <loop+0x190>)
   d41f8:	f001 f890 	bl	d531c <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1);
   d41fc:	4832      	ldr	r0, [pc, #200]	; (d42c8 <loop+0x190>)
   d41fe:	2101      	movs	r1, #1
   d4200:	f000 fca3 	bl	d4b4a <_ZN12Adafruit_GFX11setTextSizeEh>
   d4204:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d4208:	2100      	movs	r1, #0
   d420a:	e9c4 1304 	strd	r1, r3, [r4, #16]
    display.setTextColor(WHITE);
    display.setCursor(0,0);
    
    unsigned int ambi = sensor.getAmbient(); 
   d420e:	482f      	ldr	r0, [pc, #188]	; (d42cc <loop+0x194>)
   d4210:	f000 fde4 	bl	d4ddc <_ZN8VCNL404010getAmbientEv>
    String output = "Ambient Light Value: "; 
   d4214:	492f      	ldr	r1, [pc, #188]	; (d42d4 <loop+0x19c>)
    unsigned int ambi = sensor.getAmbient(); 
   d4216:	4605      	mov	r5, r0
    String output = "Ambient Light Value: "; 
   d4218:	4668      	mov	r0, sp
   d421a:	f001 ff87 	bl	d612c <_ZN6StringC1EPKc>
    output += (String) ambi;
   d421e:	220a      	movs	r2, #10
   d4220:	4629      	mov	r1, r5
   d4222:	a804      	add	r0, sp, #16
   d4224:	f001 ffa8 	bl	d6178 <_ZN6StringC1Ejh>
   d4228:	a904      	add	r1, sp, #16
   d422a:	4668      	mov	r0, sp
   d422c:	f001 ffce 	bl	d61cc <_ZN6String6concatERKS_>
   d4230:	a804      	add	r0, sp, #16
   d4232:	f001 ff30 	bl	d6096 <_ZN6StringD1Ev>

    display.println(output);
   d4236:	9900      	ldr	r1, [sp, #0]
   d4238:	4823      	ldr	r0, [pc, #140]	; (d42c8 <loop+0x190>)
   d423a:	f002 f82c 	bl	d6296 <_ZN5Print7printlnEPKc>
    display.display();
   d423e:	4822      	ldr	r0, [pc, #136]	; (d42c8 <loop+0x190>)
   d4240:	f001 fad8 	bl	d57f4 <_ZN16Adafruit_SSD13067displayEv>
    String output = "Ambient Light Value: "; 
   d4244:	4668      	mov	r0, sp
   d4246:	f001 ff26 	bl	d6096 <_ZN6StringD1Ev>

  }

  if (display.pressedC())
   d424a:	481f      	ldr	r0, [pc, #124]	; (d42c8 <loop+0x190>)
   d424c:	f000 fd22 	bl	d4c94 <_ZN16OledWingAdafruit8pressedCEv>
   d4250:	b348      	cbz	r0, d42a6 <loop+0x16e>
  {

    display.clearDisplay();
   d4252:	481d      	ldr	r0, [pc, #116]	; (d42c8 <loop+0x190>)
   d4254:	f001 f862 	bl	d531c <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(1);
   d4258:	2101      	movs	r1, #1
   d425a:	481b      	ldr	r0, [pc, #108]	; (d42c8 <loop+0x190>)
   d425c:	f000 fc75 	bl	d4b4a <_ZN12Adafruit_GFX11setTextSizeEh>
   d4260:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   d4264:	2200      	movs	r2, #0
   d4266:	e9c4 2304 	strd	r2, r3, [r4, #16]
    display.setTextColor(WHITE);
    display.setCursor(0,0);

    unsigned int id = sensor.getID(); 
   d426a:	4818      	ldr	r0, [pc, #96]	; (d42cc <loop+0x194>)
   d426c:	f000 fdb9 	bl	d4de2 <_ZN8VCNL40405getIDEv>
    String output = "I2C Address: "; 
   d4270:	4919      	ldr	r1, [pc, #100]	; (d42d8 <loop+0x1a0>)
    unsigned int id = sensor.getID(); 
   d4272:	4604      	mov	r4, r0
    String output = "I2C Address: "; 
   d4274:	4668      	mov	r0, sp
   d4276:	f001 ff59 	bl	d612c <_ZN6StringC1EPKc>
    output += (String) id;
   d427a:	220a      	movs	r2, #10
   d427c:	4621      	mov	r1, r4
   d427e:	a804      	add	r0, sp, #16
   d4280:	f001 ff7a 	bl	d6178 <_ZN6StringC1Ejh>
   d4284:	a904      	add	r1, sp, #16
   d4286:	4668      	mov	r0, sp
   d4288:	f001 ffa0 	bl	d61cc <_ZN6String6concatERKS_>
   d428c:	a804      	add	r0, sp, #16
   d428e:	f001 ff02 	bl	d6096 <_ZN6StringD1Ev>

    display.println(output);
   d4292:	9900      	ldr	r1, [sp, #0]
   d4294:	480c      	ldr	r0, [pc, #48]	; (d42c8 <loop+0x190>)
   d4296:	f001 fffe 	bl	d6296 <_ZN5Print7printlnEPKc>
    display.display();
   d429a:	480b      	ldr	r0, [pc, #44]	; (d42c8 <loop+0x190>)
   d429c:	f001 faaa 	bl	d57f4 <_ZN16Adafruit_SSD13067displayEv>
    String output = "I2C Address: "; 
   d42a0:	4668      	mov	r0, sp
   d42a2:	f001 fef8 	bl	d6096 <_ZN6StringD1Ev>
  }


}
   d42a6:	b009      	add	sp, #36	; 0x24
   d42a8:	bd30      	pop	{r4, r5, pc}
  else if (proxValue < 1000)
   d42aa:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   d42ae:	d207      	bcs.n	d42c0 <loop+0x188>
    analogWrite(D6, 0);
   d42b0:	f002 fc6f 	bl	d6b92 <_Z11analogWritetm>
    analogWrite(D7, 128);
   d42b4:	2180      	movs	r1, #128	; 0x80
    analogWrite(D7, 0);
   d42b6:	2007      	movs	r0, #7
   d42b8:	f002 fc6b 	bl	d6b92 <_Z11analogWritetm>
    analogWrite(D8, 255);
   d42bc:	21ff      	movs	r1, #255	; 0xff
   d42be:	e75c      	b.n	d417a <loop+0x42>
    analogWrite(D6, 0);
   d42c0:	f002 fc67 	bl	d6b92 <_Z11analogWritetm>
    analogWrite(D7, 0);
   d42c4:	2100      	movs	r1, #0
   d42c6:	e7f6      	b.n	d42b6 <loop+0x17e>
   d42c8:	2003e5d0 	.word	0x2003e5d0
   d42cc:	2003e640 	.word	0x2003e640
   d42d0:	000d6d5f 	.word	0x000d6d5f
   d42d4:	000d6d71 	.word	0x000d6d71
   d42d8:	000d6d87 	.word	0x000d6d87

000d42dc <_GLOBAL__sub_I_sensor>:
}
   d42dc:	b510      	push	{r4, lr}
SYSTEM_THREAD(ENABLED);
   d42de:	2100      	movs	r1, #0
OledWingAdafruit display;
   d42e0:	4c08      	ldr	r4, [pc, #32]	; (d4304 <_GLOBAL__sub_I_sensor+0x28>)
SYSTEM_THREAD(ENABLED);
   d42e2:	2001      	movs	r0, #1
   d42e4:	f001 fcd0 	bl	d5c88 <system_thread_set_state>
VCNL4040 sensor;
   d42e8:	4807      	ldr	r0, [pc, #28]	; (d4308 <_GLOBAL__sub_I_sensor+0x2c>)
   d42ea:	f000 fd3a 	bl	d4d62 <_ZN8VCNL4040C1Ev>
OledWingAdafruit display;
   d42ee:	2107      	movs	r1, #7
   d42f0:	4620      	mov	r0, r4
   d42f2:	f000 fc4b 	bl	d4b8c <_ZN16OledWingAdafruitC1Ei>
   d42f6:	4620      	mov	r0, r4
   d42f8:	4a04      	ldr	r2, [pc, #16]	; (d430c <_GLOBAL__sub_I_sensor+0x30>)
   d42fa:	4905      	ldr	r1, [pc, #20]	; (d4310 <_GLOBAL__sub_I_sensor+0x34>)
}
   d42fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
OledWingAdafruit display;
   d4300:	f002 bcae 	b.w	d6c60 <__aeabi_atexit>
   d4304:	2003e5d0 	.word	0x2003e5d0
   d4308:	2003e640 	.word	0x2003e640
   d430c:	2003e5cc 	.word	0x2003e5cc
   d4310:	000d4b59 	.word	0x000d4b59

000d4314 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d4314:	4770      	bx	lr

000d4316 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4316:	b510      	push	{r4, lr}
  }
   d4318:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d431a:	4604      	mov	r4, r0
  }
   d431c:	f002 fca5 	bl	d6c6a <_ZdlPvj>
   d4320:	4620      	mov	r0, r4
   d4322:	bd10      	pop	{r4, pc}

000d4324 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4324:	b40e      	push	{r1, r2, r3}
   d4326:	b503      	push	{r0, r1, lr}
   d4328:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   d432a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d432c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4330:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4332:	f001 ffd8 	bl	d62e6 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d4336:	b002      	add	sp, #8
   d4338:	f85d eb04 	ldr.w	lr, [sp], #4
   d433c:	b003      	add	sp, #12
   d433e:	4770      	bx	lr

000d4340 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4340:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4342:	4604      	mov	r4, r0
   d4344:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4346:	7922      	ldrb	r2, [r4, #4]
   d4348:	68a3      	ldr	r3, [r4, #8]
   d434a:	b132      	cbz	r2, d435a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d434c:	b9a3      	cbnz	r3, d4378 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d434e:	490b      	ldr	r1, [pc, #44]	; (d437c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4350:	b002      	add	sp, #8
   d4352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4356:	f001 bf8b 	b.w	d6270 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d435a:	4a09      	ldr	r2, [pc, #36]	; (d4380 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d435c:	7b26      	ldrb	r6, [r4, #12]
   d435e:	4d09      	ldr	r5, [pc, #36]	; (d4384 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4360:	4909      	ldr	r1, [pc, #36]	; (d4388 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4362:	7b64      	ldrb	r4, [r4, #13]
   d4364:	2e01      	cmp	r6, #1
   d4366:	bf18      	it	ne
   d4368:	4629      	movne	r1, r5
   d436a:	e9cd 1400 	strd	r1, r4, [sp]
   d436e:	4907      	ldr	r1, [pc, #28]	; (d438c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4370:	f7ff ffd8 	bl	d4324 <_ZN5Print6printfEPKcz>
  }
   d4374:	b002      	add	sp, #8
   d4376:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4378:	4a05      	ldr	r2, [pc, #20]	; (d4390 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d437a:	e7ef      	b.n	d435c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d437c:	000d6da6 	.word	0x000d6da6
   d4380:	000d6d86 	.word	0x000d6d86
   d4384:	000d6da2 	.word	0x000d6da2
   d4388:	000d6d9e 	.word	0x000d6d9e
   d438c:	000d6dbc 	.word	0x000d6dbc
   d4390:	000d6d95 	.word	0x000d6d95

000d4394 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   d4394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4398:	b085      	sub	sp, #20
   d439a:	461f      	mov	r7, r3
   d439c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   d43a0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   d43a4:	eba8 0902 	sub.w	r9, r8, r2
   d43a8:	eba7 0a01 	sub.w	sl, r7, r1
   d43ac:	f1b9 0f00 	cmp.w	r9, #0
   d43b0:	bfb8      	it	lt
   d43b2:	f1c9 0900 	rsblt	r9, r9, #0
   d43b6:	f1ba 0f00 	cmp.w	sl, #0
   d43ba:	bfb8      	it	lt
   d43bc:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   d43c0:	45d1      	cmp	r9, sl
        uint16_t color) {
   d43c2:	4683      	mov	fp, r0
   d43c4:	460c      	mov	r4, r1
   d43c6:	4615      	mov	r5, r2
    if (steep) {
   d43c8:	dd04      	ble.n	d43d4 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   d43ca:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   d43cc:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   d43ce:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   d43d0:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   d43d2:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   d43d4:	42bc      	cmp	r4, r7
   d43d6:	dd05      	ble.n	d43e4 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   d43d8:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   d43da:	4645      	mov	r5, r8
   d43dc:	4690      	mov	r8, r2
    if (x0 > x1) {
   d43de:	4622      	mov	r2, r4
   d43e0:	463c      	mov	r4, r7
   d43e2:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   d43e4:	1b3e      	subs	r6, r7, r4
   d43e6:	b2b2      	uxth	r2, r6
   d43e8:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   d43ea:	eba8 0205 	sub.w	r2, r8, r5
   d43ee:	2a00      	cmp	r2, #0
   d43f0:	bfb8      	it	lt
   d43f2:	4252      	neglt	r2, r2
   d43f4:	9201      	str	r2, [sp, #4]

    int16_t err = dx / 2;
   d43f6:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   d43fa:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   d43fe:	4545      	cmp	r5, r8
   d4400:	bfb4      	ite	lt
   d4402:	2201      	movlt	r2, #1
   d4404:	f04f 32ff 	movge.w	r2, #4294967295
    int16_t err = dx / 2;
   d4408:	1076      	asrs	r6, r6, #1
        ystep = -1;
   d440a:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   d440c:	42bc      	cmp	r4, r7
   d440e:	dc1c      	bgt.n	d444a <_ZN12Adafruit_GFX9writeLineEsssst+0xb6>
        if (steep) {
   d4410:	f8db 2000 	ldr.w	r2, [fp]
            writePixel(y0, x0, color);
   d4414:	9303      	str	r3, [sp, #12]
        if (steep) {
   d4416:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   d4418:	f8d2 8018 	ldr.w	r8, [r2, #24]
   d441c:	bfc7      	ittee	gt
   d441e:	4629      	movgt	r1, r5
   d4420:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   d4422:	462a      	movle	r2, r5
   d4424:	4621      	movle	r1, r4
   d4426:	4658      	mov	r0, fp
   d4428:	47c0      	blx	r8
        }
        err -= dy;
   d442a:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   d442c:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   d442e:	1ab6      	subs	r6, r6, r2
   d4430:	b2b1      	uxth	r1, r6
   d4432:	b236      	sxth	r6, r6
        if (err < 0) {
   d4434:	2e00      	cmp	r6, #0
   d4436:	da05      	bge.n	d4444 <_ZN12Adafruit_GFX9writeLineEsssst+0xb0>
            y0 += ystep;
   d4438:	9a02      	ldr	r2, [sp, #8]
   d443a:	4415      	add	r5, r2
            err += dx;
   d443c:	9a00      	ldr	r2, [sp, #0]
   d443e:	1856      	adds	r6, r2, r1
            y0 += ystep;
   d4440:	b22d      	sxth	r5, r5
            err += dx;
   d4442:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   d4444:	3401      	adds	r4, #1
   d4446:	b224      	sxth	r4, r4
   d4448:	e7e0      	b.n	d440c <_ZN12Adafruit_GFX9writeLineEsssst+0x78>
        }
    }
}
   d444a:	b005      	add	sp, #20
   d444c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4450 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   d4450:	4770      	bx	lr

000d4452 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   d4452:	b410      	push	{r4}
    drawPixel(x, y, color);
   d4454:	6804      	ldr	r4, [r0, #0]
   d4456:	6924      	ldr	r4, [r4, #16]
   d4458:	46a4      	mov	ip, r4
}
   d445a:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   d445e:	4760      	bx	ip

000d4460 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d4460:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   d4462:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   d4464:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   d4468:	9502      	str	r5, [sp, #8]
   d446a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   d446c:	46a4      	mov	ip, r4
}
   d446e:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   d4470:	4760      	bx	ip

000d4472 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d4472:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   d4474:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   d4476:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   d447a:	9502      	str	r5, [sp, #8]
   d447c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   d447e:	46a4      	mov	ip, r4
}
   d4480:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   d4482:	4760      	bx	ip

000d4484 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4484:	b470      	push	{r4, r5, r6}
   d4486:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   d448a:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   d448e:	6804      	ldr	r4, [r0, #0]
   d4490:	e9cd 5603 	strd	r5, r6, [sp, #12]
   d4494:	6c24      	ldr	r4, [r4, #64]	; 0x40
   d4496:	46a4      	mov	ip, r4
}
   d4498:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   d449a:	4760      	bx	ip

000d449c <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   d449c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d44a0:	461c      	mov	r4, r3
    startWrite();
   d44a2:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   d44a4:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d44a8:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   d44aa:	4605      	mov	r5, r0
   d44ac:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   d44ae:	3c01      	subs	r4, #1
   d44b0:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   d44b2:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   d44b4:	b224      	sxth	r4, r4
    startWrite();
   d44b6:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   d44b8:	682b      	ldr	r3, [r5, #0]
   d44ba:	f8cd 8004 	str.w	r8, [sp, #4]
   d44be:	9400      	str	r4, [sp, #0]
   d44c0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   d44c2:	4628      	mov	r0, r5
   d44c4:	463b      	mov	r3, r7
   d44c6:	4632      	mov	r2, r6
   d44c8:	4639      	mov	r1, r7
   d44ca:	47a0      	blx	r4
    endWrite();
   d44cc:	682b      	ldr	r3, [r5, #0]
   d44ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44d0:	4628      	mov	r0, r5
}
   d44d2:	b002      	add	sp, #8
   d44d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d44d8:	4718      	bx	r3

000d44da <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   d44da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d44de:	461d      	mov	r5, r3
    startWrite();
   d44e0:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   d44e2:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   d44e6:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   d44e8:	4604      	mov	r4, r0
   d44ea:	4617      	mov	r7, r2
   d44ec:	460e      	mov	r6, r1
    startWrite();
   d44ee:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   d44f0:	e9cd 7800 	strd	r7, r8, [sp]
   d44f4:	6822      	ldr	r2, [r4, #0]
   d44f6:	1e6b      	subs	r3, r5, #1
   d44f8:	4433      	add	r3, r6
   d44fa:	6a95      	ldr	r5, [r2, #40]	; 0x28
   d44fc:	4620      	mov	r0, r4
   d44fe:	b21b      	sxth	r3, r3
   d4500:	463a      	mov	r2, r7
   d4502:	4631      	mov	r1, r6
   d4504:	47a8      	blx	r5
    endWrite();
   d4506:	6823      	ldr	r3, [r4, #0]
   d4508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d450a:	4620      	mov	r0, r4
}
   d450c:	b002      	add	sp, #8
   d450e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   d4512:	4718      	bx	r3

000d4514 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4514:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4518:	461e      	mov	r6, r3
    startWrite();
   d451a:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d451c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   d4520:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4522:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   d4526:	460c      	mov	r4, r1
   d4528:	4605      	mov	r5, r0
   d452a:	4617      	mov	r7, r2
    startWrite();
   d452c:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   d452e:	4426      	add	r6, r4
   d4530:	42b4      	cmp	r4, r6
   d4532:	682b      	ldr	r3, [r5, #0]
   d4534:	da0b      	bge.n	d454e <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   d4536:	f8cd 8000 	str.w	r8, [sp]
   d453a:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d453e:	4621      	mov	r1, r4
   d4540:	464b      	mov	r3, r9
   d4542:	463a      	mov	r2, r7
   d4544:	4628      	mov	r0, r5
   d4546:	3401      	adds	r4, #1
   d4548:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   d454a:	b224      	sxth	r4, r4
   d454c:	e7f0      	b.n	d4530 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   d454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4550:	4628      	mov	r0, r5
}
   d4552:	b002      	add	sp, #8
   d4554:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d4558:	4718      	bx	r3

000d455a <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   d455a:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   d455c:	6802      	ldr	r2, [r0, #0]
   d455e:	9101      	str	r1, [sp, #4]
   d4560:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   d4564:	9100      	str	r1, [sp, #0]
   d4566:	6c14      	ldr	r4, [r2, #64]	; 0x40
   d4568:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d456c:	2200      	movs	r2, #0
   d456e:	4611      	mov	r1, r2
   d4570:	47a0      	blx	r4
}
   d4572:	b002      	add	sp, #8
   d4574:	bd10      	pop	{r4, pc}

000d4576 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   d4576:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d457a:	461d      	mov	r5, r3
    startWrite();
   d457c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   d457e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   d4582:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   d4584:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   d4588:	4604      	mov	r4, r0
   d458a:	460f      	mov	r7, r1
   d458c:	4616      	mov	r6, r2
    startWrite();
   d458e:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   d4590:	6823      	ldr	r3, [r4, #0]
   d4592:	f8cd 8000 	str.w	r8, [sp]
   d4596:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d459a:	4632      	mov	r2, r6
   d459c:	462b      	mov	r3, r5
   d459e:	4639      	mov	r1, r7
   d45a0:	4620      	mov	r0, r4
   d45a2:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   d45a4:	6823      	ldr	r3, [r4, #0]
   d45a6:	f8cd 8000 	str.w	r8, [sp]
   d45aa:	f109 32ff 	add.w	r2, r9, #4294967295
   d45ae:	4432      	add	r2, r6
   d45b0:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d45b4:	4639      	mov	r1, r7
   d45b6:	462b      	mov	r3, r5
   d45b8:	4620      	mov	r0, r4
   d45ba:	b212      	sxth	r2, r2
   d45bc:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   d45be:	6823      	ldr	r3, [r4, #0]
   d45c0:	f8cd 8000 	str.w	r8, [sp]
   d45c4:	f8d3 a020 	ldr.w	sl, [r3, #32]
   d45c8:	4632      	mov	r2, r6
   d45ca:	464b      	mov	r3, r9
   d45cc:	4639      	mov	r1, r7
   d45ce:	4620      	mov	r0, r4
   d45d0:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   d45d2:	1e6b      	subs	r3, r5, #1
   d45d4:	19d9      	adds	r1, r3, r7
   d45d6:	6823      	ldr	r3, [r4, #0]
   d45d8:	f8cd 8000 	str.w	r8, [sp]
   d45dc:	6a1d      	ldr	r5, [r3, #32]
   d45de:	4620      	mov	r0, r4
   d45e0:	464b      	mov	r3, r9
   d45e2:	4632      	mov	r2, r6
   d45e4:	b209      	sxth	r1, r1
   d45e6:	47a8      	blx	r5
    endWrite();
   d45e8:	6823      	ldr	r3, [r4, #0]
   d45ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45ec:	4620      	mov	r0, r4
}
   d45ee:	b002      	add	sp, #8
   d45f0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   d45f4:	4718      	bx	r3

000d45f6 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   d45f6:	4770      	bx	lr

000d45f8 <_ZN12Adafruit_GFX8drawLineEsssst>:
        uint16_t color) {
   d45f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    if(x0 == x1){
   d45fc:	4299      	cmp	r1, r3
        uint16_t color) {
   d45fe:	4616      	mov	r6, r2
   d4600:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   d4604:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
   d4608:	6802      	ldr	r2, [r0, #0]
   d460a:	4680      	mov	r8, r0
   d460c:	460d      	mov	r5, r1
   d460e:	461c      	mov	r4, r3
    if(x0 == x1){
   d4610:	d113      	bne.n	d463a <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   d4612:	42be      	cmp	r6, r7
   d4614:	bfc8      	it	gt
   d4616:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d4618:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   d461c:	bfc4      	itt	gt
   d461e:	463e      	movgt	r6, r7
   d4620:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   d4622:	1c7b      	adds	r3, r7, #1
   d4624:	6b94      	ldr	r4, [r2, #56]	; 0x38
   d4626:	1b9b      	subs	r3, r3, r6
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4628:	b21b      	sxth	r3, r3
   d462a:	4632      	mov	r2, r6
   d462c:	4629      	mov	r1, r5
   d462e:	4640      	mov	r0, r8
   d4630:	46a4      	mov	ip, r4
}
   d4632:	b003      	add	sp, #12
   d4634:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4638:	4760      	bx	ip
    } else if(y0 == y1){
   d463a:	42be      	cmp	r6, r7
   d463c:	d10a      	bne.n	d4654 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   d463e:	4299      	cmp	r1, r3
   d4640:	bfc2      	ittt	gt
   d4642:	460b      	movgt	r3, r1
   d4644:	4625      	movgt	r5, r4
   d4646:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   d4648:	1c63      	adds	r3, r4, #1
   d464a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   d464e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d4650:	1b5b      	subs	r3, r3, r5
   d4652:	e7e9      	b.n	d4628 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   d4654:	6953      	ldr	r3, [r2, #20]
   d4656:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   d4658:	e9cd 7900 	strd	r7, r9, [sp]
   d465c:	f8d8 3000 	ldr.w	r3, [r8]
   d4660:	4640      	mov	r0, r8
   d4662:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d4664:	4632      	mov	r2, r6
   d4666:	4623      	mov	r3, r4
   d4668:	4629      	mov	r1, r5
   d466a:	47b8      	blx	r7
        endWrite();
   d466c:	f8d8 3000 	ldr.w	r3, [r8]
   d4670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4672:	4640      	mov	r0, r8
}
   d4674:	b003      	add	sp, #12
   d4676:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   d467a:	4718      	bx	r3

000d467c <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   d467c:	f001 0303 	and.w	r3, r1, #3
   d4680:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
   d4684:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   d4686:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   d4688:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d468c:	bf59      	ittee	pl
   d468e:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   d4690:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   d4692:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   d4694:	81c3      	strhmi	r3, [r0, #14]
}
   d4696:	4770      	bx	lr

000d4698 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   d4698:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   d469a:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   d469c:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   d469e:	4a07      	ldr	r2, [pc, #28]	; (d46bc <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   d46a0:	4d07      	ldr	r5, [pc, #28]	; (d46c0 <_ZN12Adafruit_GFXC1Ess+0x28>)
   d46a2:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   d46a4:	2400      	movs	r4, #0
    _width    = WIDTH;
   d46a6:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   d46a8:	f04f 31ff 	mov.w	r1, #4294967295
   d46ac:	e9c0 1205 	strd	r1, r2, [r0, #20]
   d46b0:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   d46b2:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   d46b4:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   d46b6:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   d46b8:	6204      	str	r4, [r0, #32]
}
   d46ba:	bd30      	pop	{r4, r5, pc}
   d46bc:	01000101 	.word	0x01000101
   d46c0:	000d72e4 	.word	0x000d72e4

000d46c4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d46c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d46c8:	b089      	sub	sp, #36	; 0x24
   d46ca:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   d46ce:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d46d0:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   d46d4:	9304      	str	r3, [sp, #16]
   d46d6:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   d46da:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   d46dc:	9305      	str	r3, [sp, #20]
   d46de:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   d46e2:	4604      	mov	r4, r0
    startWrite();
   d46e4:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d46e6:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   d46ea:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   d46ee:	bf48      	it	mi
   d46f0:	f108 020e 	addmi.w	r2, r8, #14
   d46f4:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   d46f8:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   d46fa:	4635      	mov	r5, r6
   d46fc:	9b03      	ldr	r3, [sp, #12]
   d46fe:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   d4700:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   d4704:	189a      	adds	r2, r3, r2
   d4706:	9b05      	ldr	r3, [sp, #20]
   d4708:	428b      	cmp	r3, r1
   d470a:	b212      	sxth	r2, r2
   d470c:	dd27      	ble.n	d475e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d470e:	9b04      	ldr	r3, [sp, #16]
   d4710:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   d4712:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4716:	9306      	str	r3, [sp, #24]
   d4718:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   d471c:	4580      	cmp	r8, r0
   d471e:	fa1f f189 	uxth.w	r1, r9
   d4722:	dd17      	ble.n	d4754 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   d4724:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d4726:	bf05      	ittet	eq
   d4728:	9b06      	ldreq	r3, [sp, #24]
   d472a:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   d472c:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   d472e:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   d4730:	bf18      	it	ne
   d4732:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   d4734:	062b      	lsls	r3, r5, #24
   d4736:	d50a      	bpl.n	d474e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   d4738:	9b02      	ldr	r3, [sp, #8]
   d473a:	6820      	ldr	r0, [r4, #0]
   d473c:	9207      	str	r2, [sp, #28]
   d473e:	4419      	add	r1, r3
   d4740:	6983      	ldr	r3, [r0, #24]
   d4742:	b209      	sxth	r1, r1
   d4744:	461f      	mov	r7, r3
   d4746:	4620      	mov	r0, r4
   d4748:	4653      	mov	r3, sl
   d474a:	47b8      	blx	r7
   d474c:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   d474e:	f109 0901 	add.w	r9, r9, #1
   d4752:	e7e1      	b.n	d4718 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   d4754:	9b01      	ldr	r3, [sp, #4]
   d4756:	3301      	adds	r3, #1
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	445e      	add	r6, fp
   d475c:	e7ce      	b.n	d46fc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   d475e:	6823      	ldr	r3, [r4, #0]
   d4760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4762:	4620      	mov	r0, r4
}
   d4764:	b009      	add	sp, #36	; 0x24
   d4766:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   d476a:	4718      	bx	r3

000d476c <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d476c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4770:	ed2d 8b02 	vpush	{d8}
   d4774:	b091      	sub	sp, #68	; 0x44
   d4776:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   d4778:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   d477a:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   d477e:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   d4782:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   d4786:	9103      	str	r1, [sp, #12]
   d4788:	461f      	mov	r7, r3
   d478a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d478e:	9304      	str	r3, [sp, #16]
   d4790:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   d4792:	2a00      	cmp	r2, #0
   d4794:	f040 80c5 	bne.w	d4922 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   d4798:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   d479c:	428b      	cmp	r3, r1
   d479e:	f340 814c 	ble.w	d4a3a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   d47a2:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   d47a6:	42b3      	cmp	r3, r6
   d47a8:	f340 8147 	ble.w	d4a3a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d47ac:	2306      	movs	r3, #6
   d47ae:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   d47b2:	2b00      	cmp	r3, #0
   d47b4:	f340 8141 	ble.w	d4a3a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   d47b8:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   d47bc:	2b00      	cmp	r3, #0
   d47be:	f340 813c 	ble.w	d4a3a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   d47c2:	7f03      	ldrb	r3, [r0, #28]
   d47c4:	b91b      	cbnz	r3, d47ce <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   d47c6:	2faf      	cmp	r7, #175	; 0xaf
   d47c8:	bf84      	itt	hi
   d47ca:	3701      	addhi	r7, #1
   d47cc:	b2ff      	uxtbhi	r7, r7
        startWrite();
   d47ce:	f8db 3000 	ldr.w	r3, [fp]
   d47d2:	4658      	mov	r0, fp
   d47d4:	695b      	ldr	r3, [r3, #20]
   d47d6:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d47d8:	2205      	movs	r2, #5
   d47da:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d47dc:	2200      	movs	r2, #0
   d47de:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   d47e0:	4a98      	ldr	r2, [pc, #608]	; (d4a44 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   d47e2:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   d47e6:	18d3      	adds	r3, r2, r3
   d47e8:	930c      	str	r3, [sp, #48]	; 0x30
   d47ea:	b2b3      	uxth	r3, r6
   d47ec:	9306      	str	r3, [sp, #24]
   d47ee:	9a05      	ldr	r2, [sp, #20]
   d47f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d47f2:	5c9b      	ldrb	r3, [r3, r2]
   d47f4:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d47f6:	b2ab      	uxth	r3, r5
   d47f8:	930b      	str	r3, [sp, #44]	; 0x2c
   d47fa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d47fe:	9308      	str	r3, [sp, #32]
   d4800:	9b03      	ldr	r3, [sp, #12]
   d4802:	fb02 f905 	mul.w	r9, r2, r5
   d4806:	fa19 f983 	uxtah	r9, r9, r3
   d480a:	fa0f f389 	sxth.w	r3, r9
   d480e:	ee08 3a10 	vmov	s16, r3
   d4812:	2308      	movs	r3, #8
   d4814:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   d4816:	9b03      	ldr	r3, [sp, #12]
   d4818:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d481c:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   d4820:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   d4824:	9a07      	ldr	r2, [sp, #28]
   d4826:	f8db 3000 	ldr.w	r3, [fp]
   d482a:	07d2      	lsls	r2, r2, #31
   d482c:	d552      	bpl.n	d48d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   d482e:	2d01      	cmp	r5, #1
   d4830:	fa1f f289 	uxth.w	r2, r9
   d4834:	d13e      	bne.n	d48b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   d4836:	2c01      	cmp	r4, #1
   d4838:	d13c      	bne.n	d48b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   d483a:	699b      	ldr	r3, [r3, #24]
   d483c:	9906      	ldr	r1, [sp, #24]
   d483e:	461f      	mov	r7, r3
   d4840:	9b04      	ldr	r3, [sp, #16]
   d4842:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   d4844:	b212      	sxth	r2, r2
   d4846:	4651      	mov	r1, sl
   d4848:	4658      	mov	r0, fp
   d484a:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   d484c:	f109 0301 	add.w	r3, r9, #1
   d4850:	fa4f f983 	sxtb.w	r9, r3
   d4854:	9b07      	ldr	r3, [sp, #28]
   d4856:	085b      	lsrs	r3, r3, #1
   d4858:	9307      	str	r3, [sp, #28]
   d485a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d485c:	3b01      	subs	r3, #1
   d485e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4862:	930a      	str	r3, [sp, #40]	; 0x28
   d4864:	d1de      	bne.n	d4824 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   d4866:	9f05      	ldr	r7, [sp, #20]
   d4868:	3701      	adds	r7, #1
   d486a:	b27b      	sxtb	r3, r7
   d486c:	9305      	str	r3, [sp, #20]
   d486e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4870:	3b01      	subs	r3, #1
   d4872:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   d4876:	9309      	str	r3, [sp, #36]	; 0x24
   d4878:	d1b9      	bne.n	d47ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   d487a:	9b04      	ldr	r3, [sp, #16]
   d487c:	4543      	cmp	r3, r8
   d487e:	d00f      	beq.n	d48a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   d4880:	2d01      	cmp	r5, #1
   d4882:	f8db 3000 	ldr.w	r3, [fp]
   d4886:	d13b      	bne.n	d4900 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d4888:	2c01      	cmp	r4, #1
   d488a:	d139      	bne.n	d4900 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   d488c:	9908      	ldr	r1, [sp, #32]
   d488e:	f8cd 8000 	str.w	r8, [sp]
   d4892:	3105      	adds	r1, #5
   d4894:	6a1c      	ldr	r4, [r3, #32]
   d4896:	4632      	mov	r2, r6
   d4898:	2308      	movs	r3, #8
   d489a:	b209      	sxth	r1, r1
   d489c:	4658      	mov	r0, fp
   d489e:	47a0      	blx	r4
        endWrite();
   d48a0:	f8db 3000 	ldr.w	r3, [fp]
   d48a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48a6:	4658      	mov	r0, fp
}
   d48a8:	b011      	add	sp, #68	; 0x44
   d48aa:	ecbd 8b02 	vpop	{d8}
   d48ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   d48b2:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   d48b4:	9906      	ldr	r1, [sp, #24]
   d48b6:	fb14 f202 	smulbb	r2, r4, r2
   d48ba:	440a      	add	r2, r1
   d48bc:	9904      	ldr	r1, [sp, #16]
   d48be:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d48c0:	9400      	str	r4, [sp, #0]
   d48c2:	69db      	ldr	r3, [r3, #28]
   d48c4:	ee18 1a10 	vmov	r1, s16
   d48c8:	461f      	mov	r7, r3
   d48ca:	b212      	sxth	r2, r2
   d48cc:	462b      	mov	r3, r5
   d48ce:	4658      	mov	r0, fp
   d48d0:	47b8      	blx	r7
   d48d2:	e7bb      	b.n	d484c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   d48d4:	9a04      	ldr	r2, [sp, #16]
   d48d6:	4542      	cmp	r2, r8
   d48d8:	d0b8      	beq.n	d484c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   d48da:	2d01      	cmp	r5, #1
   d48dc:	fa1f f289 	uxth.w	r2, r9
   d48e0:	d107      	bne.n	d48f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   d48e2:	2c01      	cmp	r4, #1
   d48e4:	d105      	bne.n	d48f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   d48e6:	699b      	ldr	r3, [r3, #24]
   d48e8:	9906      	ldr	r1, [sp, #24]
   d48ea:	461f      	mov	r7, r3
   d48ec:	440a      	add	r2, r1
   d48ee:	4643      	mov	r3, r8
   d48f0:	e7a8      	b.n	d4844 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   d48f2:	9906      	ldr	r1, [sp, #24]
   d48f4:	f8cd 8004 	str.w	r8, [sp, #4]
   d48f8:	fb14 f202 	smulbb	r2, r4, r2
   d48fc:	440a      	add	r2, r1
   d48fe:	e7df      	b.n	d48c0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   d4900:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d4902:	f8cd 8004 	str.w	r8, [sp, #4]
   d4906:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   d490a:	9a08      	ldr	r2, [sp, #32]
   d490c:	00e4      	lsls	r4, r4, #3
   d490e:	440a      	add	r2, r1
   d4910:	4611      	mov	r1, r2
   d4912:	9400      	str	r4, [sp, #0]
   d4914:	69dc      	ldr	r4, [r3, #28]
   d4916:	4632      	mov	r2, r6
   d4918:	462b      	mov	r3, r5
   d491a:	b209      	sxth	r1, r1
   d491c:	4658      	mov	r0, fp
   d491e:	47a0      	blx	r4
        endWrite();
   d4920:	e7be      	b.n	d48a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d4922:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   d4924:	6851      	ldr	r1, [r2, #4]
        uint8_t  *bitmap = pgm_read_bitmap_ptr(gfxFont);
   d4926:	6812      	ldr	r2, [r2, #0]
   d4928:	920d      	str	r2, [sp, #52]	; 0x34
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   d492a:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   d492c:	b2ff      	uxtb	r7, r7
   d492e:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   d4932:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   d4936:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   d4938:	789a      	ldrb	r2, [r3, #2]
   d493a:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   d493c:	78da      	ldrb	r2, [r3, #3]
   d493e:	920b      	str	r2, [sp, #44]	; 0x2c
        if(size_x > 1 || size_y > 1) {
   d4940:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d4942:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   d4946:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   d494a:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   d494c:	d801      	bhi.n	d4952 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   d494e:	2c01      	cmp	r4, #1
   d4950:	d957      	bls.n	d4a02 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   d4952:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   d4956:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   d4958:	fa0f f38a 	sxth.w	r3, sl
   d495c:	9307      	str	r3, [sp, #28]
        startWrite();
   d495e:	f8db 3000 	ldr.w	r3, [fp]
   d4962:	4658      	mov	r0, fp
   d4964:	695b      	ldr	r3, [r3, #20]
   d4966:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4968:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d496a:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d496e:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4970:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   d4974:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   d4976:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4978:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   d497a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d497c:	429f      	cmp	r7, r3
   d497e:	d28f      	bcs.n	d48a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4980:	9b07      	ldr	r3, [sp, #28]
   d4982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   d4984:	443b      	add	r3, r7
   d4986:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   d498a:	2200      	movs	r2, #0
   d498c:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   d498e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4990:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d4992:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4996:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   d499a:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d499e:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   d49a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   d49a2:	9905      	ldr	r1, [sp, #20]
   d49a4:	4291      	cmp	r1, r2
   d49a6:	d241      	bcs.n	d4a2c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   d49a8:	1c5a      	adds	r2, r3, #1
   d49aa:	b2d2      	uxtb	r2, r2
   d49ac:	075b      	lsls	r3, r3, #29
   d49ae:	920c      	str	r2, [sp, #48]	; 0x30
   d49b0:	d107      	bne.n	d49c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   d49b2:	9b06      	ldr	r3, [sp, #24]
   d49b4:	9906      	ldr	r1, [sp, #24]
   d49b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   d49b8:	3301      	adds	r3, #1
   d49ba:	b29b      	uxth	r3, r3
   d49bc:	f812 9001 	ldrb.w	r9, [r2, r1]
   d49c0:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   d49c2:	f019 0f80 	tst.w	r9, #128	; 0x80
   d49c6:	d012      	beq.n	d49ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   d49c8:	2d01      	cmp	r5, #1
   d49ca:	f8db 3000 	ldr.w	r3, [fp]
   d49ce:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d49d2:	d11a      	bne.n	d4a0a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   d49d4:	2c01      	cmp	r4, #1
   d49d6:	d118      	bne.n	d4a0a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   d49d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d49da:	699b      	ldr	r3, [r3, #24]
   d49dc:	4411      	add	r1, r2
   d49de:	9a05      	ldr	r2, [sp, #20]
   d49e0:	4411      	add	r1, r2
   d49e2:	461e      	mov	r6, r3
   d49e4:	4652      	mov	r2, sl
   d49e6:	9b04      	ldr	r3, [sp, #16]
   d49e8:	b209      	sxth	r1, r1
   d49ea:	4658      	mov	r0, fp
   d49ec:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   d49ee:	9e05      	ldr	r6, [sp, #20]
   d49f0:	3601      	adds	r6, #1
   d49f2:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   d49f4:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   d49f8:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   d49fa:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   d49fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            for(xx=0; xx<w; xx++) {
   d4a00:	e7ce      	b.n	d49a0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   d4a02:	2300      	movs	r3, #0
   d4a04:	e9cd 3307 	strd	r3, r3, [sp, #28]
   d4a08:	e7a9      	b.n	d495e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   d4a0a:	9805      	ldr	r0, [sp, #20]
   d4a0c:	9a08      	ldr	r2, [sp, #32]
   d4a0e:	4402      	add	r2, r0
   d4a10:	fb02 1105 	mla	r1, r2, r5, r1
   d4a14:	9a04      	ldr	r2, [sp, #16]
   d4a16:	e9cd 4200 	strd	r4, r2, [sp]
   d4a1a:	69db      	ldr	r3, [r3, #28]
   d4a1c:	ee18 2a10 	vmov	r2, s16
   d4a20:	461e      	mov	r6, r3
   d4a22:	b209      	sxth	r1, r1
   d4a24:	462b      	mov	r3, r5
   d4a26:	4658      	mov	r0, fp
   d4a28:	47b0      	blx	r6
   d4a2a:	e7e0      	b.n	d49ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   d4a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   d4a2e:	3701      	adds	r7, #1
   d4a30:	4498      	add	r8, r3
   d4a32:	fa5f f888 	uxtb.w	r8, r8
   d4a36:	b2ff      	uxtb	r7, r7
   d4a38:	e79f      	b.n	d497a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   d4a3a:	b011      	add	sp, #68	; 0x44
   d4a3c:	ecbd 8b02 	vpop	{d8}
   d4a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4a44:	000d6dd9 	.word	0x000d6dd9

000d4a48 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   d4a48:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   d4a4a:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   d4a4c:	b085      	sub	sp, #20
   d4a4e:	4604      	mov	r4, r0
   d4a50:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   d4a52:	2a00      	cmp	r2, #0
   d4a54:	d134      	bne.n	d4ac0 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   d4a56:	290a      	cmp	r1, #10
   d4a58:	d108      	bne.n	d4a6c <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   d4a5a:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   d4a5c:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   d4a5e:	7e42      	ldrb	r2, [r0, #25]
   d4a60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   d4a64:	8263      	strh	r3, [r4, #18]
}
   d4a66:	2001      	movs	r0, #1
   d4a68:	b005      	add	sp, #20
   d4a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   d4a6c:	290d      	cmp	r1, #13
   d4a6e:	d0fa      	beq.n	d4a66 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   d4a70:	7ee1      	ldrb	r1, [r4, #27]
   d4a72:	7e00      	ldrb	r0, [r0, #24]
   d4a74:	7e65      	ldrb	r5, [r4, #25]
   d4a76:	b171      	cbz	r1, d4a96 <_ZN12Adafruit_GFX5writeEh+0x4e>
   d4a78:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   d4a7c:	2106      	movs	r1, #6
   d4a7e:	fb11 6100 	smlabb	r1, r1, r0, r6
   d4a82:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   d4a86:	42b1      	cmp	r1, r6
   d4a88:	bfc1      	itttt	gt
   d4a8a:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   d4a8e:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   d4a90:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   d4a94:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4a96:	8ae2      	ldrh	r2, [r4, #22]
   d4a98:	9201      	str	r2, [sp, #4]
   d4a9a:	8aa2      	ldrh	r2, [r4, #20]
   d4a9c:	9200      	str	r2, [sp, #0]
   d4a9e:	e9cd 0502 	strd	r0, r5, [sp, #8]
   d4aa2:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4aa6:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4aaa:	4620      	mov	r0, r4
   d4aac:	f7ff fe5e 	bl	d476c <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   d4ab0:	7e23      	ldrb	r3, [r4, #24]
   d4ab2:	8a22      	ldrh	r2, [r4, #16]
   d4ab4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d4ab8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4abc:	8223      	strh	r3, [r4, #16]
   d4abe:	e7d2      	b.n	d4a66 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   d4ac0:	290a      	cmp	r1, #10
   d4ac2:	d107      	bne.n	d4ad4 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   d4ac4:	2300      	movs	r3, #0
   d4ac6:	8203      	strh	r3, [r0, #16]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4ac8:	7a93      	ldrb	r3, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   d4aca:	7e41      	ldrb	r1, [r0, #25]
   d4acc:	8a42      	ldrh	r2, [r0, #18]
   d4ace:	fb01 2303 	mla	r3, r1, r3, r2
   d4ad2:	e7c7      	b.n	d4a64 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   d4ad4:	290d      	cmp	r1, #13
   d4ad6:	d0c6      	beq.n	d4a66 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   d4ad8:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   d4ada:	42a9      	cmp	r1, r5
   d4adc:	d3c3      	bcc.n	d4a66 <_ZN12Adafruit_GFX5writeEh+0x1e>
   d4ade:	7a51      	ldrb	r1, [r2, #9]
   d4ae0:	4299      	cmp	r1, r3
   d4ae2:	d3c0      	bcc.n	d4a66 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   d4ae4:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   d4ae6:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   d4ae8:	b2ed      	uxtb	r5, r5
   d4aea:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   d4aee:	78af      	ldrb	r7, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   d4af0:	b32f      	cbz	r7, d4b3e <_ZN12Adafruit_GFX5writeEh+0xf6>
   d4af2:	78e9      	ldrb	r1, [r5, #3]
   d4af4:	b319      	cbz	r1, d4b3e <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   d4af6:	7ee1      	ldrb	r1, [r4, #27]
   d4af8:	7e00      	ldrb	r0, [r0, #24]
   d4afa:	7e66      	ldrb	r6, [r4, #25]
   d4afc:	b191      	cbz	r1, d4b24 <_ZN12Adafruit_GFX5writeEh+0xdc>
   d4afe:	f995 1005 	ldrsb.w	r1, [r5, #5]
   d4b02:	4439      	add	r1, r7
   d4b04:	f9b4 7010 	ldrsh.w	r7, [r4, #16]
   d4b08:	fb00 7101 	mla	r1, r0, r1, r7
   d4b0c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
   d4b10:	42b9      	cmp	r1, r7
   d4b12:	dd07      	ble.n	d4b24 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   d4b14:	2700      	movs	r7, #0
   d4b16:	8227      	strh	r7, [r4, #16]
   d4b18:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   d4b1c:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   d4b1e:	fb02 1206 	mla	r2, r2, r6, r1
   d4b22:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   d4b24:	8ae2      	ldrh	r2, [r4, #22]
   d4b26:	9201      	str	r2, [sp, #4]
   d4b28:	8aa2      	ldrh	r2, [r4, #20]
   d4b2a:	9200      	str	r2, [sp, #0]
   d4b2c:	e9cd 0602 	strd	r0, r6, [sp, #8]
   d4b30:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   d4b34:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   d4b38:	4620      	mov	r0, r4
   d4b3a:	f7ff fe17 	bl	d476c <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   d4b3e:	7929      	ldrb	r1, [r5, #4]
   d4b40:	7e23      	ldrb	r3, [r4, #24]
   d4b42:	8a22      	ldrh	r2, [r4, #16]
   d4b44:	fb01 2303 	mla	r3, r1, r3, r2
   d4b48:	e7b8      	b.n	d4abc <_ZN12Adafruit_GFX5writeEh+0x74>

000d4b4a <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   d4b4a:	2901      	cmp	r1, #1
   d4b4c:	bf38      	it	cc
   d4b4e:	2101      	movcc	r1, #1
   d4b50:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   d4b52:	7641      	strb	r1, [r0, #25]
}
   d4b54:	4770      	bx	lr
	...

000d4b58 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   d4b58:	b510      	push	{r4, lr}
   d4b5a:	4b06      	ldr	r3, [pc, #24]	; (d4b74 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   d4b5c:	6003      	str	r3, [r0, #0]
   d4b5e:	4604      	mov	r4, r0
	if (mutex) {
   d4b60:	6d00      	ldr	r0, [r0, #80]	; 0x50
   d4b62:	b108      	cbz	r0, d4b68 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   d4b64:	f000 ff48 	bl	d59f8 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   d4b68:	4620      	mov	r0, r4
   d4b6a:	f000 fa5f 	bl	d502c <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   d4b6e:	4620      	mov	r0, r4
   d4b70:	bd10      	pop	{r4, pc}
   d4b72:	bf00      	nop
   d4b74:	000d733c 	.word	0x000d733c

000d4b78 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   d4b78:	b510      	push	{r4, lr}
   d4b7a:	4604      	mov	r4, r0
}
   d4b7c:	f7ff ffec 	bl	d4b58 <_ZN16OledWingAdafruitD1Ev>
   d4b80:	4620      	mov	r0, r4
   d4b82:	2170      	movs	r1, #112	; 0x70
   d4b84:	f002 f871 	bl	d6c6a <_ZdlPvj>
   d4b88:	4620      	mov	r0, r4
   d4b8a:	bd10      	pop	{r4, pc}

000d4b8c <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   d4b8c:	b530      	push	{r4, r5, lr}
   d4b8e:	b085      	sub	sp, #20
   d4b90:	4604      	mov	r4, r0
   d4b92:	460d      	mov	r5, r1
   d4b94:	f002 f83c 	bl	d6c10 <_Z19__fetch_global_Wirev>
   d4b98:	4a10      	ldr	r2, [pc, #64]	; (d4bdc <_ZN16OledWingAdafruitC1Ei+0x50>)
   d4b9a:	4911      	ldr	r1, [pc, #68]	; (d4be0 <_ZN16OledWingAdafruitC1Ei+0x54>)
   d4b9c:	e9cd 2101 	strd	r2, r1, [sp, #4]
   d4ba0:	f04f 32ff 	mov.w	r2, #4294967295
   d4ba4:	2180      	movs	r1, #128	; 0x80
   d4ba6:	4603      	mov	r3, r0
   d4ba8:	9200      	str	r2, [sp, #0]
   d4baa:	4620      	mov	r0, r4
   d4bac:	2220      	movs	r2, #32
   d4bae:	f000 fac3 	bl	d5138 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   d4bb2:	4b0c      	ldr	r3, [pc, #48]	; (d4be4 <_ZN16OledWingAdafruitC1Ei+0x58>)
   d4bb4:	6023      	str	r3, [r4, #0]
   d4bb6:	2300      	movs	r3, #0
   d4bb8:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   d4bbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4bc0:	f000 f872 	bl	d4ca8 <_ZN8DebounceC1Ev>
   d4bc4:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4bc8:	f000 f86e 	bl	d4ca8 <_ZN8DebounceC1Ev>
   d4bcc:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4bd0:	f000 f86a 	bl	d4ca8 <_ZN8DebounceC1Ev>
}
   d4bd4:	4620      	mov	r0, r4
   d4bd6:	b005      	add	sp, #20
   d4bd8:	bd30      	pop	{r4, r5, pc}
   d4bda:	bf00      	nop
   d4bdc:	00061a80 	.word	0x00061a80
   d4be0:	000186a0 	.word	0x000186a0
   d4be4:	000d733c 	.word	0x000d733c

000d4be8 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   d4be8:	b513      	push	{r0, r1, r4, lr}
   d4bea:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   d4bec:	3050      	adds	r0, #80	; 0x50
   d4bee:	f000 fefb 	bl	d59e8 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   d4bf2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4bf4:	07d9      	lsls	r1, r3, #31
   d4bf6:	d505      	bpl.n	d4c04 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   d4bf8:	2202      	movs	r2, #2
   d4bfa:	2104      	movs	r1, #4
   d4bfc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d4c00:	f000 f866 	bl	d4cd0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   d4c04:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4c06:	079a      	lsls	r2, r3, #30
   d4c08:	d505      	bpl.n	d4c16 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   d4c0a:	2200      	movs	r2, #0
   d4c0c:	2103      	movs	r1, #3
   d4c0e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4c12:	f000 f85d 	bl	d4cd0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   d4c16:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4c18:	075b      	lsls	r3, r3, #29
   d4c1a:	d505      	bpl.n	d4c28 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   d4c1c:	2202      	movs	r2, #2
   d4c1e:	4611      	mov	r1, r2
   d4c20:	f104 0068 	add.w	r0, r4, #104	; 0x68
   d4c24:	f000 f854 	bl	d4cd0 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   d4c28:	2301      	movs	r3, #1
   d4c2a:	9300      	str	r3, [sp, #0]
   d4c2c:	223c      	movs	r2, #60	; 0x3c
   d4c2e:	2102      	movs	r1, #2
   d4c30:	4620      	mov	r0, r4
   d4c32:	f000 fb81 	bl	d5338 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   d4c36:	b002      	add	sp, #8
   d4c38:	bd10      	pop	{r4, pc}

000d4c3a <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   d4c3a:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   d4c3c:	6d43      	ldr	r3, [r0, #84]	; 0x54
   d4c3e:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   d4c40:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   d4c42:	d502      	bpl.n	d4c4a <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   d4c44:	3058      	adds	r0, #88	; 0x58
   d4c46:	f000 f850 	bl	d4cea <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   d4c4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4c4c:	079a      	lsls	r2, r3, #30
   d4c4e:	d503      	bpl.n	d4c58 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   d4c50:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d4c54:	f000 f849 	bl	d4cea <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   d4c58:	6d63      	ldr	r3, [r4, #84]	; 0x54
   d4c5a:	075b      	lsls	r3, r3, #29
   d4c5c:	d505      	bpl.n	d4c6a <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   d4c5e:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   d4c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   d4c66:	f000 b840 	b.w	d4cea <_ZN8Debounce6updateEv>
}
   d4c6a:	bd10      	pop	{r4, pc}

000d4c6c <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   d4c6c:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
   d4c6e:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   d4c70:	f013 0001 	ands.w	r0, r3, #1
   d4c74:	d003      	beq.n	d4c7e <_ZN16OledWingAdafruit8pressedAEv+0x12>
   d4c76:	f102 0058 	add.w	r0, r2, #88	; 0x58
   d4c7a:	f000 b866 	b.w	d4d4a <_ZN8Debounce4fellEv>
}
   d4c7e:	4770      	bx	lr

000d4c80 <_ZN16OledWingAdafruit8pressedBEv>:

bool OledWingAdafruit::pressedB() {
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   d4c80:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedB() {
   d4c82:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   d4c84:	f013 0002 	ands.w	r0, r3, #2
   d4c88:	d003      	beq.n	d4c92 <_ZN16OledWingAdafruit8pressedBEv+0x12>
   d4c8a:	f102 0060 	add.w	r0, r2, #96	; 0x60
   d4c8e:	f000 b85c 	b.w	d4d4a <_ZN8Debounce4fellEv>
}
   d4c92:	4770      	bx	lr

000d4c94 <_ZN16OledWingAdafruit8pressedCEv>:

bool OledWingAdafruit::pressedC() {
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   d4c94:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedC() {
   d4c96:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   d4c98:	f013 0004 	ands.w	r0, r3, #4
   d4c9c:	d003      	beq.n	d4ca6 <_ZN16OledWingAdafruit8pressedCEv+0x12>
   d4c9e:	f102 0068 	add.w	r0, r2, #104	; 0x68
   d4ca2:	f000 b852 	b.w	d4d4a <_ZN8Debounce4fellEv>
}
   d4ca6:	4770      	bx	lr

000d4ca8 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   d4ca8:	2100      	movs	r1, #0
   d4caa:	220a      	movs	r2, #10
   d4cac:	e9c0 1200 	strd	r1, r2, [r0]
{}
   d4cb0:	4770      	bx	lr

000d4cb2 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   d4cb2:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   d4cb4:	b510      	push	{r4, lr}
   d4cb6:	4604      	mov	r4, r0
    this->pin = pin;
   d4cb8:	71c1      	strb	r1, [r0, #7]
    state = 0;
   d4cba:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   d4cbc:	b288      	uxth	r0, r1
   d4cbe:	f001 ff55 	bl	d6b6c <digitalRead>
   d4cc2:	b108      	cbz	r0, d4cc8 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   d4cc4:	2303      	movs	r3, #3
   d4cc6:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4cc8:	f000 fe86 	bl	d59d8 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   d4ccc:	6020      	str	r0, [r4, #0]
#endif
}
   d4cce:	bd10      	pop	{r4, pc}

000d4cd0 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   d4cd0:	b538      	push	{r3, r4, r5, lr}
   d4cd2:	460c      	mov	r4, r1
   d4cd4:	4605      	mov	r5, r0
  pinMode(pin, mode);
   d4cd6:	4611      	mov	r1, r2
   d4cd8:	b2a0      	uxth	r0, r4
   d4cda:	f001 ff1d 	bl	d6b18 <pinMode>
  
  this->attach(pin);
   d4cde:	4621      	mov	r1, r4
   d4ce0:	4628      	mov	r0, r5
}
   d4ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   d4ce6:	f7ff bfe4 	b.w	d4cb2 <_ZN8Debounce6attachEi>

000d4cea <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   d4cea:	b538      	push	{r3, r4, r5, lr}
   d4cec:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   d4cee:	79c0      	ldrb	r0, [r0, #7]
   d4cf0:	f001 ff3c 	bl	d6b6c <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   d4cf4:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   d4cf6:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   d4cf8:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   d4cfc:	bf18      	it	ne
   d4cfe:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d4d00:	f3c5 0540 	ubfx	r5, r5, #1, #1
   d4d04:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   d4d06:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   d4d08:	d00a      	beq.n	d4d20 <_ZN8Debounce6updateEv+0x36>
   d4d0a:	f000 fe65 	bl	d59d8 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   d4d0e:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   d4d10:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   d4d12:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   d4d16:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   d4d18:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   d4d1a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   d4d1e:	bd38      	pop	{r3, r4, r5, pc}
   d4d20:	f000 fe5a 	bl	d59d8 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   d4d24:	6823      	ldr	r3, [r4, #0]
   d4d26:	1ac0      	subs	r0, r0, r3
   d4d28:	88a3      	ldrh	r3, [r4, #4]
   d4d2a:	4298      	cmp	r0, r3
   d4d2c:	d3f4      	bcc.n	d4d18 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   d4d2e:	79a3      	ldrb	r3, [r4, #6]
   d4d30:	f003 0301 	and.w	r3, r3, #1
   d4d34:	42ab      	cmp	r3, r5
   d4d36:	d0ef      	beq.n	d4d18 <_ZN8Debounce6updateEv+0x2e>
   d4d38:	f000 fe4e 	bl	d59d8 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   d4d3c:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   d4d3e:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   d4d40:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   d4d44:	f043 0308 	orr.w	r3, r3, #8
   d4d48:	e7e5      	b.n	d4d16 <_ZN8Debounce6updateEv+0x2c>

000d4d4a <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
   d4d4a:	7980      	ldrb	r0, [r0, #6]
   d4d4c:	f000 0009 	and.w	r0, r0, #9
   d4d50:	f1a0 0308 	sub.w	r3, r0, #8
   d4d54:	4258      	negs	r0, r3
   d4d56:	4158      	adcs	r0, r3
   d4d58:	4770      	bx	lr

000d4d5a <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4d5a:	6803      	ldr	r3, [r0, #0]
   d4d5c:	b2c9      	uxtb	r1, r1
   d4d5e:	689b      	ldr	r3, [r3, #8]
   d4d60:	4718      	bx	r3

000d4d62 <_ZN8VCNL4040C1Ev>:
#define VCNL4040_WHITE_DATA 0x0A
#define VCNL4040_INT_FLAG 0x0B //Upper
#define VCNL4040_ID 0x0C

//Class constructor
VCNL4040::VCNL4040(void) {}
   d4d62:	4770      	bx	lr

000d4d64 <_ZN8VCNL404011isConnectedEv>:

  return (true);
}

//Test to see if the device is responding
boolean VCNL4040::isConnected(void) {
   d4d64:	b510      	push	{r4, lr}
   d4d66:	4604      	mov	r4, r0
  _i2cPort->beginTransmission((uint8_t)VCNL4040_ADDR);
   d4d68:	2160      	movs	r1, #96	; 0x60
   d4d6a:	6800      	ldr	r0, [r0, #0]
   d4d6c:	f001 fd9a 	bl	d68a4 <_ZN7TwoWire17beginTransmissionEh>
  return (_i2cPort->endTransmission() == 0);
   d4d70:	6820      	ldr	r0, [r4, #0]
   d4d72:	f001 fda2 	bl	d68ba <_ZN7TwoWire15endTransmissionEv>
}
   d4d76:	fab0 f080 	clz	r0, r0
   d4d7a:	0940      	lsrs	r0, r0, #5
   d4d7c:	bd10      	pop	{r4, pc}

000d4d7e <_ZN8VCNL404011readCommandEh>:
  return (interruptFlags & VCNL4040_INT_FLAG_ALS_LOW);
}

//Reads two consecutive bytes from a given 'command code' location
uint16_t VCNL4040::readCommand(uint8_t commandCode)
{
   d4d7e:	b538      	push	{r3, r4, r5, lr}
   d4d80:	4605      	mov	r5, r0
   d4d82:	460c      	mov	r4, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   d4d84:	6800      	ldr	r0, [r0, #0]
   d4d86:	2160      	movs	r1, #96	; 0x60
   d4d88:	f001 fd8c 	bl	d68a4 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   d4d8c:	6828      	ldr	r0, [r5, #0]
   d4d8e:	6803      	ldr	r3, [r0, #0]
   d4d90:	4621      	mov	r1, r4
   d4d92:	689b      	ldr	r3, [r3, #8]
   d4d94:	4798      	blx	r3
  if (_i2cPort->endTransmission(false) != 0) //Send a restart command. Do not release bus.
   d4d96:	6828      	ldr	r0, [r5, #0]
   d4d98:	2100      	movs	r1, #0
   d4d9a:	f001 fd8a 	bl	d68b2 <_ZN7TwoWire15endTransmissionEh>
   d4d9e:	b108      	cbz	r0, d4da4 <_ZN8VCNL404011readCommandEh+0x26>
  {
    return (0); //Sensor did not ACK
   d4da0:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }

  return (0); //Sensor did not respond
}
   d4da2:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)VCNL4040_ADDR, (uint8_t)2);
   d4da4:	6828      	ldr	r0, [r5, #0]
   d4da6:	2202      	movs	r2, #2
   d4da8:	2160      	movs	r1, #96	; 0x60
   d4daa:	f001 fd78 	bl	d689e <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   d4dae:	6828      	ldr	r0, [r5, #0]
   d4db0:	6803      	ldr	r3, [r0, #0]
   d4db2:	691b      	ldr	r3, [r3, #16]
   d4db4:	4798      	blx	r3
   d4db6:	2800      	cmp	r0, #0
   d4db8:	d0f2      	beq.n	d4da0 <_ZN8VCNL404011readCommandEh+0x22>
    uint8_t lsb = _i2cPort->read();
   d4dba:	6828      	ldr	r0, [r5, #0]
   d4dbc:	6803      	ldr	r3, [r0, #0]
   d4dbe:	695b      	ldr	r3, [r3, #20]
   d4dc0:	4798      	blx	r3
   d4dc2:	4604      	mov	r4, r0
    uint8_t msb = _i2cPort->read();
   d4dc4:	6828      	ldr	r0, [r5, #0]
   d4dc6:	6803      	ldr	r3, [r0, #0]
   d4dc8:	695b      	ldr	r3, [r3, #20]
   d4dca:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   d4dcc:	b2e4      	uxtb	r4, r4
   d4dce:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   d4dd2:	b280      	uxth	r0, r0
   d4dd4:	e7e5      	b.n	d4da2 <_ZN8VCNL404011readCommandEh+0x24>

000d4dd6 <_ZN8VCNL404012getProximityEv>:
  return (readCommand(VCNL4040_PS_DATA));
   d4dd6:	2108      	movs	r1, #8
   d4dd8:	f7ff bfd1 	b.w	d4d7e <_ZN8VCNL404011readCommandEh>

000d4ddc <_ZN8VCNL404010getAmbientEv>:
  return (readCommand(VCNL4040_ALS_DATA));
   d4ddc:	2109      	movs	r1, #9
   d4dde:	f7ff bfce 	b.w	d4d7e <_ZN8VCNL404011readCommandEh>

000d4de2 <_ZN8VCNL40405getIDEv>:
  return (readCommand(VCNL4040_ID));
   d4de2:	210c      	movs	r1, #12
   d4de4:	f7ff bfcb 	b.w	d4d7e <_ZN8VCNL404011readCommandEh>

000d4de8 <_ZN8VCNL404012writeCommandEht>:

//Write two bytes to a given command code location (8 bits)
boolean VCNL4040::writeCommand(uint8_t commandCode, uint16_t value)
{
   d4de8:	b570      	push	{r4, r5, r6, lr}
   d4dea:	4604      	mov	r4, r0
   d4dec:	460e      	mov	r6, r1
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   d4dee:	6800      	ldr	r0, [r0, #0]
   d4df0:	2160      	movs	r1, #96	; 0x60
{
   d4df2:	4615      	mov	r5, r2
  _i2cPort->beginTransmission(VCNL4040_ADDR);
   d4df4:	f001 fd56 	bl	d68a4 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(commandCode);
   d4df8:	6820      	ldr	r0, [r4, #0]
   d4dfa:	6803      	ldr	r3, [r0, #0]
   d4dfc:	4631      	mov	r1, r6
   d4dfe:	689b      	ldr	r3, [r3, #8]
   d4e00:	4798      	blx	r3
  _i2cPort->write(value & 0xFF); //LSB
   d4e02:	b2e9      	uxtb	r1, r5
   d4e04:	6820      	ldr	r0, [r4, #0]
   d4e06:	f7ff ffa8 	bl	d4d5a <_ZN7TwoWire5writeEi>
  _i2cPort->write(value >> 8); //MSB
   d4e0a:	0a29      	lsrs	r1, r5, #8
   d4e0c:	6820      	ldr	r0, [r4, #0]
   d4e0e:	f7ff ffa4 	bl	d4d5a <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d4e12:	6820      	ldr	r0, [r4, #0]
   d4e14:	f001 fd51 	bl	d68ba <_ZN7TwoWire15endTransmissionEv>
  {
    return (false); //Sensor did not ACK
  }

  return (true);
}
   d4e18:	fab0 f080 	clz	r0, r0
   d4e1c:	0940      	lsrs	r0, r0, #5
   d4e1e:	bd70      	pop	{r4, r5, r6, pc}

000d4e20 <_ZN8VCNL404017writeCommandLowerEhh>:

//Given a command code (address) write to the lower byte without affecting the upper byte
boolean VCNL4040::writeCommandLower(uint8_t commandCode, uint8_t newValue)
{
   d4e20:	b570      	push	{r4, r5, r6, lr}
   d4e22:	4604      	mov	r4, r0
   d4e24:	460d      	mov	r5, r1
   d4e26:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   d4e28:	f7ff ffa9 	bl	d4d7e <_ZN8VCNL404011readCommandEh>
  commandValue &= 0xFF00; //Remove lower 8 bits
   d4e2c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
  commandValue |= (uint16_t)newValue; //Mask in
  return (writeCommand(commandCode, commandValue));
   d4e30:	ea40 0206 	orr.w	r2, r0, r6
   d4e34:	4629      	mov	r1, r5
   d4e36:	4620      	mov	r0, r4
}
   d4e38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   d4e3c:	f7ff bfd4 	b.w	d4de8 <_ZN8VCNL404012writeCommandEht>

000d4e40 <_ZN8VCNL404017writeCommandUpperEhh>:

//Given a command code (address) write to the upper byte without affecting the lower byte
boolean VCNL4040::writeCommandUpper(uint8_t commandCode, uint8_t newValue)
{
   d4e40:	b570      	push	{r4, r5, r6, lr}
   d4e42:	4604      	mov	r4, r0
   d4e44:	460d      	mov	r5, r1
   d4e46:	4616      	mov	r6, r2
  uint16_t commandValue = readCommand(commandCode);
   d4e48:	f7ff ff99 	bl	d4d7e <_ZN8VCNL404011readCommandEh>
  commandValue &= 0x00FF; //Remove upper 8 bits
   d4e4c:	b2c0      	uxtb	r0, r0
  commandValue |= (uint16_t)newValue << 8; //Mask in
  return (writeCommand(commandCode, commandValue));
   d4e4e:	ea40 2206 	orr.w	r2, r0, r6, lsl #8
   d4e52:	4629      	mov	r1, r5
   d4e54:	4620      	mov	r0, r4
}
   d4e56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return (writeCommand(commandCode, commandValue));
   d4e5a:	f7ff bfc5 	b.w	d4de8 <_ZN8VCNL404012writeCommandEht>

000d4e5e <_ZN8VCNL404016readCommandUpperEh>:
  return (commandValue & 0xFF);
}

//Given a command code (address) read the upper byte
uint8_t VCNL4040::readCommandUpper(uint8_t commandCode)
{
   d4e5e:	b508      	push	{r3, lr}
  uint16_t commandValue = readCommand(commandCode);
   d4e60:	f7ff ff8d 	bl	d4d7e <_ZN8VCNL404011readCommandEh>
  return (commandValue >> 8);
}
   d4e64:	f3c0 2007 	ubfx	r0, r0, #8, #8
   d4e68:	bd08      	pop	{r3, pc}

000d4e6a <_ZN8VCNL40407bitMaskEhbhh>:
//commandHeight is used to select between the upper or lower byte of command register
//Example:
//Write dutyValue into PS_CONF1, lower byte, using the Duty_Mask
//bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
void VCNL4040::bitMask(uint8_t commandAddress, boolean commandHeight, uint8_t mask, uint8_t thing)
{
   d4e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4e6e:	4604      	mov	r4, r0
   d4e70:	f89d 7018 	ldrb.w	r7, [sp, #24]
   d4e74:	460d      	mov	r5, r1
   d4e76:	4698      	mov	r8, r3
  // Grab current register context
  uint8_t registerContents;
  if (commandHeight == LOWER) registerContents = readCommandLower(commandAddress);
   d4e78:	4616      	mov	r6, r2
   d4e7a:	b16a      	cbz	r2, d4e98 <_ZN8VCNL40407bitMaskEhbhh+0x2e>
  uint16_t commandValue = readCommand(commandCode);
   d4e7c:	f7ff ff7f 	bl	d4d7e <_ZN8VCNL404011readCommandEh>
  return (commandValue & 0xFF);
   d4e80:	b2c0      	uxtb	r0, r0
  else registerContents = readCommandUpper(commandAddress);

  // Zero-out the portions of the register we're interested in
  registerContents &= mask;
   d4e82:	ea00 0308 	and.w	r3, r0, r8

  // Mask in new thing
  registerContents |= thing;
   d4e86:	ea43 0207 	orr.w	r2, r3, r7

  // Change contents
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   d4e8a:	4629      	mov	r1, r5
   d4e8c:	4620      	mov	r0, r4
   d4e8e:	b136      	cbz	r6, d4e9e <_ZN8VCNL40407bitMaskEhbhh+0x34>
  else writeCommandUpper(commandAddress, registerContents);
}
   d4e90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (commandHeight == LOWER) writeCommandLower(commandAddress, registerContents);
   d4e94:	f7ff bfc4 	b.w	d4e20 <_ZN8VCNL404017writeCommandLowerEhh>
  else registerContents = readCommandUpper(commandAddress);
   d4e98:	f7ff ffe1 	bl	d4e5e <_ZN8VCNL404016readCommandUpperEh>
   d4e9c:	e7f1      	b.n	d4e82 <_ZN8VCNL40407bitMaskEhbhh+0x18>
}
   d4e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  else writeCommandUpper(commandAddress, registerContents);
   d4ea2:	f7ff bfcd 	b.w	d4e40 <_ZN8VCNL404017writeCommandUpperEhh>

000d4ea6 <_ZN8VCNL404014setIRDutyCycleEt>:
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   d4ea6:	f5b1 7fa0 	cmp.w	r1, #320	; 0x140
{
   d4eaa:	b507      	push	{r0, r1, r2, lr}
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   d4eac:	d20e      	bcs.n	d4ecc <_ZN8VCNL404014setIRDutyCycleEt+0x26>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   d4eae:	299f      	cmp	r1, #159	; 0x9f
   d4eb0:	d80e      	bhi.n	d4ed0 <_ZN8VCNL404014setIRDutyCycleEt+0x2a>
  else if(dutyValue > 80 - 1) dutyValue = VCNL4040_PS_DUTY_80;
   d4eb2:	294f      	cmp	r1, #79	; 0x4f
  else dutyValue = VCNL4040_PS_DUTY_40;
   d4eb4:	bf8c      	ite	hi
   d4eb6:	2340      	movhi	r3, #64	; 0x40
   d4eb8:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_DUTY_MASK, dutyValue);
   d4eba:	9300      	str	r3, [sp, #0]
   d4ebc:	2201      	movs	r2, #1
   d4ebe:	233f      	movs	r3, #63	; 0x3f
   d4ec0:	2103      	movs	r1, #3
   d4ec2:	f7ff ffd2 	bl	d4e6a <_ZN8VCNL40407bitMaskEhbhh>
}
   d4ec6:	b003      	add	sp, #12
   d4ec8:	f85d fb04 	ldr.w	pc, [sp], #4
  if(dutyValue > 320 - 1) dutyValue = VCNL4040_PS_DUTY_320;
   d4ecc:	23c0      	movs	r3, #192	; 0xc0
   d4ece:	e7f4      	b.n	d4eba <_ZN8VCNL404014setIRDutyCycleEt+0x14>
  else if(dutyValue > 160 - 1) dutyValue = VCNL4040_PS_DUTY_160;
   d4ed0:	2380      	movs	r3, #128	; 0x80
   d4ed2:	e7f2      	b.n	d4eba <_ZN8VCNL404014setIRDutyCycleEt+0x14>

000d4ed4 <_ZN8VCNL404014powerOnAmbientEv>:
{
   d4ed4:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_ALS_CONF, LOWER, VCNL4040_ALS_SD_MASK, VCNL4040_ALS_SD_POWER_ON);
   d4ed6:	2100      	movs	r1, #0
   d4ed8:	9100      	str	r1, [sp, #0]
   d4eda:	23fe      	movs	r3, #254	; 0xfe
   d4edc:	2201      	movs	r2, #1
   d4ede:	f7ff ffc4 	bl	d4e6a <_ZN8VCNL40407bitMaskEhbhh>
}
   d4ee2:	b003      	add	sp, #12
   d4ee4:	f85d fb04 	ldr.w	pc, [sp], #4

000d4ee8 <_ZN8VCNL404015powerOffAmbientEv>:
{
   d4ee8:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_ALS_CONF, LOWER, VCNL4040_ALS_SD_MASK, VCNL4040_ALS_SD_POWER_OFF);
   d4eea:	2201      	movs	r2, #1
   d4eec:	9200      	str	r2, [sp, #0]
   d4eee:	23fe      	movs	r3, #254	; 0xfe
   d4ef0:	2100      	movs	r1, #0
   d4ef2:	f7ff ffba 	bl	d4e6a <_ZN8VCNL40407bitMaskEhbhh>
}
   d4ef6:	b003      	add	sp, #12
   d4ef8:	f85d fb04 	ldr.w	pc, [sp], #4

000d4efc <_ZN8VCNL404022setProxIntegrationTimeEh>:
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   d4efc:	2907      	cmp	r1, #7
{
   d4efe:	b507      	push	{r0, r1, r2, lr}
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   d4f00:	d80f      	bhi.n	d4f22 <_ZN8VCNL404022setProxIntegrationTimeEh+0x26>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   d4f02:	2903      	cmp	r1, #3
   d4f04:	d80f      	bhi.n	d4f26 <_ZN8VCNL404022setProxIntegrationTimeEh+0x2a>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   d4f06:	d010      	beq.n	d4f2a <_ZN8VCNL404022setProxIntegrationTimeEh+0x2e>
  else if(timeValue > 2 - 1) timeValue = VCNL4040_PS_IT_2T;
   d4f08:	2902      	cmp	r1, #2
  else timeValue = VCNL4040_PS_IT_1T;
   d4f0a:	bf0c      	ite	eq
   d4f0c:	2304      	moveq	r3, #4
   d4f0e:	2300      	movne	r3, #0
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_IT_MASK, timeValue);
   d4f10:	9300      	str	r3, [sp, #0]
   d4f12:	2201      	movs	r2, #1
   d4f14:	23f1      	movs	r3, #241	; 0xf1
   d4f16:	2103      	movs	r1, #3
   d4f18:	f7ff ffa7 	bl	d4e6a <_ZN8VCNL40407bitMaskEhbhh>
}
   d4f1c:	b003      	add	sp, #12
   d4f1e:	f85d fb04 	ldr.w	pc, [sp], #4
  if(timeValue > 8 - 1) timeValue = VCNL4040_PS_IT_8T;
   d4f22:	230e      	movs	r3, #14
   d4f24:	e7f4      	b.n	d4f10 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 4 - 1) timeValue = VCNL4040_PS_IT_4T;
   d4f26:	230c      	movs	r3, #12
   d4f28:	e7f2      	b.n	d4f10 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>
  else if(timeValue > 3 - 1) timeValue = VCNL4040_PS_IT_3T;
   d4f2a:	2308      	movs	r3, #8
   d4f2c:	e7f0      	b.n	d4f10 <_ZN8VCNL404022setProxIntegrationTimeEh+0x14>

000d4f2e <_ZN8VCNL404016powerOnProximityEv>:
{
   d4f2e:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_ON);
   d4f30:	2300      	movs	r3, #0
   d4f32:	9300      	str	r3, [sp, #0]
   d4f34:	2201      	movs	r2, #1
   d4f36:	23fe      	movs	r3, #254	; 0xfe
   d4f38:	2103      	movs	r1, #3
   d4f3a:	f7ff ff96 	bl	d4e6a <_ZN8VCNL40407bitMaskEhbhh>
}
   d4f3e:	b003      	add	sp, #12
   d4f40:	f85d fb04 	ldr.w	pc, [sp], #4

000d4f44 <_ZN8VCNL404017powerOffProximityEv>:
{
   d4f44:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF1, LOWER, VCNL4040_PS_SD_MASK, VCNL4040_PS_SD_POWER_OFF);
   d4f46:	2201      	movs	r2, #1
   d4f48:	9200      	str	r2, [sp, #0]
   d4f4a:	23fe      	movs	r3, #254	; 0xfe
   d4f4c:	2103      	movs	r1, #3
   d4f4e:	f7ff ff8c 	bl	d4e6a <_ZN8VCNL40407bitMaskEhbhh>
}
   d4f52:	b003      	add	sp, #12
   d4f54:	f85d fb04 	ldr.w	pc, [sp], #4

000d4f58 <_ZN8VCNL404017setProxResolutionEh>:
{
   d4f58:	b507      	push	{r0, r1, r2, lr}
	if(resolutionValue > 16 - 1) resolutionValue = VCNL4040_PS_HD_16_BIT;
   d4f5a:	290f      	cmp	r1, #15
	else resolutionValue = VCNL4040_PS_HD_12_BIT;
   d4f5c:	bf8c      	ite	hi
   d4f5e:	2308      	movhi	r3, #8
   d4f60:	2300      	movls	r3, #0
  bitMask(VCNL4040_PS_CONF2, UPPER, VCNL4040_PS_HD_MASK, resolutionValue);
   d4f62:	9300      	str	r3, [sp, #0]
   d4f64:	2200      	movs	r2, #0
   d4f66:	23f7      	movs	r3, #247	; 0xf7
   d4f68:	2103      	movs	r1, #3
   d4f6a:	f7ff ff7e 	bl	d4e6a <_ZN8VCNL40407bitMaskEhbhh>
}
   d4f6e:	b003      	add	sp, #12
   d4f70:	f85d fb04 	ldr.w	pc, [sp], #4

000d4f74 <_ZN8VCNL404022enableSmartPersistanceEv>:
{
   d4f74:	b507      	push	{r0, r1, r2, lr}
  bitMask(VCNL4040_PS_CONF3, LOWER, VCNL4040_PS_SMART_PERS_MASK, VCNL4040_PS_SMART_PERS_ENABLE);
   d4f76:	2302      	movs	r3, #2
   d4f78:	9300      	str	r3, [sp, #0]
   d4f7a:	2201      	movs	r2, #1
   d4f7c:	23ef      	movs	r3, #239	; 0xef
   d4f7e:	2104      	movs	r1, #4
   d4f80:	f7ff ff73 	bl	d4e6a <_ZN8VCNL40407bitMaskEhbhh>
}
   d4f84:	b003      	add	sp, #12
   d4f86:	f85d fb04 	ldr.w	pc, [sp], #4

000d4f8a <_ZN8VCNL404013setLEDCurrentEh>:
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d4f8a:	29c7      	cmp	r1, #199	; 0xc7
{
   d4f8c:	b507      	push	{r0, r1, r2, lr}
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d4f8e:	d816      	bhi.n	d4fbe <_ZN8VCNL404013setLEDCurrentEh+0x34>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   d4f90:	29b3      	cmp	r1, #179	; 0xb3
   d4f92:	d816      	bhi.n	d4fc2 <_ZN8VCNL404013setLEDCurrentEh+0x38>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   d4f94:	299f      	cmp	r1, #159	; 0x9f
   d4f96:	d816      	bhi.n	d4fc6 <_ZN8VCNL404013setLEDCurrentEh+0x3c>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   d4f98:	298b      	cmp	r1, #139	; 0x8b
   d4f9a:	d816      	bhi.n	d4fca <_ZN8VCNL404013setLEDCurrentEh+0x40>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   d4f9c:	2977      	cmp	r1, #119	; 0x77
   d4f9e:	d816      	bhi.n	d4fce <_ZN8VCNL404013setLEDCurrentEh+0x44>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   d4fa0:	2963      	cmp	r1, #99	; 0x63
   d4fa2:	d816      	bhi.n	d4fd2 <_ZN8VCNL404013setLEDCurrentEh+0x48>
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d4fa4:	294a      	cmp	r1, #74	; 0x4a
   d4fa6:	bf94      	ite	ls
   d4fa8:	2100      	movls	r1, #0
   d4faa:	2101      	movhi	r1, #1
	bitMask(VCNL4040_PS_MS, UPPER, VCNL4040_LED_I_MASK, currentValue);
   d4fac:	9100      	str	r1, [sp, #0]
   d4fae:	23f8      	movs	r3, #248	; 0xf8
   d4fb0:	2200      	movs	r2, #0
   d4fb2:	2104      	movs	r1, #4
   d4fb4:	f7ff ff59 	bl	d4e6a <_ZN8VCNL40407bitMaskEhbhh>
}
   d4fb8:	b003      	add	sp, #12
   d4fba:	f85d fb04 	ldr.w	pc, [sp], #4
	if(currentValue > 200 - 1) currentValue = VCNL4040_LED_200MA;
   d4fbe:	2107      	movs	r1, #7
   d4fc0:	e7f4      	b.n	d4fac <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 180 - 1) currentValue = VCNL4040_LED_180MA;
   d4fc2:	2106      	movs	r1, #6
   d4fc4:	e7f2      	b.n	d4fac <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 160 - 1) currentValue = VCNL4040_LED_160MA;
   d4fc6:	2105      	movs	r1, #5
   d4fc8:	e7f0      	b.n	d4fac <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 140 - 1) currentValue = VCNL4040_LED_140MA;
   d4fca:	2104      	movs	r1, #4
   d4fcc:	e7ee      	b.n	d4fac <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 120 - 1) currentValue = VCNL4040_LED_120MA;
   d4fce:	2103      	movs	r1, #3
   d4fd0:	e7ec      	b.n	d4fac <_ZN8VCNL404013setLEDCurrentEh+0x22>
	else if(currentValue > 100 - 1) currentValue = VCNL4040_LED_100MA;
   d4fd2:	2102      	movs	r1, #2
   d4fd4:	e7ea      	b.n	d4fac <_ZN8VCNL404013setLEDCurrentEh+0x22>

000d4fd6 <_ZN8VCNL40405beginER7TwoWire>:
boolean VCNL4040::begin(TwoWire &wirePort) {
   d4fd6:	b538      	push	{r3, r4, r5, lr}
   d4fd8:	4604      	mov	r4, r0
   d4fda:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   d4fdc:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
   d4fde:	f001 fc2f 	bl	d6840 <_ZN7TwoWire5beginEv>
  if (isConnected() == false) return (false); //I2C comm failure
   d4fe2:	4620      	mov	r0, r4
   d4fe4:	f7ff febe 	bl	d4d64 <_ZN8VCNL404011isConnectedEv>
   d4fe8:	4605      	mov	r5, r0
   d4fea:	b910      	cbnz	r0, d4ff2 <_ZN8VCNL40405beginER7TwoWire+0x1c>
   d4fec:	2500      	movs	r5, #0
}
   d4fee:	4628      	mov	r0, r5
   d4ff0:	bd38      	pop	{r3, r4, r5, pc}
  if (getID() != 0x0186) return (false); //Check default ID value
   d4ff2:	4620      	mov	r0, r4
   d4ff4:	f7ff fef5 	bl	d4de2 <_ZN8VCNL40405getIDEv>
   d4ff8:	f5b0 7fc3 	cmp.w	r0, #390	; 0x186
   d4ffc:	d1f6      	bne.n	d4fec <_ZN8VCNL40405beginER7TwoWire+0x16>
  setLEDCurrent(200); //Max IR LED current
   d4ffe:	4620      	mov	r0, r4
   d5000:	21c8      	movs	r1, #200	; 0xc8
   d5002:	f7ff ffc2 	bl	d4f8a <_ZN8VCNL404013setLEDCurrentEh>
  setIRDutyCycle(40); //Set to highest duty cycle
   d5006:	4620      	mov	r0, r4
   d5008:	2128      	movs	r1, #40	; 0x28
   d500a:	f7ff ff4c 	bl	d4ea6 <_ZN8VCNL404014setIRDutyCycleEt>
  setProxIntegrationTime(8); //Set to max integration
   d500e:	4620      	mov	r0, r4
   d5010:	2108      	movs	r1, #8
   d5012:	f7ff ff73 	bl	d4efc <_ZN8VCNL404022setProxIntegrationTimeEh>
  setProxResolution(16); //Set to 16-bit output
   d5016:	2110      	movs	r1, #16
   d5018:	4620      	mov	r0, r4
   d501a:	f7ff ff9d 	bl	d4f58 <_ZN8VCNL404017setProxResolutionEh>
  enableSmartPersistance(); //Turn on smart presistance
   d501e:	4620      	mov	r0, r4
   d5020:	f7ff ffa8 	bl	d4f74 <_ZN8VCNL404022enableSmartPersistanceEv>
  powerOnProximity(); //Turn on prox sensing
   d5024:	4620      	mov	r0, r4
   d5026:	f7ff ff82 	bl	d4f2e <_ZN8VCNL404016powerOnProximityEv>
  return (true);
   d502a:	e7e0      	b.n	d4fee <_ZN8VCNL40405beginER7TwoWire+0x18>

000d502c <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d502c:	b510      	push	{r4, lr}
   d502e:	4b04      	ldr	r3, [pc, #16]	; (d5040 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   d5030:	6003      	str	r3, [r0, #0]
   d5032:	4604      	mov	r4, r0
  if(buffer) {
   d5034:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5036:	b108      	cbz	r0, d503c <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   d5038:	f000 feb2 	bl	d5da0 <free>
    buffer = NULL;
  }
}
   d503c:	4620      	mov	r0, r4
   d503e:	bd10      	pop	{r4, pc}
   d5040:	000d7848 	.word	0x000d7848

000d5044 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   d5044:	b510      	push	{r4, lr}
   d5046:	4604      	mov	r4, r0
}
   d5048:	f7ff fff0 	bl	d502c <_ZN16Adafruit_SSD1306D1Ev>
   d504c:	4620      	mov	r0, r4
   d504e:	2150      	movs	r1, #80	; 0x50
   d5050:	f001 fe0b 	bl	d6c6a <_ZdlPvj>
   d5054:	4620      	mov	r0, r4
   d5056:	bd10      	pop	{r4, pc}

000d5058 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d5058:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   d505a:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   d505c:	db4b      	blt.n	d50f6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d505e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   d5062:	428c      	cmp	r4, r1
   d5064:	dd47      	ble.n	d50f6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d5066:	2a00      	cmp	r2, #0
   d5068:	db45      	blt.n	d50f6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   d506a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   d506e:	4294      	cmp	r4, r2
   d5070:	dd41      	ble.n	d50f6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   d5072:	7e84      	ldrb	r4, [r0, #26]
   d5074:	2c02      	cmp	r4, #2
   d5076:	d01f      	beq.n	d50b8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   d5078:	2c03      	cmp	r4, #3
   d507a:	d026      	beq.n	d50ca <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   d507c:	2c01      	cmp	r4, #1
   d507e:	d104      	bne.n	d508a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   d5080:	8904      	ldrh	r4, [r0, #8]
   d5082:	43d2      	mvns	r2, r2
   d5084:	4414      	add	r4, r2
      break;
   d5086:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   d5088:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   d508a:	2b01      	cmp	r3, #1
   d508c:	d023      	beq.n	d50d6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   d508e:	2b02      	cmp	r3, #2
   d5090:	d032      	beq.n	d50f8 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   d5092:	bb83      	cbnz	r3, d50f6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   d5094:	2a00      	cmp	r2, #0
   d5096:	4613      	mov	r3, r2
   d5098:	8904      	ldrh	r4, [r0, #8]
   d509a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d509c:	bfb8      	it	lt
   d509e:	1dd3      	addlt	r3, r2, #7
   d50a0:	10db      	asrs	r3, r3, #3
   d50a2:	fb13 1104 	smlabb	r1, r3, r4, r1
   d50a6:	f002 0207 	and.w	r2, r2, #7
   d50aa:	2301      	movs	r3, #1
   d50ac:	4093      	lsls	r3, r2
   d50ae:	5c42      	ldrb	r2, [r0, r1]
   d50b0:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d50b4:	5442      	strb	r2, [r0, r1]
    }
  }
}
   d50b6:	e01e      	b.n	d50f6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   d50b8:	8904      	ldrh	r4, [r0, #8]
   d50ba:	43c9      	mvns	r1, r1
   d50bc:	4421      	add	r1, r4
      y = HEIGHT - y - 1;
   d50be:	8944      	ldrh	r4, [r0, #10]
   d50c0:	43d2      	mvns	r2, r2
   d50c2:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   d50c4:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   d50c6:	b212      	sxth	r2, r2
      break;
   d50c8:	e7df      	b.n	d508a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   d50ca:	8944      	ldrh	r4, [r0, #10]
   d50cc:	43c9      	mvns	r1, r1
   d50ce:	440c      	add	r4, r1
      break;
   d50d0:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   d50d2:	b222      	sxth	r2, r4
      break;
   d50d4:	e7d9      	b.n	d508a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   d50d6:	2a00      	cmp	r2, #0
   d50d8:	8904      	ldrh	r4, [r0, #8]
   d50da:	4613      	mov	r3, r2
   d50dc:	bfb8      	it	lt
   d50de:	1dd3      	addlt	r3, r2, #7
   d50e0:	10db      	asrs	r3, r3, #3
   d50e2:	fb13 1104 	smlabb	r1, r3, r4, r1
   d50e6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d50e8:	f002 0007 	and.w	r0, r2, #7
   d50ec:	2201      	movs	r2, #1
   d50ee:	4082      	lsls	r2, r0
   d50f0:	5c58      	ldrb	r0, [r3, r1]
   d50f2:	4302      	orrs	r2, r0
   d50f4:	545a      	strb	r2, [r3, r1]
}
   d50f6:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   d50f8:	2a00      	cmp	r2, #0
   d50fa:	4613      	mov	r3, r2
   d50fc:	8904      	ldrh	r4, [r0, #8]
   d50fe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5100:	bfb8      	it	lt
   d5102:	1dd3      	addlt	r3, r2, #7
   d5104:	10db      	asrs	r3, r3, #3
   d5106:	fb13 1104 	smlabb	r1, r3, r4, r1
   d510a:	f002 0207 	and.w	r2, r2, #7
   d510e:	2301      	movs	r3, #1
   d5110:	fa03 f202 	lsl.w	r2, r3, r2
   d5114:	5c43      	ldrb	r3, [r0, r1]
   d5116:	405a      	eors	r2, r3
   d5118:	e7cc      	b.n	d50b4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>

000d511a <_ZN16Adafruit_SSD130610stopscrollEv.part.0>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d511a:	b510      	push	{r4, lr}
   d511c:	4604      	mov	r4, r0
  TRANSACTION_START
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
  TRANSACTION_END
   d511e:	f990 0036 	ldrsb.w	r0, [r0, #54]	; 0x36
   d5122:	2101      	movs	r1, #1
   d5124:	b280      	uxth	r0, r0
   d5126:	f001 fd08 	bl	d6b3a <digitalWrite>
   d512a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d512c:	b118      	cbz	r0, d5136 <_ZN16Adafruit_SSD130610stopscrollEv.part.0+0x1c>
}
   d512e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TRANSACTION_END
   d5132:	f000 beb4 	b.w	d5e9e <_ZN8SPIClass14endTransactionEv>
}
   d5136:	bd10      	pop	{r4, pc}

000d5138 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   d5138:	b570      	push	{r4, r5, r6, lr}
   d513a:	4604      	mov	r4, r0
   d513c:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   d513e:	2600      	movs	r6, #0
   d5140:	f7ff faaa 	bl	d4698 <_ZN12Adafruit_GFXC1Ess>
   d5144:	4b11      	ldr	r3, [pc, #68]	; (d518c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   d5146:	6023      	str	r3, [r4, #0]
   d5148:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   d514a:	b915      	cbnz	r5, d5152 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   d514c:	f001 fd60 	bl	d6c10 <_Z19__fetch_global_Wirev>
   d5150:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   d5152:	23ff      	movs	r3, #255	; 0xff
   d5154:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   d5158:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   d515c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   d5160:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   d5164:	4b0a      	ldr	r3, [pc, #40]	; (d5190 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   d5166:	63a3      	str	r3, [r4, #56]	; 0x38
   d5168:	2301      	movs	r3, #1
   d516a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d516e:	9b05      	ldr	r3, [sp, #20]
   d5170:	64a3      	str	r3, [r4, #72]	; 0x48
   d5172:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5176:	9b06      	ldr	r3, [sp, #24]
   d5178:	86a2      	strh	r2, [r4, #52]	; 0x34
   d517a:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   d517e:	6426      	str	r6, [r4, #64]	; 0x40
   d5180:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   d5184:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   d5186:	4620      	mov	r0, r4
   d5188:	bd70      	pop	{r4, r5, r6, pc}
   d518a:	bf00      	nop
   d518c:	000d7848 	.word	0x000d7848
   d5190:	000d7394 	.word	0x000d7394

000d5194 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d5194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5196:	4604      	mov	r4, r0
  if(wire) { // I2C
   d5198:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   d519a:	460d      	mov	r5, r1
  if(wire) { // I2C
   d519c:	b190      	cbz	r0, d51c4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   d519e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d51a2:	f001 fb83 	bl	d68ac <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d51a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d51a8:	6803      	ldr	r3, [r0, #0]
   d51aa:	2100      	movs	r1, #0
   d51ac:	689b      	ldr	r3, [r3, #8]
   d51ae:	4798      	blx	r3
    WIRE_WRITE(c);
   d51b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d51b2:	6803      	ldr	r3, [r0, #0]
   d51b4:	4629      	mov	r1, r5
   d51b6:	689b      	ldr	r3, [r3, #8]
   d51b8:	4798      	blx	r3
    wire->endTransmission();
   d51ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   d51bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   d51c0:	f001 bb7b 	b.w	d68ba <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d51c4:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d51c8:	4601      	mov	r1, r0
   d51ca:	b298      	uxth	r0, r3
   d51cc:	f001 fcb5 	bl	d6b3a <digitalWrite>
  if(spi) {
   d51d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d51d2:	b120      	cbz	r0, d51de <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   d51d4:	4629      	mov	r1, r5
}
   d51d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   d51da:	f000 bee7 	b.w	d5fac <_ZN8SPIClass8transferEh>
   d51de:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d51e0:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d51e2:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d51e6:	ea05 0107 	and.w	r1, r5, r7
   d51ea:	b280      	uxth	r0, r0
   d51ec:	f001 fca5 	bl	d6b3a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d51f0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d51f4:	2101      	movs	r1, #1
   d51f6:	b280      	uxth	r0, r0
   d51f8:	f001 fc9f 	bl	d6b3a <digitalWrite>
      digitalWrite(clkPin , LOW);
   d51fc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5200:	2100      	movs	r1, #0
   d5202:	b280      	uxth	r0, r0
   d5204:	f001 fc99 	bl	d6b3a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d5208:	3e01      	subs	r6, #1
   d520a:	ea4f 0757 	mov.w	r7, r7, lsr #1
   d520e:	d1e8      	bne.n	d51e2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   d5210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5212 <_ZN16Adafruit_SSD130613invertDisplayEb>:
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d5212:	b538      	push	{r3, r4, r5, lr}
   d5214:	4604      	mov	r4, r0
  TRANSACTION_START
   d5216:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   d5218:	460d      	mov	r5, r1
  TRANSACTION_START
   d521a:	b180      	cbz	r0, d523e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>
	  setSpeed(speed);
   d521c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d521e:	f001 fb0b 	bl	d6838 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   d5222:	2d00      	cmp	r5, #0
   d5224:	4620      	mov	r0, r4
   d5226:	bf14      	ite	ne
   d5228:	21a7      	movne	r1, #167	; 0xa7
   d522a:	21a6      	moveq	r1, #166	; 0xa6
   d522c:	f7ff ffb2 	bl	d5194 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   d5230:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5232:	b188      	cbz	r0, d5258 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   d5234:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d5236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d523a:	f001 bafd 	b.w	d6838 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   d523e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5240:	b118      	cbz	r0, d524a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   d5242:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d5246:	f000 fe43 	bl	d5ed0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d524a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d524e:	2100      	movs	r1, #0
   d5250:	b280      	uxth	r0, r0
   d5252:	f001 fc72 	bl	d6b3a <digitalWrite>
   d5256:	e7e4      	b.n	d5222 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
   d5258:	4620      	mov	r0, r4
}
   d525a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d525e:	f7ff bf5c 	b.w	d511a <_ZN16Adafruit_SSD130610stopscrollEv.part.0>

000d5262 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d5262:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5266:	4604      	mov	r4, r0
  if(wire) { // I2C
   d5268:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   d526a:	460d      	mov	r5, r1
  if(wire) { // I2C
   d526c:	188f      	adds	r7, r1, r2
   d526e:	b340      	cbz	r0, d52c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   d5270:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5274:	f001 fb1a 	bl	d68ac <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d5278:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d527a:	6803      	ldr	r3, [r0, #0]
   d527c:	2100      	movs	r1, #0
   d527e:	689b      	ldr	r3, [r3, #8]
   d5280:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d5282:	2601      	movs	r6, #1
    while(n--) {
   d5284:	42bd      	cmp	r5, r7
   d5286:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5288:	d017      	beq.n	d52ba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   d528a:	2e1f      	cmp	r6, #31
   d528c:	d90c      	bls.n	d52a8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   d528e:	f001 fb14 	bl	d68ba <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d5292:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5296:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5298:	f001 fb08 	bl	d68ac <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   d529c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d529e:	6803      	ldr	r3, [r0, #0]
   d52a0:	2100      	movs	r1, #0
   d52a2:	689b      	ldr	r3, [r3, #8]
   d52a4:	4798      	blx	r3
        bytesOut = 1;
   d52a6:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d52a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d52aa:	f815 1b01 	ldrb.w	r1, [r5], #1
   d52ae:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d52b0:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   d52b2:	689b      	ldr	r3, [r3, #8]
   d52b4:	4798      	blx	r3
      bytesOut++;
   d52b6:	b2f6      	uxtb	r6, r6
    while(n--) {
   d52b8:	e7e4      	b.n	d5284 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   d52ba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   d52be:	f001 bafc 	b.w	d68ba <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   d52c2:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   d52c6:	4601      	mov	r1, r0
   d52c8:	b298      	uxth	r0, r3
   d52ca:	f001 fc36 	bl	d6b3a <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   d52ce:	42af      	cmp	r7, r5
   d52d0:	d022      	beq.n	d5318 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   d52d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   d52d4:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d52d8:	b118      	cbz	r0, d52e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   d52da:	4649      	mov	r1, r9
   d52dc:	f000 fe66 	bl	d5fac <_ZN8SPIClass8transferEh>
   d52e0:	e7f5      	b.n	d52ce <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   d52e2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d52e4:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d52e8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d52ec:	ea09 0108 	and.w	r1, r9, r8
   d52f0:	b280      	uxth	r0, r0
   d52f2:	f001 fc22 	bl	d6b3a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d52f6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d52fa:	2101      	movs	r1, #1
   d52fc:	b280      	uxth	r0, r0
   d52fe:	f001 fc1c 	bl	d6b3a <digitalWrite>
      digitalWrite(clkPin , LOW);
   d5302:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5306:	2100      	movs	r1, #0
   d5308:	b280      	uxth	r0, r0
   d530a:	f001 fc16 	bl	d6b3a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d530e:	3e01      	subs	r6, #1
   d5310:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d5314:	d1e8      	bne.n	d52e8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   d5316:	e7da      	b.n	d52ce <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   d5318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d531c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   d531c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d5320:	1dda      	adds	r2, r3, #7
   d5322:	bf48      	it	mi
   d5324:	f103 020e 	addmi.w	r2, r3, #14
   d5328:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   d532c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d532e:	10d2      	asrs	r2, r2, #3
   d5330:	435a      	muls	r2, r3
   d5332:	2100      	movs	r1, #0
   d5334:	f001 bcba 	b.w	d6cac <memset>

000d5338 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   d5338:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d533c:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d533e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   d5340:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d5344:	4604      	mov	r4, r0
   d5346:	460f      	mov	r7, r1
   d5348:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d534a:	b1b3      	cbz	r3, d537a <_ZN16Adafruit_SSD13065beginEhhbb+0x42>
  clearDisplay();
   d534c:	4620      	mov	r0, r4
   d534e:	f7ff ffe5 	bl	d531c <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   d5352:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   d5356:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   d535a:	2820      	cmp	r0, #32
   d535c:	dc1f      	bgt.n	d539e <_ZN16Adafruit_SSD13065beginEhhbb+0x66>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d535e:	2320      	movs	r3, #32
   d5360:	2201      	movs	r2, #1
   d5362:	e9cd 3201 	strd	r3, r2, [sp, #4]
   d5366:	3820      	subs	r0, #32
   d5368:	2373      	movs	r3, #115	; 0x73
   d536a:	3973      	subs	r1, #115	; 0x73
   d536c:	9300      	str	r3, [sp, #0]
   d536e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d5372:	4b89      	ldr	r3, [pc, #548]	; (d5598 <_ZN16Adafruit_SSD13065beginEhhbb+0x260>)
   d5374:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   d5378:	e01f      	b.n	d53ba <_ZN16Adafruit_SSD13065beginEhhbb+0x82>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   d537a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   d537e:	1dd8      	adds	r0, r3, #7
   d5380:	bf48      	it	mi
   d5382:	f103 000e 	addmi.w	r0, r3, #14
   d5386:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   d538a:	10c0      	asrs	r0, r0, #3
   d538c:	4358      	muls	r0, r3
   d538e:	f000 fcff 	bl	d5d90 <malloc>
   d5392:	62e0      	str	r0, [r4, #44]	; 0x2c
   d5394:	2800      	cmp	r0, #0
   d5396:	d1d9      	bne.n	d534c <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   d5398:	b004      	add	sp, #16
   d539a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   d539e:	2340      	movs	r3, #64	; 0x40
   d53a0:	f04f 0c01 	mov.w	ip, #1
   d53a4:	e9cd 3c01 	strd	r3, ip, [sp, #4]
   d53a8:	2352      	movs	r3, #82	; 0x52
   d53aa:	3840      	subs	r0, #64	; 0x40
   d53ac:	3952      	subs	r1, #82	; 0x52
   d53ae:	9300      	str	r3, [sp, #0]
   d53b0:	4b7a      	ldr	r3, [pc, #488]	; (d559c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   d53b2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   d53b6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   d53ba:	f340 024f 	sbfx	r2, r0, #1, #16
   d53be:	f341 014f 	sbfx	r1, r1, #1, #16
   d53c2:	4620      	mov	r0, r4
   d53c4:	f7ff f97e 	bl	d46c4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   d53c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   d53ca:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   d53ce:	2800      	cmp	r0, #0
   d53d0:	d078      	beq.n	d54c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d53d2:	2d00      	cmp	r5, #0
   d53d4:	d174      	bne.n	d54c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   d53d6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d53da:	2b20      	cmp	r3, #32
   d53dc:	bf0c      	ite	eq
   d53de:	253c      	moveq	r5, #60	; 0x3c
   d53e0:	253d      	movne	r5, #61	; 0x3d
   d53e2:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   d53e6:	f1b8 0f00 	cmp.w	r8, #0
   d53ea:	d001      	beq.n	d53f0 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d53ec:	f001 fa28 	bl	d6840 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   d53f0:	b1fe      	cbz	r6, d5432 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
   d53f2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d53f6:	2800      	cmp	r0, #0
   d53f8:	db1b      	blt.n	d5432 <_ZN16Adafruit_SSD13065beginEhhbb+0xfa>
    pinMode(     rstPin, OUTPUT);
   d53fa:	2101      	movs	r1, #1
   d53fc:	b280      	uxth	r0, r0
   d53fe:	f001 fb8b 	bl	d6b18 <pinMode>
    digitalWrite(rstPin, HIGH);
   d5402:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5406:	2101      	movs	r1, #1
   d5408:	b280      	uxth	r0, r0
   d540a:	f001 fb96 	bl	d6b3a <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   d540e:	2001      	movs	r0, #1
   d5410:	f000 ffb2 	bl	d6378 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   d5414:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d5418:	2100      	movs	r1, #0
   d541a:	b280      	uxth	r0, r0
   d541c:	f001 fb8d 	bl	d6b3a <digitalWrite>
    delay(10);                  // Wait 10 ms
   d5420:	200a      	movs	r0, #10
   d5422:	f000 ffa9 	bl	d6378 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   d5426:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   d542a:	2101      	movs	r1, #1
   d542c:	b280      	uxth	r0, r0
   d542e:	f001 fb84 	bl	d6b3a <digitalWrite>
  TRANSACTION_START
   d5432:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5434:	2800      	cmp	r0, #0
   d5436:	d074      	beq.n	d5522 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ea>
   d5438:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d543a:	f001 f9fd 	bl	d6838 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   d543e:	2204      	movs	r2, #4
   d5440:	4957      	ldr	r1, [pc, #348]	; (d55a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   d5442:	4620      	mov	r0, r4
   d5444:	f7ff ff0d 	bl	d5262 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   d5448:	7aa1      	ldrb	r1, [r4, #10]
   d544a:	3901      	subs	r1, #1
   d544c:	b2c9      	uxtb	r1, r1
   d544e:	4620      	mov	r0, r4
   d5450:	f7ff fea0 	bl	d5194 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   d5454:	4953      	ldr	r1, [pc, #332]	; (d55a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   d5456:	2204      	movs	r2, #4
   d5458:	4620      	mov	r0, r4
   d545a:	f7ff ff02 	bl	d5262 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   d545e:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5462:	2b01      	cmp	r3, #1
   d5464:	bf0c      	ite	eq
   d5466:	2110      	moveq	r1, #16
   d5468:	2114      	movne	r1, #20
   d546a:	4620      	mov	r0, r4
   d546c:	f7ff fe92 	bl	d5194 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   d5470:	2204      	movs	r2, #4
   d5472:	494d      	ldr	r1, [pc, #308]	; (d55a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   d5474:	4620      	mov	r0, r4
   d5476:	f7ff fef4 	bl	d5262 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   d547a:	68a3      	ldr	r3, [r4, #8]
   d547c:	4a4b      	ldr	r2, [pc, #300]	; (d55ac <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   d547e:	4293      	cmp	r3, r2
   d5480:	d15c      	bne.n	d553c <_ZN16Adafruit_SSD13065beginEhhbb+0x204>
    ssd1306_commandList(init4a, sizeof(init4a));
   d5482:	494b      	ldr	r1, [pc, #300]	; (d55b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   d5484:	2204      	movs	r2, #4
   d5486:	4620      	mov	r0, r4
   d5488:	f7ff feeb 	bl	d5262 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   d548c:	21d9      	movs	r1, #217	; 0xd9
   d548e:	4620      	mov	r0, r4
   d5490:	f7ff fe80 	bl	d5194 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   d5494:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5498:	2b01      	cmp	r3, #1
   d549a:	bf0c      	ite	eq
   d549c:	2122      	moveq	r1, #34	; 0x22
   d549e:	21f1      	movne	r1, #241	; 0xf1
   d54a0:	4620      	mov	r0, r4
   d54a2:	f7ff fe77 	bl	d5194 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   d54a6:	4620      	mov	r0, r4
   d54a8:	4942      	ldr	r1, [pc, #264]	; (d55b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   d54aa:	2206      	movs	r2, #6
   d54ac:	f7ff fed9 	bl	d5262 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   d54b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d54b2:	2800      	cmp	r0, #0
   d54b4:	d063      	beq.n	d557e <_ZN16Adafruit_SSD13065beginEhhbb+0x246>
   d54b6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   d54b8:	f001 f9be 	bl	d6838 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   d54bc:	2001      	movs	r0, #1
   d54be:	e76b      	b.n	d5398 <_ZN16Adafruit_SSD13065beginEhhbb+0x60>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   d54c0:	b26d      	sxtb	r5, r5
   d54c2:	e78e      	b.n	d53e2 <_ZN16Adafruit_SSD13065beginEhhbb+0xaa>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   d54c4:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d54c8:	2101      	movs	r1, #1
   d54ca:	b280      	uxth	r0, r0
   d54cc:	f001 fb24 	bl	d6b18 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   d54d0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d54d4:	2101      	movs	r1, #1
   d54d6:	b280      	uxth	r0, r0
   d54d8:	f001 fb1e 	bl	d6b18 <pinMode>
    SSD1306_DESELECT
   d54dc:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d54e0:	2101      	movs	r1, #1
   d54e2:	b280      	uxth	r0, r0
   d54e4:	f001 fb29 	bl	d6b3a <digitalWrite>
    if(spi) { // Hardware SPI
   d54e8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d54ea:	b13d      	cbz	r5, d54fc <_ZN16Adafruit_SSD13065beginEhhbb+0x1c4>
      if(periphBegin) spi->begin();
   d54ec:	f1b8 0f00 	cmp.w	r8, #0
   d54f0:	f43f af7e 	beq.w	d53f0 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
   d54f4:	4628      	mov	r0, r5
   d54f6:	f000 fcc1 	bl	d5e7c <_ZN8SPIClass5beginEv>
   d54fa:	e779      	b.n	d53f0 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   d54fc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d5500:	2101      	movs	r1, #1
   d5502:	b280      	uxth	r0, r0
   d5504:	f001 fb08 	bl	d6b18 <pinMode>
      pinMode(clkPin , OUTPUT);
   d5508:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d550c:	2101      	movs	r1, #1
   d550e:	b280      	uxth	r0, r0
   d5510:	f001 fb02 	bl	d6b18 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   d5514:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d5518:	4629      	mov	r1, r5
   d551a:	b280      	uxth	r0, r0
   d551c:	f001 fb0d 	bl	d6b3a <digitalWrite>
   d5520:	e766      	b.n	d53f0 <_ZN16Adafruit_SSD13065beginEhhbb+0xb8>
  TRANSACTION_START
   d5522:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5524:	b118      	cbz	r0, d552e <_ZN16Adafruit_SSD13065beginEhhbb+0x1f6>
   d5526:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d552a:	f000 fcd1 	bl	d5ed0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d552e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5532:	2100      	movs	r1, #0
   d5534:	b280      	uxth	r0, r0
   d5536:	f001 fb00 	bl	d6b3a <digitalWrite>
   d553a:	e780      	b.n	d543e <_ZN16Adafruit_SSD13065beginEhhbb+0x106>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   d553c:	4a1e      	ldr	r2, [pc, #120]	; (d55b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   d553e:	4293      	cmp	r3, r2
   d5540:	d10e      	bne.n	d5560 <_ZN16Adafruit_SSD13065beginEhhbb+0x228>
    ssd1306_commandList(init4b, sizeof(init4b));
   d5542:	491e      	ldr	r1, [pc, #120]	; (d55bc <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   d5544:	2203      	movs	r2, #3
   d5546:	4620      	mov	r0, r4
   d5548:	f7ff fe8b 	bl	d5262 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   d554c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5550:	2b01      	cmp	r3, #1
   d5552:	bf0c      	ite	eq
   d5554:	219f      	moveq	r1, #159	; 0x9f
   d5556:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5558:	4620      	mov	r0, r4
   d555a:	f7ff fe1b 	bl	d5194 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   d555e:	e795      	b.n	d548c <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   d5560:	4a17      	ldr	r2, [pc, #92]	; (d55c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   d5562:	4293      	cmp	r3, r2
   d5564:	d192      	bne.n	d548c <_ZN16Adafruit_SSD13065beginEhhbb+0x154>
    ssd1306_commandList(init4c, sizeof(init4c));
   d5566:	4917      	ldr	r1, [pc, #92]	; (d55c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   d5568:	2203      	movs	r2, #3
   d556a:	4620      	mov	r0, r4
   d556c:	f7ff fe79 	bl	d5262 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   d5570:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   d5574:	2b01      	cmp	r3, #1
   d5576:	bf0c      	ite	eq
   d5578:	2110      	moveq	r1, #16
   d557a:	21af      	movne	r1, #175	; 0xaf
   d557c:	e7ec      	b.n	d5558 <_ZN16Adafruit_SSD13065beginEhhbb+0x220>
  TRANSACTION_END
   d557e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5582:	2101      	movs	r1, #1
   d5584:	b280      	uxth	r0, r0
   d5586:	f001 fad8 	bl	d6b3a <digitalWrite>
   d558a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d558c:	2800      	cmp	r0, #0
   d558e:	d095      	beq.n	d54bc <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5590:	f000 fc85 	bl	d5e9e <_ZN8SPIClass14endTransactionEv>
   d5594:	e792      	b.n	d54bc <_ZN16Adafruit_SSD13065beginEhhbb+0x184>
   d5596:	bf00      	nop
   d5598:	000d7660 	.word	0x000d7660
   d559c:	000d73a0 	.word	0x000d73a0
   d55a0:	000d78a8 	.word	0x000d78a8
   d55a4:	000d78ac 	.word	0x000d78ac
   d55a8:	000d78b0 	.word	0x000d78b0
   d55ac:	00200080 	.word	0x00200080
   d55b0:	000d78ba 	.word	0x000d78ba
   d55b4:	000d78b4 	.word	0x000d78b4
   d55b8:	00400080 	.word	0x00400080
   d55bc:	000d78be 	.word	0x000d78be
   d55c0:	00100060 	.word	0x00100060
   d55c4:	000d78c1 	.word	0x000d78c1

000d55c8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d55c8:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d55ca:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d55cc:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   d55d0:	db3d      	blt.n	d564e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d55d2:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   d55d6:	4294      	cmp	r4, r2
   d55d8:	dd39      	ble.n	d564e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   d55da:	2900      	cmp	r1, #0
      w += x;
   d55dc:	bfbe      	ittt	lt
   d55de:	185b      	addlt	r3, r3, r1
   d55e0:	b21b      	sxthlt	r3, r3
      x  = 0;
   d55e2:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   d55e4:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   d55e8:	18ce      	adds	r6, r1, r3
   d55ea:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   d55ec:	bfc4      	itt	gt
   d55ee:	1a63      	subgt	r3, r4, r1
   d55f0:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   d55f2:	2b00      	cmp	r3, #0
   d55f4:	dd2b      	ble.n	d564e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   d55f6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d55f8:	10d6      	asrs	r6, r2, #3
   d55fa:	fb14 1106 	smlabb	r1, r4, r6, r1
   d55fe:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   d5600:	f002 0007 	and.w	r0, r2, #7
   d5604:	2201      	movs	r2, #1
   d5606:	4082      	lsls	r2, r0
      switch(color) {
   d5608:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   d560a:	b2d2      	uxtb	r2, r2
      switch(color) {
   d560c:	d016      	beq.n	d563c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   d560e:	2d02      	cmp	r5, #2
   d5610:	d00b      	beq.n	d562a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   d5612:	b9e5      	cbnz	r5, d564e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   d5614:	43d2      	mvns	r2, r2
   d5616:	b2d2      	uxtb	r2, r2
   d5618:	440b      	add	r3, r1
   d561a:	4299      	cmp	r1, r3
   d561c:	d017      	beq.n	d564e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d561e:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5622:	4010      	ands	r0, r2
   d5624:	f801 0c01 	strb.w	r0, [r1, #-1]
   d5628:	e7f7      	b.n	d561a <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   d562a:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   d562c:	4299      	cmp	r1, r3
   d562e:	d00e      	beq.n	d564e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5630:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5634:	4050      	eors	r0, r2
   d5636:	f801 0c01 	strb.w	r0, [r1, #-1]
   d563a:	e7f7      	b.n	d562c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   d563c:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   d563e:	4299      	cmp	r1, r3
   d5640:	d005      	beq.n	d564e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   d5642:	f811 0b01 	ldrb.w	r0, [r1], #1
   d5646:	4310      	orrs	r0, r2
   d5648:	f801 0c01 	strb.w	r0, [r1, #-1]
   d564c:	e7f7      	b.n	d563e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   d564e:	bd70      	pop	{r4, r5, r6, pc}

000d5650 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5650:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5652:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   d5654:	f8bd 6014 	ldrh.w	r6, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   d5658:	db76      	blt.n	d5748 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   d565a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   d565e:	42a9      	cmp	r1, r5
   d5660:	da72      	bge.n	d5748 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   d5662:	2a00      	cmp	r2, #0
      __h += __y;
   d5664:	bfbc      	itt	lt
   d5666:	18d2      	addlt	r2, r2, r3
   d5668:	b213      	sxthlt	r3, r2
    if((__y + __h) > HEIGHT) { // Clip bottom
   d566a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
      __y = 0;
   d566e:	bfb8      	it	lt
   d5670:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   d5672:	18d7      	adds	r7, r2, r3
   d5674:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   d5676:	bfc4      	itt	gt
   d5678:	1aa3      	subgt	r3, r4, r2
   d567a:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   d567c:	2b00      	cmp	r3, #0
   d567e:	dd63      	ble.n	d5748 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5680:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   d5684:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   d5686:	fb15 1104 	smlabb	r1, r5, r4, r1
      if(mod) {
   d568a:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   d568e:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   d5690:	eb07 0401 	add.w	r4, r7, r1
      if(mod) {
   d5694:	d023      	beq.n	d56de <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8e>
        mod = 8 - mod;
   d5696:	f1c2 0208 	rsb	r2, r2, #8
   d569a:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d569c:	4d2c      	ldr	r5, [pc, #176]	; (d5750 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   d569e:	4293      	cmp	r3, r2
   d56a0:	bf3c      	itt	cc
   d56a2:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   d56a6:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   d56aa:	5cad      	ldrb	r5, [r5, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   d56ac:	bf3c      	itt	cc
   d56ae:	fa4c fc0e 	asrcc.w	ip, ip, lr
   d56b2:	ea0c 0505 	andcc.w	r5, ip, r5
        switch(color) {
   d56b6:	2e01      	cmp	r6, #1
   d56b8:	d007      	beq.n	d56ca <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x7a>
   d56ba:	2e02      	cmp	r6, #2
   d56bc:	d02e      	beq.n	d571c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xcc>
   d56be:	b94e      	cbnz	r6, d56d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x84>
         case BLACK:   *pBuf &= ~mask; break;
   d56c0:	f817 c001 	ldrb.w	ip, [r7, r1]
   d56c4:	ea2c 0505 	bic.w	r5, ip, r5
   d56c8:	e003      	b.n	d56d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case WHITE:   *pBuf |=  mask; break;
   d56ca:	f817 c001 	ldrb.w	ip, [r7, r1]
   d56ce:	ea45 050c 	orr.w	r5, r5, ip
         case INVERSE: *pBuf ^=  mask; break;
   d56d2:	547d      	strb	r5, [r7, r1]
      if(h >= mod) { // More to go?
   d56d4:	4293      	cmp	r3, r2
   d56d6:	d337      	bcc.n	d5748 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   d56d8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   d56dc:	440c      	add	r4, r1
        h -= mod;
   d56de:	1a9a      	subs	r2, r3, r2
   d56e0:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   d56e2:	2a07      	cmp	r2, #7
   d56e4:	d90e      	bls.n	d5704 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb4>
          if(color == INVERSE) {
   d56e6:	2e02      	cmp	r6, #2
   d56e8:	d11d      	bne.n	d5726 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd6>
   d56ea:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   d56ec:	7821      	ldrb	r1, [r4, #0]
   d56ee:	43c9      	mvns	r1, r1
   d56f0:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   d56f2:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   d56f4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   d56f8:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d56fa:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   d56fc:	440c      	add	r4, r1
            } while(h >= 8);
   d56fe:	d8f5      	bhi.n	d56ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9c>
   d5700:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   d5704:	b302      	cbz	r2, d5748 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d5706:	4b13      	ldr	r3, [pc, #76]	; (d5754 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   d5708:	2e01      	cmp	r6, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   d570a:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   d570c:	d019      	beq.n	d5742 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   d570e:	2e02      	cmp	r6, #2
   d5710:	d01b      	beq.n	d574a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   d5712:	b9ce      	cbnz	r6, d5748 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   d5714:	7822      	ldrb	r2, [r4, #0]
   d5716:	ea22 0303 	bic.w	r3, r2, r3
   d571a:	e014      	b.n	d5746 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   d571c:	f817 c001 	ldrb.w	ip, [r7, r1]
   d5720:	ea85 050c 	eor.w	r5, r5, ip
   d5724:	e7d5      	b.n	d56d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
            uint8_t val = (color != BLACK) ? 255 : 0;
   d5726:	2e00      	cmp	r6, #0
   d5728:	bf14      	ite	ne
   d572a:	25ff      	movne	r5, #255	; 0xff
   d572c:	2500      	moveq	r5, #0
   d572e:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   d5730:	7025      	strb	r5, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   d5732:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   d5734:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   d5738:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   d573a:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   d573c:	440c      	add	r4, r1
            } while(h >= 8);
   d573e:	d8f7      	bhi.n	d5730 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   d5740:	e7de      	b.n	d5700 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb0>
           case WHITE:   *pBuf |=  mask; break;
   d5742:	7822      	ldrb	r2, [r4, #0]
   d5744:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   d5746:	7023      	strb	r3, [r4, #0]
}
   d5748:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   d574a:	7822      	ldrb	r2, [r4, #0]
   d574c:	4053      	eors	r3, r2
   d574e:	e7fa      	b.n	d5746 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   d5750:	000d7898 	.word	0x000d7898
   d5754:	000d78a0 	.word	0x000d78a0

000d5758 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d5758:	b470      	push	{r4, r5, r6}
   d575a:	4614      	mov	r4, r2
  switch(rotation) {
   d575c:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   d575e:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   d5762:	2a02      	cmp	r2, #2
   d5764:	d00d      	beq.n	d5782 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   d5766:	2a03      	cmp	r2, #3
   d5768:	d018      	beq.n	d579c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   d576a:	2a01      	cmp	r2, #1
   d576c:	d111      	bne.n	d5792 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   d576e:	8902      	ldrh	r2, [r0, #8]
   d5770:	43e4      	mvns	r4, r4
   d5772:	4414      	add	r4, r2
   d5774:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d5776:	9603      	str	r6, [sp, #12]
   d5778:	460a      	mov	r2, r1
   d577a:	4621      	mov	r1, r4
}
   d577c:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   d577e:	f7ff bf67 	b.w	d5650 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   d5782:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   d5784:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   d5786:	43e4      	mvns	r4, r4
    x -= (w-1);
   d5788:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   d578a:	4414      	add	r4, r2
    x -= (w-1);
   d578c:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   d578e:	b224      	sxth	r4, r4
    x -= (w-1);
   d5790:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   d5792:	9603      	str	r6, [sp, #12]
   d5794:	4622      	mov	r2, r4
}
   d5796:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   d5798:	f7ff bf16 	b.w	d55c8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   d579c:	8945      	ldrh	r5, [r0, #10]
   d579e:	4419      	add	r1, r3
   d57a0:	1a69      	subs	r1, r5, r1
   d57a2:	b209      	sxth	r1, r1
    break;
   d57a4:	e7e7      	b.n	d5776 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000d57a6 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d57a6:	b430      	push	{r4, r5}
   d57a8:	4614      	mov	r4, r2
  switch(rotation) {
   d57aa:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   d57ac:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   d57b0:	2a02      	cmp	r2, #2
   d57b2:	d00d      	beq.n	d57d0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   d57b4:	2a03      	cmp	r2, #3
   d57b6:	d018      	beq.n	d57ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   d57b8:	2a01      	cmp	r2, #1
   d57ba:	d111      	bne.n	d57e0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   d57bc:	18e2      	adds	r2, r4, r3
   d57be:	8904      	ldrh	r4, [r0, #8]
   d57c0:	1aa4      	subs	r4, r4, r2
   d57c2:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d57c4:	9502      	str	r5, [sp, #8]
   d57c6:	460a      	mov	r2, r1
   d57c8:	4621      	mov	r1, r4
}
   d57ca:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   d57cc:	f7ff befc 	b.w	d55c8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   d57d0:	8902      	ldrh	r2, [r0, #8]
   d57d2:	43c9      	mvns	r1, r1
   d57d4:	4411      	add	r1, r2
    y -= (h-1);
   d57d6:	18e2      	adds	r2, r4, r3
   d57d8:	8944      	ldrh	r4, [r0, #10]
   d57da:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   d57dc:	b209      	sxth	r1, r1
    y -= (h-1);
   d57de:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   d57e0:	9502      	str	r5, [sp, #8]
   d57e2:	4622      	mov	r2, r4
}
   d57e4:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   d57e6:	f7ff bf33 	b.w	d5650 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   d57ea:	8942      	ldrh	r2, [r0, #10]
   d57ec:	43c9      	mvns	r1, r1
   d57ee:	4411      	add	r1, r2
   d57f0:	b209      	sxth	r1, r1
    break;
   d57f2:	e7e7      	b.n	d57c4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000d57f4 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   d57f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d57f8:	4604      	mov	r4, r0
  TRANSACTION_START
   d57fa:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d57fc:	2800      	cmp	r0, #0
   d57fe:	d042      	beq.n	d5886 <_ZN16Adafruit_SSD13067displayEv+0x92>
   d5800:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5802:	f001 f819 	bl	d6838 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   d5806:	4947      	ldr	r1, [pc, #284]	; (d5924 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   d5808:	2205      	movs	r2, #5
   d580a:	4620      	mov	r0, r4
   d580c:	f7ff fd29 	bl	d5262 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   d5810:	7a21      	ldrb	r1, [r4, #8]
   d5812:	3901      	subs	r1, #1
   d5814:	4620      	mov	r0, r4
   d5816:	b2c9      	uxtb	r1, r1
   d5818:	f7ff fcbc 	bl	d5194 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d581c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d5820:	1dde      	adds	r6, r3, #7
   d5822:	bf48      	it	mi
   d5824:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   d5828:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   d582c:	8923      	ldrh	r3, [r4, #8]
   d582e:	10f6      	asrs	r6, r6, #3
   d5830:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   d5834:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   d5838:	2800      	cmp	r0, #0
   d583a:	d03a      	beq.n	d58b2 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   d583c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5840:	f001 f834 	bl	d68ac <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   d5844:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5846:	6803      	ldr	r3, [r0, #0]
   d5848:	2140      	movs	r1, #64	; 0x40
   d584a:	689b      	ldr	r3, [r3, #8]
   d584c:	4798      	blx	r3
    uint8_t bytesOut = 1;
   d584e:	2701      	movs	r7, #1
    while(count--) {
   d5850:	42b5      	cmp	r5, r6
   d5852:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5854:	d024      	beq.n	d58a0 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   d5856:	2f1f      	cmp	r7, #31
   d5858:	d90c      	bls.n	d5874 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   d585a:	f001 f82e 	bl	d68ba <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   d585e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   d5862:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5864:	f001 f822 	bl	d68ac <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   d5868:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d586a:	6803      	ldr	r3, [r0, #0]
   d586c:	2140      	movs	r1, #64	; 0x40
   d586e:	689b      	ldr	r3, [r3, #8]
   d5870:	4798      	blx	r3
        bytesOut = 1;
   d5872:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   d5874:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d5876:	f815 1b01 	ldrb.w	r1, [r5], #1
   d587a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   d587c:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   d587e:	689b      	ldr	r3, [r3, #8]
   d5880:	4798      	blx	r3
      bytesOut++;
   d5882:	b2ff      	uxtb	r7, r7
    while(count--) {
   d5884:	e7e4      	b.n	d5850 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   d5886:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5888:	b118      	cbz	r0, d5892 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   d588a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   d588e:	f000 fb1f 	bl	d5ed0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   d5892:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d5896:	2100      	movs	r1, #0
   d5898:	b280      	uxth	r0, r0
   d589a:	f001 f94e 	bl	d6b3a <digitalWrite>
   d589e:	e7b2      	b.n	d5806 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   d58a0:	f001 f80b 	bl	d68ba <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   d58a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d58a6:	b378      	cbz	r0, d5908 <_ZN16Adafruit_SSD13067displayEv+0x114>
   d58a8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   d58aa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d58ae:	f000 bfc3 	b.w	d6838 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   d58b2:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   d58b6:	2101      	movs	r1, #1
   d58b8:	b280      	uxth	r0, r0
   d58ba:	f001 f93e 	bl	d6b3a <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   d58be:	42b5      	cmp	r5, r6
   d58c0:	d0f0      	beq.n	d58a4 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   d58c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   d58c4:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   d58c8:	b118      	cbz	r0, d58d2 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   d58ca:	4649      	mov	r1, r9
   d58cc:	f000 fb6e 	bl	d5fac <_ZN8SPIClass8transferEh>
   d58d0:	e7f5      	b.n	d58be <_ZN16Adafruit_SSD13067displayEv+0xca>
   d58d2:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d58d4:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   d58d8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   d58dc:	ea09 0108 	and.w	r1, r9, r8
   d58e0:	b280      	uxth	r0, r0
   d58e2:	f001 f92a 	bl	d6b3a <digitalWrite>
      digitalWrite(clkPin , HIGH);
   d58e6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d58ea:	2101      	movs	r1, #1
   d58ec:	b280      	uxth	r0, r0
   d58ee:	f001 f924 	bl	d6b3a <digitalWrite>
      digitalWrite(clkPin , LOW);
   d58f2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   d58f6:	2100      	movs	r1, #0
   d58f8:	b280      	uxth	r0, r0
   d58fa:	f001 f91e 	bl	d6b3a <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   d58fe:	3f01      	subs	r7, #1
   d5900:	ea4f 0858 	mov.w	r8, r8, lsr #1
   d5904:	d1e8      	bne.n	d58d8 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   d5906:	e7da      	b.n	d58be <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   d5908:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   d590c:	2101      	movs	r1, #1
   d590e:	b280      	uxth	r0, r0
   d5910:	f001 f913 	bl	d6b3a <digitalWrite>
   d5914:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d5916:	b118      	cbz	r0, d5920 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   d5918:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   d591c:	f000 babf 	b.w	d5e9e <_ZN8SPIClass14endTransactionEv>
}
   d5920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5924:	000d78c4 	.word	0x000d78c4

000d5928 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5928:	b508      	push	{r3, lr}
   d592a:	4b02      	ldr	r3, [pc, #8]	; (d5934 <netdb_freeaddrinfo+0xc>)
   d592c:	681b      	ldr	r3, [r3, #0]
   d592e:	689b      	ldr	r3, [r3, #8]
   d5930:	9301      	str	r3, [sp, #4]
   d5932:	bd08      	pop	{r3, pc}
   d5934:	00030268 	.word	0x00030268

000d5938 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5938:	b508      	push	{r3, lr}
   d593a:	4b02      	ldr	r3, [pc, #8]	; (d5944 <netdb_getaddrinfo+0xc>)
   d593c:	681b      	ldr	r3, [r3, #0]
   d593e:	68db      	ldr	r3, [r3, #12]
   d5940:	9301      	str	r3, [sp, #4]
   d5942:	bd08      	pop	{r3, pc}
   d5944:	00030268 	.word	0x00030268

000d5948 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5948:	b508      	push	{r3, lr}
   d594a:	4b02      	ldr	r3, [pc, #8]	; (d5954 <HAL_Validate_Pin_Function+0xc>)
   d594c:	681b      	ldr	r3, [r3, #0]
   d594e:	685b      	ldr	r3, [r3, #4]
   d5950:	9301      	str	r3, [sp, #4]
   d5952:	bd08      	pop	{r3, pc}
   d5954:	0003022c 	.word	0x0003022c

000d5958 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5958:	b508      	push	{r3, lr}
   d595a:	4b02      	ldr	r3, [pc, #8]	; (d5964 <HAL_Pin_Mode+0xc>)
   d595c:	681b      	ldr	r3, [r3, #0]
   d595e:	689b      	ldr	r3, [r3, #8]
   d5960:	9301      	str	r3, [sp, #4]
   d5962:	bd08      	pop	{r3, pc}
   d5964:	0003022c 	.word	0x0003022c

000d5968 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5968:	b508      	push	{r3, lr}
   d596a:	4b02      	ldr	r3, [pc, #8]	; (d5974 <HAL_Get_Pin_Mode+0xc>)
   d596c:	681b      	ldr	r3, [r3, #0]
   d596e:	68db      	ldr	r3, [r3, #12]
   d5970:	9301      	str	r3, [sp, #4]
   d5972:	bd08      	pop	{r3, pc}
   d5974:	0003022c 	.word	0x0003022c

000d5978 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5978:	b508      	push	{r3, lr}
   d597a:	4b02      	ldr	r3, [pc, #8]	; (d5984 <HAL_GPIO_Write+0xc>)
   d597c:	681b      	ldr	r3, [r3, #0]
   d597e:	691b      	ldr	r3, [r3, #16]
   d5980:	9301      	str	r3, [sp, #4]
   d5982:	bd08      	pop	{r3, pc}
   d5984:	0003022c 	.word	0x0003022c

000d5988 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5988:	b508      	push	{r3, lr}
   d598a:	4b02      	ldr	r3, [pc, #8]	; (d5994 <HAL_GPIO_Read+0xc>)
   d598c:	681b      	ldr	r3, [r3, #0]
   d598e:	695b      	ldr	r3, [r3, #20]
   d5990:	9301      	str	r3, [sp, #4]
   d5992:	bd08      	pop	{r3, pc}
   d5994:	0003022c 	.word	0x0003022c

000d5998 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d5998:	b508      	push	{r3, lr}
   d599a:	4b02      	ldr	r3, [pc, #8]	; (d59a4 <HAL_DAC_Write+0xc>)
   d599c:	681b      	ldr	r3, [r3, #0]
   d599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d59a0:	9301      	str	r3, [sp, #4]
   d59a2:	bd08      	pop	{r3, pc}
   d59a4:	0003022c 	.word	0x0003022c

000d59a8 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   d59a8:	b508      	push	{r3, lr}
   d59aa:	4b02      	ldr	r3, [pc, #8]	; (d59b4 <hal_pwm_write_ext+0xc>)
   d59ac:	681b      	ldr	r3, [r3, #0]
   d59ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d59b0:	9301      	str	r3, [sp, #4]
   d59b2:	bd08      	pop	{r3, pc}
   d59b4:	0003022c 	.word	0x0003022c

000d59b8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d59b8:	b508      	push	{r3, lr}
   d59ba:	4b02      	ldr	r3, [pc, #8]	; (d59c4 <HAL_RNG_GetRandomNumber+0xc>)
   d59bc:	681b      	ldr	r3, [r3, #0]
   d59be:	685b      	ldr	r3, [r3, #4]
   d59c0:	9301      	str	r3, [sp, #4]
   d59c2:	bd08      	pop	{r3, pc}
   d59c4:	00030218 	.word	0x00030218

000d59c8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d59c8:	b508      	push	{r3, lr}
   d59ca:	4b02      	ldr	r3, [pc, #8]	; (d59d4 <HAL_Delay_Microseconds+0xc>)
   d59cc:	681b      	ldr	r3, [r3, #0]
   d59ce:	68db      	ldr	r3, [r3, #12]
   d59d0:	9301      	str	r3, [sp, #4]
   d59d2:	bd08      	pop	{r3, pc}
   d59d4:	00030218 	.word	0x00030218

000d59d8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d59d8:	b508      	push	{r3, lr}
   d59da:	4b02      	ldr	r3, [pc, #8]	; (d59e4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d59dc:	681b      	ldr	r3, [r3, #0]
   d59de:	695b      	ldr	r3, [r3, #20]
   d59e0:	9301      	str	r3, [sp, #4]
   d59e2:	bd08      	pop	{r3, pc}
   d59e4:	00030218 	.word	0x00030218

000d59e8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d59e8:	b508      	push	{r3, lr}
   d59ea:	4b02      	ldr	r3, [pc, #8]	; (d59f4 <os_mutex_create+0xc>)
   d59ec:	681b      	ldr	r3, [r3, #0]
   d59ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d59f0:	9301      	str	r3, [sp, #4]
   d59f2:	bd08      	pop	{r3, pc}
   d59f4:	00030248 	.word	0x00030248

000d59f8 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   d59f8:	b508      	push	{r3, lr}
   d59fa:	4b02      	ldr	r3, [pc, #8]	; (d5a04 <os_mutex_destroy+0xc>)
   d59fc:	681b      	ldr	r3, [r3, #0]
   d59fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5a00:	9301      	str	r3, [sp, #4]
   d5a02:	bd08      	pop	{r3, pc}
   d5a04:	00030248 	.word	0x00030248

000d5a08 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5a08:	b508      	push	{r3, lr}
   d5a0a:	4b02      	ldr	r3, [pc, #8]	; (d5a14 <os_mutex_recursive_create+0xc>)
   d5a0c:	681b      	ldr	r3, [r3, #0]
   d5a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5a10:	9301      	str	r3, [sp, #4]
   d5a12:	bd08      	pop	{r3, pc}
   d5a14:	00030248 	.word	0x00030248

000d5a18 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5a18:	b508      	push	{r3, lr}
   d5a1a:	4b02      	ldr	r3, [pc, #8]	; (d5a24 <os_mutex_recursive_destroy+0xc>)
   d5a1c:	681b      	ldr	r3, [r3, #0]
   d5a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5a20:	9301      	str	r3, [sp, #4]
   d5a22:	bd08      	pop	{r3, pc}
   d5a24:	00030248 	.word	0x00030248

000d5a28 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5a28:	b508      	push	{r3, lr}
   d5a2a:	4b02      	ldr	r3, [pc, #8]	; (d5a34 <inet_inet_ntop+0xc>)
   d5a2c:	681b      	ldr	r3, [r3, #0]
   d5a2e:	695b      	ldr	r3, [r3, #20]
   d5a30:	9301      	str	r3, [sp, #4]
   d5a32:	bd08      	pop	{r3, pc}
   d5a34:	00030264 	.word	0x00030264

000d5a38 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5a38:	b508      	push	{r3, lr}
   d5a3a:	4b02      	ldr	r3, [pc, #8]	; (d5a44 <hal_usart_init+0xc>)
   d5a3c:	681b      	ldr	r3, [r3, #0]
   d5a3e:	681b      	ldr	r3, [r3, #0]
   d5a40:	9301      	str	r3, [sp, #4]
   d5a42:	bd08      	pop	{r3, pc}
   d5a44:	0003023c 	.word	0x0003023c

000d5a48 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5a48:	b508      	push	{r3, lr}
   d5a4a:	4b02      	ldr	r3, [pc, #8]	; (d5a54 <hal_usart_write+0xc>)
   d5a4c:	681b      	ldr	r3, [r3, #0]
   d5a4e:	68db      	ldr	r3, [r3, #12]
   d5a50:	9301      	str	r3, [sp, #4]
   d5a52:	bd08      	pop	{r3, pc}
   d5a54:	0003023c 	.word	0x0003023c

000d5a58 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5a58:	b508      	push	{r3, lr}
   d5a5a:	4b02      	ldr	r3, [pc, #8]	; (d5a64 <hal_usart_available+0xc>)
   d5a5c:	681b      	ldr	r3, [r3, #0]
   d5a5e:	691b      	ldr	r3, [r3, #16]
   d5a60:	9301      	str	r3, [sp, #4]
   d5a62:	bd08      	pop	{r3, pc}
   d5a64:	0003023c 	.word	0x0003023c

000d5a68 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5a68:	b508      	push	{r3, lr}
   d5a6a:	4b02      	ldr	r3, [pc, #8]	; (d5a74 <hal_usart_read+0xc>)
   d5a6c:	681b      	ldr	r3, [r3, #0]
   d5a6e:	695b      	ldr	r3, [r3, #20]
   d5a70:	9301      	str	r3, [sp, #4]
   d5a72:	bd08      	pop	{r3, pc}
   d5a74:	0003023c 	.word	0x0003023c

000d5a78 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5a78:	b508      	push	{r3, lr}
   d5a7a:	4b02      	ldr	r3, [pc, #8]	; (d5a84 <hal_usart_peek+0xc>)
   d5a7c:	681b      	ldr	r3, [r3, #0]
   d5a7e:	699b      	ldr	r3, [r3, #24]
   d5a80:	9301      	str	r3, [sp, #4]
   d5a82:	bd08      	pop	{r3, pc}
   d5a84:	0003023c 	.word	0x0003023c

000d5a88 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5a88:	b508      	push	{r3, lr}
   d5a8a:	4b02      	ldr	r3, [pc, #8]	; (d5a94 <hal_usart_flush+0xc>)
   d5a8c:	681b      	ldr	r3, [r3, #0]
   d5a8e:	69db      	ldr	r3, [r3, #28]
   d5a90:	9301      	str	r3, [sp, #4]
   d5a92:	bd08      	pop	{r3, pc}
   d5a94:	0003023c 	.word	0x0003023c

000d5a98 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5a98:	b508      	push	{r3, lr}
   d5a9a:	4b02      	ldr	r3, [pc, #8]	; (d5aa4 <hal_usart_is_enabled+0xc>)
   d5a9c:	681b      	ldr	r3, [r3, #0]
   d5a9e:	6a1b      	ldr	r3, [r3, #32]
   d5aa0:	9301      	str	r3, [sp, #4]
   d5aa2:	bd08      	pop	{r3, pc}
   d5aa4:	0003023c 	.word	0x0003023c

000d5aa8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5aa8:	b508      	push	{r3, lr}
   d5aaa:	4b02      	ldr	r3, [pc, #8]	; (d5ab4 <hal_usart_available_data_for_write+0xc>)
   d5aac:	681b      	ldr	r3, [r3, #0]
   d5aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5ab0:	9301      	str	r3, [sp, #4]
   d5ab2:	bd08      	pop	{r3, pc}
   d5ab4:	0003023c 	.word	0x0003023c

000d5ab8 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   d5ab8:	b508      	push	{r3, lr}
   d5aba:	4b02      	ldr	r3, [pc, #8]	; (d5ac4 <hal_i2c_set_speed+0xc>)
   d5abc:	681b      	ldr	r3, [r3, #0]
   d5abe:	681b      	ldr	r3, [r3, #0]
   d5ac0:	9301      	str	r3, [sp, #4]
   d5ac2:	bd08      	pop	{r3, pc}
   d5ac4:	00030228 	.word	0x00030228

000d5ac8 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5ac8:	b508      	push	{r3, lr}
   d5aca:	4b02      	ldr	r3, [pc, #8]	; (d5ad4 <hal_i2c_begin+0xc>)
   d5acc:	681b      	ldr	r3, [r3, #0]
   d5ace:	68db      	ldr	r3, [r3, #12]
   d5ad0:	9301      	str	r3, [sp, #4]
   d5ad2:	bd08      	pop	{r3, pc}
   d5ad4:	00030228 	.word	0x00030228

000d5ad8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5ad8:	b508      	push	{r3, lr}
   d5ada:	4b02      	ldr	r3, [pc, #8]	; (d5ae4 <hal_i2c_begin_transmission+0xc>)
   d5adc:	681b      	ldr	r3, [r3, #0]
   d5ade:	699b      	ldr	r3, [r3, #24]
   d5ae0:	9301      	str	r3, [sp, #4]
   d5ae2:	bd08      	pop	{r3, pc}
   d5ae4:	00030228 	.word	0x00030228

000d5ae8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5ae8:	b508      	push	{r3, lr}
   d5aea:	4b02      	ldr	r3, [pc, #8]	; (d5af4 <hal_i2c_end_transmission+0xc>)
   d5aec:	681b      	ldr	r3, [r3, #0]
   d5aee:	69db      	ldr	r3, [r3, #28]
   d5af0:	9301      	str	r3, [sp, #4]
   d5af2:	bd08      	pop	{r3, pc}
   d5af4:	00030228 	.word	0x00030228

000d5af8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5af8:	b508      	push	{r3, lr}
   d5afa:	4b02      	ldr	r3, [pc, #8]	; (d5b04 <hal_i2c_write+0xc>)
   d5afc:	681b      	ldr	r3, [r3, #0]
   d5afe:	6a1b      	ldr	r3, [r3, #32]
   d5b00:	9301      	str	r3, [sp, #4]
   d5b02:	bd08      	pop	{r3, pc}
   d5b04:	00030228 	.word	0x00030228

000d5b08 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5b08:	b508      	push	{r3, lr}
   d5b0a:	4b02      	ldr	r3, [pc, #8]	; (d5b14 <hal_i2c_available+0xc>)
   d5b0c:	681b      	ldr	r3, [r3, #0]
   d5b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5b10:	9301      	str	r3, [sp, #4]
   d5b12:	bd08      	pop	{r3, pc}
   d5b14:	00030228 	.word	0x00030228

000d5b18 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5b18:	b508      	push	{r3, lr}
   d5b1a:	4b02      	ldr	r3, [pc, #8]	; (d5b24 <hal_i2c_read+0xc>)
   d5b1c:	681b      	ldr	r3, [r3, #0]
   d5b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b20:	9301      	str	r3, [sp, #4]
   d5b22:	bd08      	pop	{r3, pc}
   d5b24:	00030228 	.word	0x00030228

000d5b28 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5b28:	b508      	push	{r3, lr}
   d5b2a:	4b02      	ldr	r3, [pc, #8]	; (d5b34 <hal_i2c_peek+0xc>)
   d5b2c:	681b      	ldr	r3, [r3, #0]
   d5b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5b30:	9301      	str	r3, [sp, #4]
   d5b32:	bd08      	pop	{r3, pc}
   d5b34:	00030228 	.word	0x00030228

000d5b38 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5b38:	b508      	push	{r3, lr}
   d5b3a:	4b02      	ldr	r3, [pc, #8]	; (d5b44 <hal_i2c_flush+0xc>)
   d5b3c:	681b      	ldr	r3, [r3, #0]
   d5b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5b40:	9301      	str	r3, [sp, #4]
   d5b42:	bd08      	pop	{r3, pc}
   d5b44:	00030228 	.word	0x00030228

000d5b48 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5b48:	b508      	push	{r3, lr}
   d5b4a:	4b02      	ldr	r3, [pc, #8]	; (d5b54 <hal_i2c_is_enabled+0xc>)
   d5b4c:	681b      	ldr	r3, [r3, #0]
   d5b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5b50:	9301      	str	r3, [sp, #4]
   d5b52:	bd08      	pop	{r3, pc}
   d5b54:	00030228 	.word	0x00030228

000d5b58 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5b58:	b508      	push	{r3, lr}
   d5b5a:	4b02      	ldr	r3, [pc, #8]	; (d5b64 <hal_i2c_init+0xc>)
   d5b5c:	681b      	ldr	r3, [r3, #0]
   d5b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5b60:	9301      	str	r3, [sp, #4]
   d5b62:	bd08      	pop	{r3, pc}
   d5b64:	00030228 	.word	0x00030228

000d5b68 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5b68:	b508      	push	{r3, lr}
   d5b6a:	4b02      	ldr	r3, [pc, #8]	; (d5b74 <hal_i2c_request_ex+0xc>)
   d5b6c:	681b      	ldr	r3, [r3, #0]
   d5b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5b70:	9301      	str	r3, [sp, #4]
   d5b72:	bd08      	pop	{r3, pc}
   d5b74:	00030228 	.word	0x00030228

000d5b78 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5b78:	b508      	push	{r3, lr}
   d5b7a:	4b02      	ldr	r3, [pc, #8]	; (d5b84 <hal_spi_begin+0xc>)
   d5b7c:	681b      	ldr	r3, [r3, #0]
   d5b7e:	681b      	ldr	r3, [r3, #0]
   d5b80:	9301      	str	r3, [sp, #4]
   d5b82:	bd08      	pop	{r3, pc}
   d5b84:	00030230 	.word	0x00030230

000d5b88 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5b88:	b508      	push	{r3, lr}
   d5b8a:	4b02      	ldr	r3, [pc, #8]	; (d5b94 <hal_spi_transfer+0xc>)
   d5b8c:	681b      	ldr	r3, [r3, #0]
   d5b8e:	695b      	ldr	r3, [r3, #20]
   d5b90:	9301      	str	r3, [sp, #4]
   d5b92:	bd08      	pop	{r3, pc}
   d5b94:	00030230 	.word	0x00030230

000d5b98 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5b98:	b508      	push	{r3, lr}
   d5b9a:	4b02      	ldr	r3, [pc, #8]	; (d5ba4 <hal_spi_init+0xc>)
   d5b9c:	681b      	ldr	r3, [r3, #0]
   d5b9e:	69db      	ldr	r3, [r3, #28]
   d5ba0:	9301      	str	r3, [sp, #4]
   d5ba2:	bd08      	pop	{r3, pc}
   d5ba4:	00030230 	.word	0x00030230

000d5ba8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5ba8:	b508      	push	{r3, lr}
   d5baa:	4b02      	ldr	r3, [pc, #8]	; (d5bb4 <hal_spi_is_enabled+0xc>)
   d5bac:	681b      	ldr	r3, [r3, #0]
   d5bae:	6a1b      	ldr	r3, [r3, #32]
   d5bb0:	9301      	str	r3, [sp, #4]
   d5bb2:	bd08      	pop	{r3, pc}
   d5bb4:	00030230 	.word	0x00030230

000d5bb8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5bb8:	b508      	push	{r3, lr}
   d5bba:	4b02      	ldr	r3, [pc, #8]	; (d5bc4 <hal_spi_info+0xc>)
   d5bbc:	681b      	ldr	r3, [r3, #0]
   d5bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5bc0:	9301      	str	r3, [sp, #4]
   d5bc2:	bd08      	pop	{r3, pc}
   d5bc4:	00030230 	.word	0x00030230

000d5bc8 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5bc8:	b508      	push	{r3, lr}
   d5bca:	4b02      	ldr	r3, [pc, #8]	; (d5bd4 <hal_spi_set_settings+0xc>)
   d5bcc:	681b      	ldr	r3, [r3, #0]
   d5bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5bd0:	9301      	str	r3, [sp, #4]
   d5bd2:	bd08      	pop	{r3, pc}
   d5bd4:	00030230 	.word	0x00030230

000d5bd8 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5bd8:	b508      	push	{r3, lr}
   d5bda:	4b02      	ldr	r3, [pc, #8]	; (d5be4 <hal_spi_acquire+0xc>)
   d5bdc:	681b      	ldr	r3, [r3, #0]
   d5bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5be0:	9301      	str	r3, [sp, #4]
   d5be2:	bd08      	pop	{r3, pc}
   d5be4:	00030230 	.word	0x00030230

000d5be8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5be8:	b508      	push	{r3, lr}
   d5bea:	4b02      	ldr	r3, [pc, #8]	; (d5bf4 <hal_spi_release+0xc>)
   d5bec:	681b      	ldr	r3, [r3, #0]
   d5bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5bf0:	9301      	str	r3, [sp, #4]
   d5bf2:	bd08      	pop	{r3, pc}
   d5bf4:	00030230 	.word	0x00030230

000d5bf8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5bf8:	b508      	push	{r3, lr}
   d5bfa:	4b02      	ldr	r3, [pc, #8]	; (d5c04 <HAL_USB_USART_Init+0xc>)
   d5bfc:	681b      	ldr	r3, [r3, #0]
   d5bfe:	681b      	ldr	r3, [r3, #0]
   d5c00:	9301      	str	r3, [sp, #4]
   d5c02:	bd08      	pop	{r3, pc}
   d5c04:	0003024c 	.word	0x0003024c

000d5c08 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5c08:	b508      	push	{r3, lr}
   d5c0a:	4b02      	ldr	r3, [pc, #8]	; (d5c14 <HAL_USB_USART_Available_Data+0xc>)
   d5c0c:	681b      	ldr	r3, [r3, #0]
   d5c0e:	691b      	ldr	r3, [r3, #16]
   d5c10:	9301      	str	r3, [sp, #4]
   d5c12:	bd08      	pop	{r3, pc}
   d5c14:	0003024c 	.word	0x0003024c

000d5c18 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5c18:	b508      	push	{r3, lr}
   d5c1a:	4b02      	ldr	r3, [pc, #8]	; (d5c24 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5c1c:	681b      	ldr	r3, [r3, #0]
   d5c1e:	695b      	ldr	r3, [r3, #20]
   d5c20:	9301      	str	r3, [sp, #4]
   d5c22:	bd08      	pop	{r3, pc}
   d5c24:	0003024c 	.word	0x0003024c

000d5c28 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5c28:	b508      	push	{r3, lr}
   d5c2a:	4b02      	ldr	r3, [pc, #8]	; (d5c34 <HAL_USB_USART_Receive_Data+0xc>)
   d5c2c:	681b      	ldr	r3, [r3, #0]
   d5c2e:	699b      	ldr	r3, [r3, #24]
   d5c30:	9301      	str	r3, [sp, #4]
   d5c32:	bd08      	pop	{r3, pc}
   d5c34:	0003024c 	.word	0x0003024c

000d5c38 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5c38:	b508      	push	{r3, lr}
   d5c3a:	4b02      	ldr	r3, [pc, #8]	; (d5c44 <HAL_USB_USART_Send_Data+0xc>)
   d5c3c:	681b      	ldr	r3, [r3, #0]
   d5c3e:	69db      	ldr	r3, [r3, #28]
   d5c40:	9301      	str	r3, [sp, #4]
   d5c42:	bd08      	pop	{r3, pc}
   d5c44:	0003024c 	.word	0x0003024c

000d5c48 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5c48:	b508      	push	{r3, lr}
   d5c4a:	4b02      	ldr	r3, [pc, #8]	; (d5c54 <HAL_USB_USART_Flush_Data+0xc>)
   d5c4c:	681b      	ldr	r3, [r3, #0]
   d5c4e:	6a1b      	ldr	r3, [r3, #32]
   d5c50:	9301      	str	r3, [sp, #4]
   d5c52:	bd08      	pop	{r3, pc}
   d5c54:	0003024c 	.word	0x0003024c

000d5c58 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5c58:	b508      	push	{r3, lr}
   d5c5a:	4b02      	ldr	r3, [pc, #8]	; (d5c64 <panic_+0xc>)
   d5c5c:	681b      	ldr	r3, [r3, #0]
   d5c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5c60:	9301      	str	r3, [sp, #4]
   d5c62:	bd08      	pop	{r3, pc}
   d5c64:	00030260 	.word	0x00030260

000d5c68 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5c68:	b508      	push	{r3, lr}
   d5c6a:	4b02      	ldr	r3, [pc, #8]	; (d5c74 <set_system_mode+0xc>)
   d5c6c:	681b      	ldr	r3, [r3, #0]
   d5c6e:	685b      	ldr	r3, [r3, #4]
   d5c70:	9301      	str	r3, [sp, #4]
   d5c72:	bd08      	pop	{r3, pc}
   d5c74:	00030220 	.word	0x00030220

000d5c78 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5c78:	b508      	push	{r3, lr}
   d5c7a:	4b02      	ldr	r3, [pc, #8]	; (d5c84 <system_delay_ms+0xc>)
   d5c7c:	681b      	ldr	r3, [r3, #0]
   d5c7e:	695b      	ldr	r3, [r3, #20]
   d5c80:	9301      	str	r3, [sp, #4]
   d5c82:	bd08      	pop	{r3, pc}
   d5c84:	00030220 	.word	0x00030220

000d5c88 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5c88:	b508      	push	{r3, lr}
   d5c8a:	4b02      	ldr	r3, [pc, #8]	; (d5c94 <system_thread_set_state+0xc>)
   d5c8c:	681b      	ldr	r3, [r3, #0]
   d5c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c90:	9301      	str	r3, [sp, #4]
   d5c92:	bd08      	pop	{r3, pc}
   d5c94:	00030220 	.word	0x00030220

000d5c98 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5c98:	b508      	push	{r3, lr}
   d5c9a:	4b03      	ldr	r3, [pc, #12]	; (d5ca8 <system_ctrl_set_app_request_handler+0x10>)
   d5c9c:	681b      	ldr	r3, [r3, #0]
   d5c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5ca2:	9301      	str	r3, [sp, #4]
   d5ca4:	bd08      	pop	{r3, pc}
   d5ca6:	0000      	.short	0x0000
   d5ca8:	00030220 	.word	0x00030220

000d5cac <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5cac:	b508      	push	{r3, lr}
   d5cae:	4b03      	ldr	r3, [pc, #12]	; (d5cbc <system_ctrl_set_result+0x10>)
   d5cb0:	681b      	ldr	r3, [r3, #0]
   d5cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5cb6:	9301      	str	r3, [sp, #4]
   d5cb8:	bd08      	pop	{r3, pc}
   d5cba:	0000      	.short	0x0000
   d5cbc:	00030220 	.word	0x00030220

000d5cc0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5cc0:	b508      	push	{r3, lr}
   d5cc2:	4b02      	ldr	r3, [pc, #8]	; (d5ccc <network_connect+0xc>)
   d5cc4:	681b      	ldr	r3, [r3, #0]
   d5cc6:	685b      	ldr	r3, [r3, #4]
   d5cc8:	9301      	str	r3, [sp, #4]
   d5cca:	bd08      	pop	{r3, pc}
   d5ccc:	00030240 	.word	0x00030240

000d5cd0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5cd0:	b508      	push	{r3, lr}
   d5cd2:	4b02      	ldr	r3, [pc, #8]	; (d5cdc <network_connecting+0xc>)
   d5cd4:	681b      	ldr	r3, [r3, #0]
   d5cd6:	689b      	ldr	r3, [r3, #8]
   d5cd8:	9301      	str	r3, [sp, #4]
   d5cda:	bd08      	pop	{r3, pc}
   d5cdc:	00030240 	.word	0x00030240

000d5ce0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5ce0:	b508      	push	{r3, lr}
   d5ce2:	4b02      	ldr	r3, [pc, #8]	; (d5cec <network_disconnect+0xc>)
   d5ce4:	681b      	ldr	r3, [r3, #0]
   d5ce6:	68db      	ldr	r3, [r3, #12]
   d5ce8:	9301      	str	r3, [sp, #4]
   d5cea:	bd08      	pop	{r3, pc}
   d5cec:	00030240 	.word	0x00030240

000d5cf0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5cf0:	b508      	push	{r3, lr}
   d5cf2:	4b02      	ldr	r3, [pc, #8]	; (d5cfc <network_ready+0xc>)
   d5cf4:	681b      	ldr	r3, [r3, #0]
   d5cf6:	691b      	ldr	r3, [r3, #16]
   d5cf8:	9301      	str	r3, [sp, #4]
   d5cfa:	bd08      	pop	{r3, pc}
   d5cfc:	00030240 	.word	0x00030240

000d5d00 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d00:	b508      	push	{r3, lr}
   d5d02:	4b02      	ldr	r3, [pc, #8]	; (d5d0c <network_on+0xc>)
   d5d04:	681b      	ldr	r3, [r3, #0]
   d5d06:	695b      	ldr	r3, [r3, #20]
   d5d08:	9301      	str	r3, [sp, #4]
   d5d0a:	bd08      	pop	{r3, pc}
   d5d0c:	00030240 	.word	0x00030240

000d5d10 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5d10:	b508      	push	{r3, lr}
   d5d12:	4b02      	ldr	r3, [pc, #8]	; (d5d1c <network_off+0xc>)
   d5d14:	681b      	ldr	r3, [r3, #0]
   d5d16:	699b      	ldr	r3, [r3, #24]
   d5d18:	9301      	str	r3, [sp, #4]
   d5d1a:	bd08      	pop	{r3, pc}
   d5d1c:	00030240 	.word	0x00030240

000d5d20 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5d20:	b508      	push	{r3, lr}
   d5d22:	4b02      	ldr	r3, [pc, #8]	; (d5d2c <network_listen+0xc>)
   d5d24:	681b      	ldr	r3, [r3, #0]
   d5d26:	69db      	ldr	r3, [r3, #28]
   d5d28:	9301      	str	r3, [sp, #4]
   d5d2a:	bd08      	pop	{r3, pc}
   d5d2c:	00030240 	.word	0x00030240

000d5d30 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5d30:	b508      	push	{r3, lr}
   d5d32:	4b02      	ldr	r3, [pc, #8]	; (d5d3c <network_listening+0xc>)
   d5d34:	681b      	ldr	r3, [r3, #0]
   d5d36:	6a1b      	ldr	r3, [r3, #32]
   d5d38:	9301      	str	r3, [sp, #4]
   d5d3a:	bd08      	pop	{r3, pc}
   d5d3c:	00030240 	.word	0x00030240

000d5d40 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5d40:	b508      	push	{r3, lr}
   d5d42:	4b02      	ldr	r3, [pc, #8]	; (d5d4c <network_set_listen_timeout+0xc>)
   d5d44:	681b      	ldr	r3, [r3, #0]
   d5d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5d48:	9301      	str	r3, [sp, #4]
   d5d4a:	bd08      	pop	{r3, pc}
   d5d4c:	00030240 	.word	0x00030240

000d5d50 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5d50:	b508      	push	{r3, lr}
   d5d52:	4b02      	ldr	r3, [pc, #8]	; (d5d5c <network_get_listen_timeout+0xc>)
   d5d54:	681b      	ldr	r3, [r3, #0]
   d5d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5d58:	9301      	str	r3, [sp, #4]
   d5d5a:	bd08      	pop	{r3, pc}
   d5d5c:	00030240 	.word	0x00030240

000d5d60 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5d60:	b508      	push	{r3, lr}
   d5d62:	4b02      	ldr	r3, [pc, #8]	; (d5d6c <network_is_on+0xc>)
   d5d64:	681b      	ldr	r3, [r3, #0]
   d5d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5d68:	9301      	str	r3, [sp, #4]
   d5d6a:	bd08      	pop	{r3, pc}
   d5d6c:	00030240 	.word	0x00030240

000d5d70 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5d70:	b508      	push	{r3, lr}
   d5d72:	4b02      	ldr	r3, [pc, #8]	; (d5d7c <network_is_off+0xc>)
   d5d74:	681b      	ldr	r3, [r3, #0]
   d5d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5d78:	9301      	str	r3, [sp, #4]
   d5d7a:	bd08      	pop	{r3, pc}
   d5d7c:	00030240 	.word	0x00030240

000d5d80 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5d80:	b508      	push	{r3, lr}
   d5d82:	4b02      	ldr	r3, [pc, #8]	; (d5d8c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5d84:	681b      	ldr	r3, [r3, #0]
   d5d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5d88:	9301      	str	r3, [sp, #4]
   d5d8a:	bd08      	pop	{r3, pc}
   d5d8c:	00030244 	.word	0x00030244

000d5d90 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5d90:	b508      	push	{r3, lr}
   d5d92:	4b02      	ldr	r3, [pc, #8]	; (d5d9c <malloc+0xc>)
   d5d94:	681b      	ldr	r3, [r3, #0]
   d5d96:	681b      	ldr	r3, [r3, #0]
   d5d98:	9301      	str	r3, [sp, #4]
   d5d9a:	bd08      	pop	{r3, pc}
   d5d9c:	0003021c 	.word	0x0003021c

000d5da0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5da0:	b508      	push	{r3, lr}
   d5da2:	4b02      	ldr	r3, [pc, #8]	; (d5dac <free+0xc>)
   d5da4:	681b      	ldr	r3, [r3, #0]
   d5da6:	685b      	ldr	r3, [r3, #4]
   d5da8:	9301      	str	r3, [sp, #4]
   d5daa:	bd08      	pop	{r3, pc}
   d5dac:	0003021c 	.word	0x0003021c

000d5db0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5db0:	b508      	push	{r3, lr}
   d5db2:	4b02      	ldr	r3, [pc, #8]	; (d5dbc <realloc+0xc>)
   d5db4:	681b      	ldr	r3, [r3, #0]
   d5db6:	689b      	ldr	r3, [r3, #8]
   d5db8:	9301      	str	r3, [sp, #4]
   d5dba:	bd08      	pop	{r3, pc}
   d5dbc:	0003021c 	.word	0x0003021c

000d5dc0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5dc0:	b508      	push	{r3, lr}
   d5dc2:	4b02      	ldr	r3, [pc, #8]	; (d5dcc <vsnprintf+0xc>)
   d5dc4:	681b      	ldr	r3, [r3, #0]
   d5dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5dc8:	9301      	str	r3, [sp, #4]
   d5dca:	bd08      	pop	{r3, pc}
   d5dcc:	0003021c 	.word	0x0003021c

000d5dd0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5dd0:	b508      	push	{r3, lr}
   d5dd2:	4b02      	ldr	r3, [pc, #8]	; (d5ddc <newlib_impure_ptr_callback+0xc>)
   d5dd4:	681b      	ldr	r3, [r3, #0]
   d5dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5dd8:	9301      	str	r3, [sp, #4]
   d5dda:	bd08      	pop	{r3, pc}
   d5ddc:	0003021c 	.word	0x0003021c

000d5de0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5de0:	2200      	movs	r2, #0
   d5de2:	6840      	ldr	r0, [r0, #4]
   d5de4:	4611      	mov	r1, r2
   d5de6:	f7ff bfa3 	b.w	d5d30 <network_listening>

000d5dea <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5dea:	2200      	movs	r2, #0
   d5dec:	6840      	ldr	r0, [r0, #4]
   d5dee:	4611      	mov	r1, r2
   d5df0:	f7ff bfae 	b.w	d5d50 <network_get_listen_timeout>

000d5df4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5df4:	6840      	ldr	r0, [r0, #4]
   d5df6:	2200      	movs	r2, #0
   d5df8:	f7ff bfa2 	b.w	d5d40 <network_set_listen_timeout>

000d5dfc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5dfc:	6840      	ldr	r0, [r0, #4]
   d5dfe:	2200      	movs	r2, #0
   d5e00:	f081 0101 	eor.w	r1, r1, #1
   d5e04:	f7ff bf8c 	b.w	d5d20 <network_listen>

000d5e08 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5e08:	2300      	movs	r3, #0
   d5e0a:	6840      	ldr	r0, [r0, #4]
   d5e0c:	461a      	mov	r2, r3
   d5e0e:	4619      	mov	r1, r3
   d5e10:	f7ff bf7e 	b.w	d5d10 <network_off>

000d5e14 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5e14:	2300      	movs	r3, #0
   d5e16:	6840      	ldr	r0, [r0, #4]
   d5e18:	461a      	mov	r2, r3
   d5e1a:	4619      	mov	r1, r3
   d5e1c:	f7ff bf70 	b.w	d5d00 <network_on>

000d5e20 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5e20:	2200      	movs	r2, #0
   d5e22:	6840      	ldr	r0, [r0, #4]
   d5e24:	4611      	mov	r1, r2
   d5e26:	f7ff bf63 	b.w	d5cf0 <network_ready>

000d5e2a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5e2a:	2200      	movs	r2, #0
   d5e2c:	6840      	ldr	r0, [r0, #4]
   d5e2e:	4611      	mov	r1, r2
   d5e30:	f7ff bf4e 	b.w	d5cd0 <network_connecting>

000d5e34 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5e34:	6840      	ldr	r0, [r0, #4]
   d5e36:	2200      	movs	r2, #0
   d5e38:	2102      	movs	r1, #2
   d5e3a:	f7ff bf51 	b.w	d5ce0 <network_disconnect>

000d5e3e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5e3e:	2300      	movs	r3, #0
   d5e40:	6840      	ldr	r0, [r0, #4]
   d5e42:	461a      	mov	r2, r3
   d5e44:	f7ff bf3c 	b.w	d5cc0 <network_connect>

000d5e48 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5e48:	4b02      	ldr	r3, [pc, #8]	; (d5e54 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5e4a:	2203      	movs	r2, #3
   d5e4c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5e4e:	4a02      	ldr	r2, [pc, #8]	; (d5e58 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5e50:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5e52:	4770      	bx	lr
   d5e54:	2003e650 	.word	0x2003e650
   d5e58:	000d78d4 	.word	0x000d78d4

000d5e5c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5e5c:	2100      	movs	r1, #0
   d5e5e:	f7ff bebb 	b.w	d5bd8 <hal_spi_acquire>

000d5e62 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d5e62:	2100      	movs	r1, #0
   d5e64:	f7ff bec0 	b.w	d5be8 <hal_spi_release>

000d5e68 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5e68:	b510      	push	{r4, lr}
   d5e6a:	4604      	mov	r4, r0
   d5e6c:	4608      	mov	r0, r1
{
    _spi = spi;
   d5e6e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5e70:	f7ff fe92 	bl	d5b98 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5e74:	2300      	movs	r3, #0
   d5e76:	6063      	str	r3, [r4, #4]
}
   d5e78:	4620      	mov	r0, r4
   d5e7a:	bd10      	pop	{r4, pc}

000d5e7c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5e7c:	b510      	push	{r4, lr}
   d5e7e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5e80:	7800      	ldrb	r0, [r0, #0]
   d5e82:	f7ff ffeb 	bl	d5e5c <_ZN8SPIClass4lockEv.isra.0>
   d5e86:	b948      	cbnz	r0, d5e9c <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d5e88:	7820      	ldrb	r0, [r4, #0]
   d5e8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5e8e:	f7ff fe73 	bl	d5b78 <hal_spi_begin>
        unlock();
   d5e92:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5e98:	f7ff bfe3 	b.w	d5e62 <_ZN8SPIClass6unlockEv.isra.0>
}
   d5e9c:	bd10      	pop	{r4, pc}

000d5e9e <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d5e9e:	7800      	ldrb	r0, [r0, #0]
   d5ea0:	f7ff bfdf 	b.w	d5e62 <_ZN8SPIClass6unlockEv.isra.0>

000d5ea4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5ea4:	0840      	lsrs	r0, r0, #1
{
   d5ea6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d5ea8:	6018      	str	r0, [r3, #0]
   d5eaa:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5eac:	6818      	ldr	r0, [r3, #0]
   d5eae:	4288      	cmp	r0, r1
   d5eb0:	b2e5      	uxtb	r5, r4
   d5eb2:	d906      	bls.n	d5ec2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5eb4:	3401      	adds	r4, #1
   d5eb6:	2c08      	cmp	r4, #8
   d5eb8:	d002      	beq.n	d5ec0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5eba:	0840      	lsrs	r0, r0, #1
   d5ebc:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d5ebe:	e7f5      	b.n	d5eac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5ec0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d5ec2:	4b02      	ldr	r3, [pc, #8]	; (d5ecc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5ec4:	5d5b      	ldrb	r3, [r3, r5]
   d5ec6:	7013      	strb	r3, [r2, #0]
}
   d5ec8:	bd30      	pop	{r4, r5, pc}
   d5eca:	bf00      	nop
   d5ecc:	000d7908 	.word	0x000d7908

000d5ed0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d5ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5ed4:	4606      	mov	r6, r0
   d5ed6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d5ed8:	7800      	ldrb	r0, [r0, #0]
{
   d5eda:	460c      	mov	r4, r1
    CHECK(lock());
   d5edc:	f7ff ffbe 	bl	d5e5c <_ZN8SPIClass4lockEv.isra.0>
   d5ee0:	2800      	cmp	r0, #0
   d5ee2:	db1b      	blt.n	d5f1c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d5ee4:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5ee6:	2214      	movs	r2, #20
   d5ee8:	2100      	movs	r1, #0
   d5eea:	a809      	add	r0, sp, #36	; 0x24
   d5eec:	f000 fede 	bl	d6cac <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5ef0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5ef2:	2200      	movs	r2, #0
   d5ef4:	a909      	add	r1, sp, #36	; 0x24
   d5ef6:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d5ef8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d5efc:	f7ff fe5c 	bl	d5bb8 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d5f00:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d5f04:	b113      	cbz	r3, d5f0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d5f06:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5f0a:	b155      	cbz	r5, d5f22 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d5f0c:	2700      	movs	r7, #0
   d5f0e:	46b9      	mov	r9, r7
   d5f10:	46b8      	mov	r8, r7
   d5f12:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d5f14:	7923      	ldrb	r3, [r4, #4]
   d5f16:	b15d      	cbz	r5, d5f30 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d5f18:	b1c3      	cbz	r3, d5f4c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d5f1a:	2000      	movs	r0, #0
}
   d5f1c:	b00f      	add	sp, #60	; 0x3c
   d5f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d5f22:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d5f26:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d5f2a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d5f2e:	e7f1      	b.n	d5f14 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d5f30:	2b00      	cmp	r3, #0
   d5f32:	d135      	bne.n	d5fa0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d5f34:	68a3      	ldr	r3, [r4, #8]
   d5f36:	4543      	cmp	r3, r8
   d5f38:	d108      	bne.n	d5f4c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d5f3a:	f88d 9020 	strb.w	r9, [sp, #32]
   d5f3e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5f42:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5f46:	89a3      	ldrh	r3, [r4, #12]
   d5f48:	429a      	cmp	r2, r3
   d5f4a:	d0e6      	beq.n	d5f1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d5f4c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5f4e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d5f50:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d5f54:	980a      	ldr	r0, [sp, #40]	; 0x28
   d5f56:	ab04      	add	r3, sp, #16
   d5f58:	f10d 020f 	add.w	r2, sp, #15
   d5f5c:	f7ff ffa2 	bl	d5ea4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d5f60:	7921      	ldrb	r1, [r4, #4]
   d5f62:	b985      	cbnz	r5, d5f86 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d5f64:	b989      	cbnz	r1, d5f8a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5f66:	68a3      	ldr	r3, [r4, #8]
   d5f68:	4543      	cmp	r3, r8
   d5f6a:	d30e      	bcc.n	d5f8a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d5f6c:	f88d 9020 	strb.w	r9, [sp, #32]
   d5f70:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d5f74:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d5f78:	89a3      	ldrh	r3, [r4, #12]
   d5f7a:	429a      	cmp	r2, r3
   d5f7c:	d105      	bne.n	d5f8a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d5f7e:	9b04      	ldr	r3, [sp, #16]
   d5f80:	4543      	cmp	r3, r8
   d5f82:	d102      	bne.n	d5f8a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d5f84:	e7c9      	b.n	d5f1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d5f86:	2900      	cmp	r1, #0
   d5f88:	d1f9      	bne.n	d5f7e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d5f8a:	2300      	movs	r3, #0
   d5f8c:	9301      	str	r3, [sp, #4]
   d5f8e:	7b63      	ldrb	r3, [r4, #13]
   d5f90:	9300      	str	r3, [sp, #0]
   d5f92:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d5f96:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d5f98:	7830      	ldrb	r0, [r6, #0]
   d5f9a:	f7ff fe15 	bl	d5bc8 <hal_spi_set_settings>
   d5f9e:	e7bc      	b.n	d5f1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d5fa0:	e9cd 5500 	strd	r5, r5, [sp]
   d5fa4:	462b      	mov	r3, r5
   d5fa6:	462a      	mov	r2, r5
   d5fa8:	2101      	movs	r1, #1
   d5faa:	e7f5      	b.n	d5f98 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d5fac <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d5fac:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d5fae:	7800      	ldrb	r0, [r0, #0]
   d5fb0:	f7ff fdea 	bl	d5b88 <hal_spi_transfer>
}
   d5fb4:	b2c0      	uxtb	r0, r0
   d5fb6:	bd08      	pop	{r3, pc}

000d5fb8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5fb8:	b510      	push	{r4, lr}
   d5fba:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5fbc:	6800      	ldr	r0, [r0, #0]
   d5fbe:	b118      	cbz	r0, d5fc8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5fc0:	f7ff feee 	bl	d5da0 <free>
            wakeupSource_ = nullptr;
   d5fc4:	2300      	movs	r3, #0
   d5fc6:	6023      	str	r3, [r4, #0]
        }
    }
   d5fc8:	bd10      	pop	{r4, pc}

000d5fca <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5fca:	b510      	push	{r4, lr}
   d5fcc:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5fce:	f7ff fff3 	bl	d5fb8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d5fd2:	4620      	mov	r0, r4
   d5fd4:	bd10      	pop	{r4, pc}
	...

000d5fd8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5fd8:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5fda:	4b09      	ldr	r3, [pc, #36]	; (d6000 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5fdc:	4c09      	ldr	r4, [pc, #36]	; (d6004 <_GLOBAL__sub_I_System+0x2c>)
   d5fde:	2202      	movs	r2, #2
   d5fe0:	2000      	movs	r0, #0
   d5fe2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5fe4:	4b08      	ldr	r3, [pc, #32]	; (d6008 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5fe6:	6020      	str	r0, [r4, #0]
   d5fe8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5fea:	71a0      	strb	r0, [r4, #6]
   d5fec:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5fee:	f7ff fe3b 	bl	d5c68 <set_system_mode>
SystemClass System;
   d5ff2:	4620      	mov	r0, r4
   d5ff4:	4a05      	ldr	r2, [pc, #20]	; (d600c <_GLOBAL__sub_I_System+0x34>)
   d5ff6:	4906      	ldr	r1, [pc, #24]	; (d6010 <_GLOBAL__sub_I_System+0x38>)
   d5ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5ffc:	f000 be30 	b.w	d6c60 <__aeabi_atexit>
   d6000:	2003e664 	.word	0x2003e664
   d6004:	2003e658 	.word	0x2003e658
   d6008:	ffff0000 	.word	0xffff0000
   d600c:	2003e5cc 	.word	0x2003e5cc
   d6010:	000d5fcb 	.word	0x000d5fcb

000d6014 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d6014:	b510      	push	{r4, lr}
   d6016:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d6018:	f000 fe7c 	bl	d6d14 <strlen>
   d601c:	3801      	subs	r0, #1
   d601e:	1823      	adds	r3, r4, r0
   d6020:	4620      	mov	r0, r4
	while(i<j){
   d6022:	4283      	cmp	r3, r0
   d6024:	d906      	bls.n	d6034 <_Z11str_reversePc+0x20>
		c = *i;
   d6026:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d6028:	7819      	ldrb	r1, [r3, #0]
   d602a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d602e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d6032:	e7f6      	b.n	d6022 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d6034:	bd10      	pop	{r4, pc}

000d6036 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6036:	b570      	push	{r4, r5, r6, lr}
   d6038:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d603a:	1e91      	subs	r1, r2, #2
   d603c:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d603e:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d6040:	d822      	bhi.n	d6088 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d6042:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d6044:	b16d      	cbz	r5, d6062 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d6046:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d604a:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d604e:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d6050:	2d09      	cmp	r5, #9
                *ptr += '0';
   d6052:	bf94      	ite	ls
   d6054:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d6056:	3157      	addhi	r1, #87	; 0x57
   d6058:	b2c9      	uxtb	r1, r1
   d605a:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d605e:	4635      	mov	r5, r6
	while(a){
   d6060:	e7f0      	b.n	d6044 <ultoa+0xe>
   d6062:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d6064:	4423      	add	r3, r4
            *ptr++ = '0';
   d6066:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d6068:	4293      	cmp	r3, r2
   d606a:	d902      	bls.n	d6072 <ultoa+0x3c>
            *ptr++ = '0';
   d606c:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d6070:	e7fa      	b.n	d6068 <ultoa+0x32>
   d6072:	1a1a      	subs	r2, r3, r0
   d6074:	4283      	cmp	r3, r0
   d6076:	bf38      	it	cc
   d6078:	2200      	movcc	r2, #0

	*ptr = '\0';
   d607a:	2300      	movs	r3, #0
   d607c:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d607e:	4620      	mov	r0, r4
   d6080:	f7ff ffc8 	bl	d6014 <_Z11str_reversePc>
	return buffer;
   d6084:	4620      	mov	r0, r4
}
   d6086:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d6088:	2000      	movs	r0, #0
   d608a:	e7fc      	b.n	d6086 <ultoa+0x50>

000d608c <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d608c:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d608e:	2301      	movs	r3, #1
   d6090:	f7ff ffd1 	bl	d6036 <ultoa>
}
   d6094:	bd08      	pop	{r3, pc}

000d6096 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6096:	b510      	push	{r4, lr}
   d6098:	4604      	mov	r4, r0
{
	free(buffer);
   d609a:	6800      	ldr	r0, [r0, #0]
   d609c:	f7ff fe80 	bl	d5da0 <free>
}
   d60a0:	4620      	mov	r0, r4
   d60a2:	bd10      	pop	{r4, pc}

000d60a4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d60a4:	b510      	push	{r4, lr}
   d60a6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d60a8:	6800      	ldr	r0, [r0, #0]
   d60aa:	b108      	cbz	r0, d60b0 <_ZN6String10invalidateEv+0xc>
   d60ac:	f7ff fe78 	bl	d5da0 <free>
	buffer = NULL;
   d60b0:	2300      	movs	r3, #0
	capacity = len = 0;
   d60b2:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d60b6:	6023      	str	r3, [r4, #0]
}
   d60b8:	bd10      	pop	{r4, pc}

000d60ba <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d60ba:	b538      	push	{r3, r4, r5, lr}
   d60bc:	4604      	mov	r4, r0
   d60be:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d60c0:	6800      	ldr	r0, [r0, #0]
   d60c2:	3101      	adds	r1, #1
   d60c4:	f7ff fe74 	bl	d5db0 <realloc>
	if (newbuffer) {
   d60c8:	b110      	cbz	r0, d60d0 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d60ca:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d60ce:	2001      	movs	r0, #1
	}
	return 0;
}
   d60d0:	bd38      	pop	{r3, r4, r5, pc}

000d60d2 <_ZN6String7reserveEj>:
{
   d60d2:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d60d4:	6803      	ldr	r3, [r0, #0]
{
   d60d6:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d60d8:	b123      	cbz	r3, d60e4 <_ZN6String7reserveEj+0x12>
   d60da:	6843      	ldr	r3, [r0, #4]
   d60dc:	428b      	cmp	r3, r1
   d60de:	d301      	bcc.n	d60e4 <_ZN6String7reserveEj+0x12>
   d60e0:	2001      	movs	r0, #1
}
   d60e2:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d60e4:	4620      	mov	r0, r4
   d60e6:	f7ff ffe8 	bl	d60ba <_ZN6String12changeBufferEj>
   d60ea:	2800      	cmp	r0, #0
   d60ec:	d0f9      	beq.n	d60e2 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d60ee:	68a3      	ldr	r3, [r4, #8]
   d60f0:	2b00      	cmp	r3, #0
   d60f2:	d1f5      	bne.n	d60e0 <_ZN6String7reserveEj+0xe>
   d60f4:	6822      	ldr	r2, [r4, #0]
   d60f6:	7013      	strb	r3, [r2, #0]
   d60f8:	e7f2      	b.n	d60e0 <_ZN6String7reserveEj+0xe>

000d60fa <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d60fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d60fc:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d60fe:	4611      	mov	r1, r2
   d6100:	9201      	str	r2, [sp, #4]
{
   d6102:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d6104:	f7ff ffe5 	bl	d60d2 <_ZN6String7reserveEj>
   d6108:	9a01      	ldr	r2, [sp, #4]
   d610a:	b928      	cbnz	r0, d6118 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d610c:	4620      	mov	r0, r4
   d610e:	f7ff ffc9 	bl	d60a4 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d6112:	4620      	mov	r0, r4
   d6114:	b003      	add	sp, #12
   d6116:	bd30      	pop	{r4, r5, pc}
	len = length;
   d6118:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d611a:	4629      	mov	r1, r5
   d611c:	6820      	ldr	r0, [r4, #0]
   d611e:	f000 fdb7 	bl	d6c90 <memcpy>
	buffer[len] = 0;
   d6122:	6822      	ldr	r2, [r4, #0]
   d6124:	68a3      	ldr	r3, [r4, #8]
   d6126:	2100      	movs	r1, #0
   d6128:	54d1      	strb	r1, [r2, r3]
	return *this;
   d612a:	e7f2      	b.n	d6112 <_ZN6String4copyEPKcj+0x18>

000d612c <_ZN6StringC1EPKc>:
	buffer = NULL;
   d612c:	2300      	movs	r3, #0
String::String(const char *cstr)
   d612e:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d6130:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d6134:	4604      	mov	r4, r0
	len = 0;
   d6136:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6138:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d613a:	b141      	cbz	r1, d614e <_ZN6StringC1EPKc+0x22>
   d613c:	4608      	mov	r0, r1
   d613e:	9101      	str	r1, [sp, #4]
   d6140:	f000 fde8 	bl	d6d14 <strlen>
   d6144:	9901      	ldr	r1, [sp, #4]
   d6146:	4602      	mov	r2, r0
   d6148:	4620      	mov	r0, r4
   d614a:	f7ff ffd6 	bl	d60fa <_ZN6String4copyEPKcj>
}
   d614e:	4620      	mov	r0, r4
   d6150:	b002      	add	sp, #8
   d6152:	bd10      	pop	{r4, pc}

000d6154 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6154:	b513      	push	{r0, r1, r4, lr}
   d6156:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6158:	b159      	cbz	r1, d6172 <_ZN6StringaSEPKc+0x1e>
   d615a:	4608      	mov	r0, r1
   d615c:	9101      	str	r1, [sp, #4]
   d615e:	f000 fdd9 	bl	d6d14 <strlen>
   d6162:	9901      	ldr	r1, [sp, #4]
   d6164:	4602      	mov	r2, r0
   d6166:	4620      	mov	r0, r4
   d6168:	f7ff ffc7 	bl	d60fa <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d616c:	4620      	mov	r0, r4
   d616e:	b002      	add	sp, #8
   d6170:	bd10      	pop	{r4, pc}
	else invalidate();
   d6172:	f7ff ff97 	bl	d60a4 <_ZN6String10invalidateEv>
   d6176:	e7f9      	b.n	d616c <_ZN6StringaSEPKc+0x18>

000d6178 <_ZN6StringC1Ejh>:
String::String(unsigned int value, unsigned char base)
   d6178:	b510      	push	{r4, lr}
   d617a:	4604      	mov	r4, r0
   d617c:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d617e:	2300      	movs	r3, #0
	capacity = 0;
   d6180:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d6184:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d6186:	7323      	strb	r3, [r4, #12]
String::String(unsigned int value, unsigned char base)
   d6188:	4608      	mov	r0, r1
	utoa(value, buf, base);
   d618a:	a901      	add	r1, sp, #4
   d618c:	f7ff ff7e 	bl	d608c <utoa>
	*this = buf;
   d6190:	a901      	add	r1, sp, #4
   d6192:	4620      	mov	r0, r4
   d6194:	f7ff ffde 	bl	d6154 <_ZN6StringaSEPKc>
}
   d6198:	4620      	mov	r0, r4
   d619a:	b00a      	add	sp, #40	; 0x28
   d619c:	bd10      	pop	{r4, pc}

000d619e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d619e:	b570      	push	{r4, r5, r6, lr}
   d61a0:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d61a2:	460e      	mov	r6, r1
   d61a4:	b909      	cbnz	r1, d61aa <_ZN6String6concatEPKcj+0xc>
   d61a6:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d61a8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d61aa:	b16a      	cbz	r2, d61c8 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d61ac:	6884      	ldr	r4, [r0, #8]
   d61ae:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d61b0:	4621      	mov	r1, r4
   d61b2:	f7ff ff8e 	bl	d60d2 <_ZN6String7reserveEj>
   d61b6:	2800      	cmp	r0, #0
   d61b8:	d0f5      	beq.n	d61a6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d61ba:	6828      	ldr	r0, [r5, #0]
   d61bc:	68ab      	ldr	r3, [r5, #8]
   d61be:	4631      	mov	r1, r6
   d61c0:	4418      	add	r0, r3
   d61c2:	f000 fd9f 	bl	d6d04 <strcpy>
	len = newlen;
   d61c6:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d61c8:	2001      	movs	r0, #1
   d61ca:	e7ed      	b.n	d61a8 <_ZN6String6concatEPKcj+0xa>

000d61cc <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d61cc:	688a      	ldr	r2, [r1, #8]
   d61ce:	6809      	ldr	r1, [r1, #0]
   d61d0:	f7ff bfe5 	b.w	d619e <_ZN6String6concatEPKcj>

000d61d4 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d61d4:	b510      	push	{r4, lr}
   d61d6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d61d8:	6800      	ldr	r0, [r0, #0]
   d61da:	b108      	cbz	r0, d61e0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d61dc:	f7ff fc1c 	bl	d5a18 <os_mutex_recursive_destroy>
    }
   d61e0:	4620      	mov	r0, r4
   d61e2:	bd10      	pop	{r4, pc}

000d61e4 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d61e4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d61e6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d61e8:	4604      	mov	r4, r0
      if (_M_manager)
   d61ea:	b113      	cbz	r3, d61f2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d61ec:	2203      	movs	r2, #3
   d61ee:	4601      	mov	r1, r0
   d61f0:	4798      	blx	r3
    }
   d61f2:	4620      	mov	r0, r4
   d61f4:	bd10      	pop	{r4, pc}
	...

000d61f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d61f8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d61fa:	4c06      	ldr	r4, [pc, #24]	; (d6214 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d61fc:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d61fe:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6200:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6202:	f7ff fc01 	bl	d5a08 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6206:	4620      	mov	r0, r4
   d6208:	4a03      	ldr	r2, [pc, #12]	; (d6218 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d620a:	4904      	ldr	r1, [pc, #16]	; (d621c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d620c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6210:	f000 bd26 	b.w	d6c60 <__aeabi_atexit>
   d6214:	2003e668 	.word	0x2003e668
   d6218:	2003e5cc 	.word	0x2003e5cc
   d621c:	000d61d5 	.word	0x000d61d5

000d6220 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6222:	4606      	mov	r6, r0
   d6224:	460d      	mov	r5, r1
  size_t n = 0;
   d6226:	188f      	adds	r7, r1, r2
   d6228:	2400      	movs	r4, #0
  while (size--) {
   d622a:	42bd      	cmp	r5, r7
   d622c:	d00c      	beq.n	d6248 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d622e:	6833      	ldr	r3, [r6, #0]
   d6230:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6234:	689b      	ldr	r3, [r3, #8]
   d6236:	4630      	mov	r0, r6
   d6238:	4798      	blx	r3
     if (chunk>=0)
   d623a:	1e03      	subs	r3, r0, #0
   d623c:	db01      	blt.n	d6242 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d623e:	441c      	add	r4, r3
  while (size--) {
   d6240:	e7f3      	b.n	d622a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6242:	2c00      	cmp	r4, #0
   d6244:	bf08      	it	eq
   d6246:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6248:	4620      	mov	r0, r4
   d624a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d624c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d624c:	b513      	push	{r0, r1, r4, lr}
   d624e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d6250:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6252:	b159      	cbz	r1, d626c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6254:	9101      	str	r1, [sp, #4]
   d6256:	f000 fd5d 	bl	d6d14 <strlen>
   d625a:	6823      	ldr	r3, [r4, #0]
   d625c:	9901      	ldr	r1, [sp, #4]
   d625e:	68db      	ldr	r3, [r3, #12]
   d6260:	4602      	mov	r2, r0
   d6262:	4620      	mov	r0, r4
    }
   d6264:	b002      	add	sp, #8
   d6266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d626a:	4718      	bx	r3
    }
   d626c:	b002      	add	sp, #8
   d626e:	bd10      	pop	{r4, pc}

000d6270 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d6270:	b508      	push	{r3, lr}
  return write(str);
   d6272:	f7ff ffeb 	bl	d624c <_ZN5Print5writeEPKc>
}
   d6276:	bd08      	pop	{r3, pc}

000d6278 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d6278:	6803      	ldr	r3, [r0, #0]
   d627a:	689b      	ldr	r3, [r3, #8]
   d627c:	4718      	bx	r3

000d627e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d627e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6280:	210d      	movs	r1, #13
{
   d6282:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6284:	f7ff fff8 	bl	d6278 <_ZN5Print5printEc>
  n += print('\n');
   d6288:	210a      	movs	r1, #10
  size_t n = print('\r');
   d628a:	4604      	mov	r4, r0
  n += print('\n');
   d628c:	4628      	mov	r0, r5
   d628e:	f7ff fff3 	bl	d6278 <_ZN5Print5printEc>
  return n;
}
   d6292:	4420      	add	r0, r4
   d6294:	bd38      	pop	{r3, r4, r5, pc}

000d6296 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6296:	b538      	push	{r3, r4, r5, lr}
   d6298:	4605      	mov	r5, r0
  return write(str);
   d629a:	f7ff ffd7 	bl	d624c <_ZN5Print5writeEPKc>
   d629e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d62a0:	4628      	mov	r0, r5
   d62a2:	f7ff ffec 	bl	d627e <_ZN5Print7printlnEv>
  return n;
}
   d62a6:	4420      	add	r0, r4
   d62a8:	bd38      	pop	{r3, r4, r5, pc}

000d62aa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d62aa:	b530      	push	{r4, r5, lr}
   d62ac:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d62ae:	2300      	movs	r3, #0
   d62b0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d62b4:	2a01      	cmp	r2, #1
   d62b6:	bf98      	it	ls
   d62b8:	220a      	movls	r2, #10
   d62ba:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d62bc:	460d      	mov	r5, r1
   d62be:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d62c2:	fb01 5312 	mls	r3, r1, r2, r5
   d62c6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d62ca:	2b09      	cmp	r3, #9
   d62cc:	bf94      	ite	ls
   d62ce:	3330      	addls	r3, #48	; 0x30
   d62d0:	3337      	addhi	r3, #55	; 0x37
   d62d2:	b2db      	uxtb	r3, r3
  } while(n);
   d62d4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d62d6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d62da:	d9ef      	bls.n	d62bc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d62dc:	4621      	mov	r1, r4
   d62de:	f7ff ffb5 	bl	d624c <_ZN5Print5writeEPKc>
}
   d62e2:	b00b      	add	sp, #44	; 0x2c
   d62e4:	bd30      	pop	{r4, r5, pc}

000d62e6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d62e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d62ea:	b086      	sub	sp, #24
   d62ec:	af00      	add	r7, sp, #0
   d62ee:	4605      	mov	r5, r0
   d62f0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d62f2:	1d38      	adds	r0, r7, #4
   d62f4:	2114      	movs	r1, #20
{
   d62f6:	4614      	mov	r4, r2
    va_copy(args2, args);
   d62f8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d62fa:	f7ff fd61 	bl	d5dc0 <vsnprintf>

    if (n<bufsize)
   d62fe:	2813      	cmp	r0, #19
   d6300:	d80e      	bhi.n	d6320 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d6302:	1d39      	adds	r1, r7, #4
   d6304:	4628      	mov	r0, r5
   d6306:	f7ff ffa1 	bl	d624c <_ZN5Print5writeEPKc>
   d630a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d630c:	b11e      	cbz	r6, d6316 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d630e:	4628      	mov	r0, r5
   d6310:	f7ff ffb5 	bl	d627e <_ZN5Print7printlnEv>
   d6314:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d6316:	4620      	mov	r0, r4
   d6318:	3718      	adds	r7, #24
   d631a:	46bd      	mov	sp, r7
   d631c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d6320:	f100 0308 	add.w	r3, r0, #8
   d6324:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d6328:	46e8      	mov	r8, sp
        char bigger[n+1];
   d632a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d632e:	4622      	mov	r2, r4
   d6330:	1c41      	adds	r1, r0, #1
   d6332:	683b      	ldr	r3, [r7, #0]
   d6334:	4668      	mov	r0, sp
   d6336:	f7ff fd43 	bl	d5dc0 <vsnprintf>
  return write(str);
   d633a:	4669      	mov	r1, sp
   d633c:	4628      	mov	r0, r5
   d633e:	f7ff ff85 	bl	d624c <_ZN5Print5writeEPKc>
   d6342:	4604      	mov	r4, r0
   d6344:	46c5      	mov	sp, r8
   d6346:	e7e1      	b.n	d630c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d6348 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6348:	2300      	movs	r3, #0
   d634a:	6840      	ldr	r0, [r0, #4]
   d634c:	461a      	mov	r2, r3
   d634e:	4619      	mov	r1, r3
   d6350:	f7ff bcd6 	b.w	d5d00 <network_on>

000d6354 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6354:	4b01      	ldr	r3, [pc, #4]	; (d635c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6356:	4a02      	ldr	r2, [pc, #8]	; (d6360 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6358:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d635a:	4770      	bx	lr
   d635c:	2003e66c 	.word	0x2003e66c
   d6360:	000d7910 	.word	0x000d7910

000d6364 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6364:	4b02      	ldr	r3, [pc, #8]	; (d6370 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6366:	681a      	ldr	r2, [r3, #0]
   d6368:	4b02      	ldr	r3, [pc, #8]	; (d6374 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d636a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d636c:	4770      	bx	lr
   d636e:	bf00      	nop
   d6370:	2003e564 	.word	0x2003e564
   d6374:	2003e670 	.word	0x2003e670

000d6378 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6378:	2100      	movs	r1, #0
   d637a:	f7ff bc7d 	b.w	d5c78 <system_delay_ms>

000d637e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d637e:	b510      	push	{r4, lr}
   d6380:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6382:	f7ff ff2f 	bl	d61e4 <_ZNSt14_Function_baseD1Ev>
   d6386:	4620      	mov	r0, r4
   d6388:	bd10      	pop	{r4, pc}
	...

000d638c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d638c:	4803      	ldr	r0, [pc, #12]	; (d639c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d638e:	4a04      	ldr	r2, [pc, #16]	; (d63a0 <_GLOBAL__sub_I_RGB+0x14>)
   d6390:	4904      	ldr	r1, [pc, #16]	; (d63a4 <_GLOBAL__sub_I_RGB+0x18>)
   d6392:	2300      	movs	r3, #0
   d6394:	6083      	str	r3, [r0, #8]
   d6396:	f000 bc63 	b.w	d6c60 <__aeabi_atexit>
   d639a:	bf00      	nop
   d639c:	2003e674 	.word	0x2003e674
   d63a0:	2003e5cc 	.word	0x2003e5cc
   d63a4:	000d637f 	.word	0x000d637f

000d63a8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d63a8:	4b01      	ldr	r3, [pc, #4]	; (d63b0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d63aa:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d63ac:	4770      	bx	lr
   d63ae:	bf00      	nop
   d63b0:	2003e568 	.word	0x2003e568

000d63b4 <serialEventRun>:
{
   d63b4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d63b6:	4b0b      	ldr	r3, [pc, #44]	; (d63e4 <serialEventRun+0x30>)
   d63b8:	b143      	cbz	r3, d63cc <serialEventRun+0x18>
   d63ba:	f000 f957 	bl	d666c <_Z16_fetch_usbserialv>
   d63be:	6803      	ldr	r3, [r0, #0]
   d63c0:	691b      	ldr	r3, [r3, #16]
   d63c2:	4798      	blx	r3
   d63c4:	2800      	cmp	r0, #0
   d63c6:	dd01      	ble.n	d63cc <serialEventRun+0x18>
        serialEvent();
   d63c8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d63cc:	4b06      	ldr	r3, [pc, #24]	; (d63e8 <serialEventRun+0x34>)
   d63ce:	b143      	cbz	r3, d63e2 <serialEventRun+0x2e>
   d63d0:	f000 f9ca 	bl	d6768 <_Z22__fetch_global_Serial1v>
   d63d4:	6803      	ldr	r3, [r0, #0]
   d63d6:	691b      	ldr	r3, [r3, #16]
   d63d8:	4798      	blx	r3
   d63da:	2800      	cmp	r0, #0
   d63dc:	dd01      	ble.n	d63e2 <serialEventRun+0x2e>
        serialEvent1();
   d63de:	f3af 8000 	nop.w
}
   d63e2:	bd08      	pop	{r3, pc}
	...

000d63ec <_post_loop>:
{
   d63ec:	b508      	push	{r3, lr}
	serialEventRun();
   d63ee:	f7ff ffe1 	bl	d63b4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d63f2:	f7ff faf1 	bl	d59d8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d63f6:	4b01      	ldr	r3, [pc, #4]	; (d63fc <_post_loop+0x10>)
   d63f8:	6018      	str	r0, [r3, #0]
}
   d63fa:	bd08      	pop	{r3, pc}
   d63fc:	2003e7d4 	.word	0x2003e7d4

000d6400 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6400:	4802      	ldr	r0, [pc, #8]	; (d640c <_Z33system_initialize_user_backup_ramv+0xc>)
   d6402:	4a03      	ldr	r2, [pc, #12]	; (d6410 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6404:	4903      	ldr	r1, [pc, #12]	; (d6414 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6406:	1a12      	subs	r2, r2, r0
   d6408:	f000 bc42 	b.w	d6c90 <memcpy>
   d640c:	2003f400 	.word	0x2003f400
   d6410:	2003f404 	.word	0x2003f404
   d6414:	000d7a70 	.word	0x000d7a70

000d6418 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6418:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d641a:	2300      	movs	r3, #0
   d641c:	9300      	str	r3, [sp, #0]
   d641e:	461a      	mov	r2, r3
   d6420:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6424:	f7ff fc42 	bl	d5cac <system_ctrl_set_result>
}
   d6428:	b003      	add	sp, #12
   d642a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6430 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6430:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6432:	8843      	ldrh	r3, [r0, #2]
   d6434:	2b0a      	cmp	r3, #10
   d6436:	d008      	beq.n	d644a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6438:	2b50      	cmp	r3, #80	; 0x50
   d643a:	d10b      	bne.n	d6454 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d643c:	4b09      	ldr	r3, [pc, #36]	; (d6464 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d643e:	681b      	ldr	r3, [r3, #0]
   d6440:	b14b      	cbz	r3, d6456 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6442:	b003      	add	sp, #12
   d6444:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6448:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d644a:	f7ff ffe5 	bl	d6418 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d644e:	b003      	add	sp, #12
   d6450:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6454:	2300      	movs	r3, #0
   d6456:	9300      	str	r3, [sp, #0]
   d6458:	461a      	mov	r2, r3
   d645a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d645e:	f7ff fc25 	bl	d5cac <system_ctrl_set_result>
}
   d6462:	e7f4      	b.n	d644e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6464:	2003e688 	.word	0x2003e688

000d6468 <module_user_init_hook>:
{
   d6468:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d646a:	4c12      	ldr	r4, [pc, #72]	; (d64b4 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d646c:	4812      	ldr	r0, [pc, #72]	; (d64b8 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d646e:	4d13      	ldr	r5, [pc, #76]	; (d64bc <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6470:	2100      	movs	r1, #0
   d6472:	f7ff fcad 	bl	d5dd0 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6476:	6823      	ldr	r3, [r4, #0]
   d6478:	42ab      	cmp	r3, r5
   d647a:	4b11      	ldr	r3, [pc, #68]	; (d64c0 <module_user_init_hook+0x58>)
   d647c:	bf0c      	ite	eq
   d647e:	2201      	moveq	r2, #1
   d6480:	2200      	movne	r2, #0
   d6482:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6484:	d002      	beq.n	d648c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d6486:	f7ff ffbb 	bl	d6400 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d648a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d648c:	f7ff fa94 	bl	d59b8 <HAL_RNG_GetRandomNumber>
   d6490:	4604      	mov	r4, r0
    srand(seed);
   d6492:	f000 fc13 	bl	d6cbc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6496:	4b0b      	ldr	r3, [pc, #44]	; (d64c4 <module_user_init_hook+0x5c>)
   d6498:	b113      	cbz	r3, d64a0 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d649a:	4620      	mov	r0, r4
   d649c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d64a0:	2100      	movs	r1, #0
   d64a2:	4808      	ldr	r0, [pc, #32]	; (d64c4 <module_user_init_hook+0x5c>)
   d64a4:	f7ff fc6c 	bl	d5d80 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d64a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d64ac:	4806      	ldr	r0, [pc, #24]	; (d64c8 <module_user_init_hook+0x60>)
   d64ae:	2100      	movs	r1, #0
   d64b0:	f7ff bbf2 	b.w	d5c98 <system_ctrl_set_app_request_handler>
   d64b4:	2003f400 	.word	0x2003f400
   d64b8:	000d63a9 	.word	0x000d63a9
   d64bc:	9a271c1e 	.word	0x9a271c1e
   d64c0:	2003e684 	.word	0x2003e684
   d64c4:	00000000 	.word	0x00000000
   d64c8:	000d6431 	.word	0x000d6431

000d64cc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d64cc:	4770      	bx	lr

000d64ce <_ZN9IPAddressD0Ev>:
   d64ce:	b510      	push	{r4, lr}
   d64d0:	2118      	movs	r1, #24
   d64d2:	4604      	mov	r4, r0
   d64d4:	f000 fbc9 	bl	d6c6a <_ZdlPvj>
   d64d8:	4620      	mov	r0, r4
   d64da:	bd10      	pop	{r4, pc}

000d64dc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d64dc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d64de:	7d03      	ldrb	r3, [r0, #20]
   d64e0:	2b06      	cmp	r3, #6
{
   d64e2:	b08d      	sub	sp, #52	; 0x34
   d64e4:	460e      	mov	r6, r1
   d64e6:	f100 0704 	add.w	r7, r0, #4
   d64ea:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d64ee:	d012      	beq.n	d6516 <_ZNK9IPAddress7printToER5Print+0x3a>
   d64f0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d64f4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d64f8:	220a      	movs	r2, #10
   d64fa:	4630      	mov	r0, r6
   d64fc:	f7ff fed5 	bl	d62aa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6500:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6502:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6504:	d019      	beq.n	d653a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6506:	2c00      	cmp	r4, #0
   d6508:	d0f4      	beq.n	d64f4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d650a:	212e      	movs	r1, #46	; 0x2e
   d650c:	4630      	mov	r0, r6
   d650e:	f7ff feb3 	bl	d6278 <_ZN5Print5printEc>
   d6512:	4404      	add	r4, r0
   d6514:	e7ee      	b.n	d64f4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6516:	232f      	movs	r3, #47	; 0x2f
   d6518:	466a      	mov	r2, sp
   d651a:	4639      	mov	r1, r7
   d651c:	200a      	movs	r0, #10
		buf[0] = 0;
   d651e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6522:	f7ff fa81 	bl	d5a28 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6526:	4668      	mov	r0, sp
   d6528:	f000 fbf4 	bl	d6d14 <strlen>
   d652c:	6833      	ldr	r3, [r6, #0]
   d652e:	4602      	mov	r2, r0
   d6530:	68db      	ldr	r3, [r3, #12]
   d6532:	4669      	mov	r1, sp
   d6534:	4630      	mov	r0, r6
   d6536:	4798      	blx	r3
   d6538:	4604      	mov	r4, r0
    }
    return n;
}
   d653a:	4620      	mov	r0, r4
   d653c:	b00d      	add	sp, #52	; 0x34
   d653e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6540 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6540:	b510      	push	{r4, lr}
   d6542:	4b05      	ldr	r3, [pc, #20]	; (d6558 <_ZN9IPAddressC1Ev+0x18>)
   d6544:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6546:	2211      	movs	r2, #17
   d6548:	f840 3b04 	str.w	r3, [r0], #4
   d654c:	2100      	movs	r1, #0
   d654e:	f000 fbad 	bl	d6cac <memset>
}
   d6552:	4620      	mov	r0, r4
   d6554:	bd10      	pop	{r4, pc}
   d6556:	bf00      	nop
   d6558:	000d7938 	.word	0x000d7938

000d655c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d655c:	4603      	mov	r3, r0
   d655e:	4a07      	ldr	r2, [pc, #28]	; (d657c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6560:	b510      	push	{r4, lr}
   d6562:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6566:	f101 0210 	add.w	r2, r1, #16
   d656a:	f851 4b04 	ldr.w	r4, [r1], #4
   d656e:	f843 4b04 	str.w	r4, [r3], #4
   d6572:	4291      	cmp	r1, r2
   d6574:	d1f9      	bne.n	d656a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6576:	780a      	ldrb	r2, [r1, #0]
   d6578:	701a      	strb	r2, [r3, #0]
}
   d657a:	bd10      	pop	{r4, pc}
   d657c:	000d7938 	.word	0x000d7938

000d6580 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6580:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6582:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6586:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d658a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d658e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6592:	2304      	movs	r3, #4
   d6594:	6041      	str	r1, [r0, #4]
   d6596:	7503      	strb	r3, [r0, #20]
}
   d6598:	bd10      	pop	{r4, pc}
	...

000d659c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d659c:	b513      	push	{r0, r1, r4, lr}
   d659e:	4b05      	ldr	r3, [pc, #20]	; (d65b4 <_ZN9IPAddressC1EPKh+0x18>)
   d65a0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d65a2:	78cb      	ldrb	r3, [r1, #3]
   d65a4:	9300      	str	r3, [sp, #0]
   d65a6:	788b      	ldrb	r3, [r1, #2]
   d65a8:	784a      	ldrb	r2, [r1, #1]
   d65aa:	7809      	ldrb	r1, [r1, #0]
   d65ac:	f7ff ffe8 	bl	d6580 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d65b0:	b002      	add	sp, #8
   d65b2:	bd10      	pop	{r4, pc}
   d65b4:	000d7938 	.word	0x000d7938

000d65b8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d65b8:	7441      	strb	r1, [r0, #17]
}
   d65ba:	4770      	bx	lr

000d65bc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d65bc:	4770      	bx	lr

000d65be <_ZN9USBSerial4readEv>:
{
   d65be:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d65c0:	2100      	movs	r1, #0
   d65c2:	7c00      	ldrb	r0, [r0, #16]
   d65c4:	f7ff fb30 	bl	d5c28 <HAL_USB_USART_Receive_Data>
}
   d65c8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d65cc:	bd08      	pop	{r3, pc}

000d65ce <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d65ce:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d65d0:	2101      	movs	r1, #1
   d65d2:	7c00      	ldrb	r0, [r0, #16]
   d65d4:	f7ff fb28 	bl	d5c28 <HAL_USB_USART_Receive_Data>
}
   d65d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d65dc:	bd08      	pop	{r3, pc}

000d65de <_ZN9USBSerial17availableForWriteEv>:
{
   d65de:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d65e0:	7c00      	ldrb	r0, [r0, #16]
   d65e2:	f7ff fb19 	bl	d5c18 <HAL_USB_USART_Available_Data_For_Write>
}
   d65e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d65ea:	bd08      	pop	{r3, pc}

000d65ec <_ZN9USBSerial9availableEv>:
{
   d65ec:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d65ee:	7c00      	ldrb	r0, [r0, #16]
   d65f0:	f7ff fb0a 	bl	d5c08 <HAL_USB_USART_Available_Data>
}
   d65f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d65f8:	bd08      	pop	{r3, pc}

000d65fa <_ZN9USBSerial5writeEh>:
{
   d65fa:	b513      	push	{r0, r1, r4, lr}
   d65fc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d65fe:	7c00      	ldrb	r0, [r0, #16]
{
   d6600:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6602:	f7ff fb09 	bl	d5c18 <HAL_USB_USART_Available_Data_For_Write>
   d6606:	2800      	cmp	r0, #0
   d6608:	9901      	ldr	r1, [sp, #4]
   d660a:	dc01      	bgt.n	d6610 <_ZN9USBSerial5writeEh+0x16>
   d660c:	7c60      	ldrb	r0, [r4, #17]
   d660e:	b120      	cbz	r0, d661a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6610:	7c20      	ldrb	r0, [r4, #16]
   d6612:	f7ff fb11 	bl	d5c38 <HAL_USB_USART_Send_Data>
   d6616:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d661a:	b002      	add	sp, #8
   d661c:	bd10      	pop	{r4, pc}

000d661e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d661e:	7c00      	ldrb	r0, [r0, #16]
   d6620:	f7ff bb12 	b.w	d5c48 <HAL_USB_USART_Flush_Data>

000d6624 <_ZN9USBSerialD0Ev>:
   d6624:	b510      	push	{r4, lr}
   d6626:	2114      	movs	r1, #20
   d6628:	4604      	mov	r4, r0
   d662a:	f000 fb1e 	bl	d6c6a <_ZdlPvj>
   d662e:	4620      	mov	r0, r4
   d6630:	bd10      	pop	{r4, pc}
	...

000d6634 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6634:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d663a:	4604      	mov	r4, r0
   d663c:	4608      	mov	r0, r1
   d663e:	2100      	movs	r1, #0
   d6640:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6644:	4b04      	ldr	r3, [pc, #16]	; (d6658 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6646:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6648:	2301      	movs	r3, #1
  _serial = serial;
   d664a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d664c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d664e:	4611      	mov	r1, r2
   d6650:	f7ff fad2 	bl	d5bf8 <HAL_USB_USART_Init>
}
   d6654:	4620      	mov	r0, r4
   d6656:	bd10      	pop	{r4, pc}
   d6658:	000d794c 	.word	0x000d794c

000d665c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d665c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d665e:	2214      	movs	r2, #20
{
   d6660:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6662:	2100      	movs	r1, #0
   d6664:	f000 fb22 	bl	d6cac <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6668:	4620      	mov	r0, r4
   d666a:	bd10      	pop	{r4, pc}

000d666c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d666c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d666e:	4c10      	ldr	r4, [pc, #64]	; (d66b0 <_Z16_fetch_usbserialv+0x44>)
{
   d6670:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6672:	a803      	add	r0, sp, #12
   d6674:	f7ff fff2 	bl	d665c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6678:	7821      	ldrb	r1, [r4, #0]
   d667a:	f3bf 8f5b 	dmb	ish
   d667e:	f011 0101 	ands.w	r1, r1, #1
   d6682:	d111      	bne.n	d66a8 <_Z16_fetch_usbserialv+0x3c>
   d6684:	4620      	mov	r0, r4
   d6686:	9101      	str	r1, [sp, #4]
   d6688:	f7fd fd12 	bl	d40b0 <__cxa_guard_acquire>
   d668c:	9901      	ldr	r1, [sp, #4]
   d668e:	b158      	cbz	r0, d66a8 <_Z16_fetch_usbserialv+0x3c>
   d6690:	aa03      	add	r2, sp, #12
   d6692:	4808      	ldr	r0, [pc, #32]	; (d66b4 <_Z16_fetch_usbserialv+0x48>)
   d6694:	f7ff ffce 	bl	d6634 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6698:	4620      	mov	r0, r4
   d669a:	f7fd fd0e 	bl	d40ba <__cxa_guard_release>
   d669e:	4a06      	ldr	r2, [pc, #24]	; (d66b8 <_Z16_fetch_usbserialv+0x4c>)
   d66a0:	4906      	ldr	r1, [pc, #24]	; (d66bc <_Z16_fetch_usbserialv+0x50>)
   d66a2:	4804      	ldr	r0, [pc, #16]	; (d66b4 <_Z16_fetch_usbserialv+0x48>)
   d66a4:	f000 fadc 	bl	d6c60 <__aeabi_atexit>
	return _usbserial;
}
   d66a8:	4802      	ldr	r0, [pc, #8]	; (d66b4 <_Z16_fetch_usbserialv+0x48>)
   d66aa:	b008      	add	sp, #32
   d66ac:	bd10      	pop	{r4, pc}
   d66ae:	bf00      	nop
   d66b0:	2003e68c 	.word	0x2003e68c
   d66b4:	2003e690 	.word	0x2003e690
   d66b8:	2003e5cc 	.word	0x2003e5cc
   d66bc:	000d65bd 	.word	0x000d65bd

000d66c0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d66c0:	4770      	bx	lr

000d66c2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d66c2:	7441      	strb	r1, [r0, #17]
}
   d66c4:	4770      	bx	lr

000d66c6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d66c6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d66c8:	7c00      	ldrb	r0, [r0, #16]
   d66ca:	f7ff f9ed 	bl	d5aa8 <hal_usart_available_data_for_write>
}
   d66ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66d2:	bd08      	pop	{r3, pc}

000d66d4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d66d4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d66d6:	7c00      	ldrb	r0, [r0, #16]
   d66d8:	f7ff f9be 	bl	d5a58 <hal_usart_available>
}
   d66dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66e0:	bd08      	pop	{r3, pc}

000d66e2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d66e2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d66e4:	7c00      	ldrb	r0, [r0, #16]
   d66e6:	f7ff f9c7 	bl	d5a78 <hal_usart_peek>
}
   d66ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d66ee:	bd08      	pop	{r3, pc}

000d66f0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d66f0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d66f2:	7c00      	ldrb	r0, [r0, #16]
   d66f4:	f7ff f9b8 	bl	d5a68 <hal_usart_read>
}
   d66f8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d66fc:	bd08      	pop	{r3, pc}

000d66fe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d66fe:	7c00      	ldrb	r0, [r0, #16]
   d6700:	f7ff b9c2 	b.w	d5a88 <hal_usart_flush>

000d6704 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6704:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6706:	7c45      	ldrb	r5, [r0, #17]
{
   d6708:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d670a:	b12d      	cbz	r5, d6718 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d670c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d670e:	b003      	add	sp, #12
   d6710:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6714:	f7ff b998 	b.w	d5a48 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6718:	7c00      	ldrb	r0, [r0, #16]
   d671a:	9101      	str	r1, [sp, #4]
   d671c:	f7ff f9c4 	bl	d5aa8 <hal_usart_available_data_for_write>
   d6720:	2800      	cmp	r0, #0
   d6722:	9901      	ldr	r1, [sp, #4]
   d6724:	dcf2      	bgt.n	d670c <_ZN11USARTSerial5writeEh+0x8>
}
   d6726:	4628      	mov	r0, r5
   d6728:	b003      	add	sp, #12
   d672a:	bd30      	pop	{r4, r5, pc}

000d672c <_ZN11USARTSerialD0Ev>:
   d672c:	b510      	push	{r4, lr}
   d672e:	2114      	movs	r1, #20
   d6730:	4604      	mov	r4, r0
   d6732:	f000 fa9a 	bl	d6c6a <_ZdlPvj>
   d6736:	4620      	mov	r0, r4
   d6738:	bd10      	pop	{r4, pc}
	...

000d673c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d673c:	b510      	push	{r4, lr}
   d673e:	f04f 0c00 	mov.w	ip, #0
   d6742:	4604      	mov	r4, r0
   d6744:	4608      	mov	r0, r1
   d6746:	4611      	mov	r1, r2
   d6748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d674c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6750:	4a04      	ldr	r2, [pc, #16]	; (d6764 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6752:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6754:	2201      	movs	r2, #1
  _serial = serial;
   d6756:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6758:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d675a:	461a      	mov	r2, r3
   d675c:	f7ff f96c 	bl	d5a38 <hal_usart_init>
}
   d6760:	4620      	mov	r0, r4
   d6762:	bd10      	pop	{r4, pc}
   d6764:	000d797c 	.word	0x000d797c

000d6768 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6768:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d676a:	4c0e      	ldr	r4, [pc, #56]	; (d67a4 <_Z22__fetch_global_Serial1v+0x3c>)
   d676c:	7821      	ldrb	r1, [r4, #0]
   d676e:	f3bf 8f5b 	dmb	ish
   d6772:	f011 0101 	ands.w	r1, r1, #1
   d6776:	d112      	bne.n	d679e <_Z22__fetch_global_Serial1v+0x36>
   d6778:	4620      	mov	r0, r4
   d677a:	9101      	str	r1, [sp, #4]
   d677c:	f7fd fc98 	bl	d40b0 <__cxa_guard_acquire>
   d6780:	9901      	ldr	r1, [sp, #4]
   d6782:	b160      	cbz	r0, d679e <_Z22__fetch_global_Serial1v+0x36>
   d6784:	4a08      	ldr	r2, [pc, #32]	; (d67a8 <_Z22__fetch_global_Serial1v+0x40>)
   d6786:	4b09      	ldr	r3, [pc, #36]	; (d67ac <_Z22__fetch_global_Serial1v+0x44>)
   d6788:	4809      	ldr	r0, [pc, #36]	; (d67b0 <_Z22__fetch_global_Serial1v+0x48>)
   d678a:	f7ff ffd7 	bl	d673c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d678e:	4620      	mov	r0, r4
   d6790:	f7fd fc93 	bl	d40ba <__cxa_guard_release>
   d6794:	4a07      	ldr	r2, [pc, #28]	; (d67b4 <_Z22__fetch_global_Serial1v+0x4c>)
   d6796:	4908      	ldr	r1, [pc, #32]	; (d67b8 <_Z22__fetch_global_Serial1v+0x50>)
   d6798:	4805      	ldr	r0, [pc, #20]	; (d67b0 <_Z22__fetch_global_Serial1v+0x48>)
   d679a:	f000 fa61 	bl	d6c60 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d679e:	4804      	ldr	r0, [pc, #16]	; (d67b0 <_Z22__fetch_global_Serial1v+0x48>)
   d67a0:	b002      	add	sp, #8
   d67a2:	bd10      	pop	{r4, pc}
   d67a4:	2003e6a4 	.word	0x2003e6a4
   d67a8:	2003e6a8 	.word	0x2003e6a8
   d67ac:	2003e72c 	.word	0x2003e72c
   d67b0:	2003e7b0 	.word	0x2003e7b0
   d67b4:	2003e5cc 	.word	0x2003e5cc
   d67b8:	000d66c1 	.word	0x000d66c1

000d67bc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d67bc:	4770      	bx	lr

000d67be <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d67be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67c0:	4606      	mov	r6, r0
   d67c2:	4615      	mov	r5, r2
   d67c4:	460c      	mov	r4, r1
   d67c6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d67c8:	42bc      	cmp	r4, r7
   d67ca:	d006      	beq.n	d67da <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d67cc:	6833      	ldr	r3, [r6, #0]
   d67ce:	f814 1b01 	ldrb.w	r1, [r4], #1
   d67d2:	689b      	ldr	r3, [r3, #8]
   d67d4:	4630      	mov	r0, r6
   d67d6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d67d8:	e7f6      	b.n	d67c8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d67da:	4628      	mov	r0, r5
   d67dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d67de <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d67de:	7c00      	ldrb	r0, [r0, #16]
   d67e0:	2200      	movs	r2, #0
   d67e2:	f7ff b989 	b.w	d5af8 <hal_i2c_write>

000d67e6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d67e6:	7c00      	ldrb	r0, [r0, #16]
   d67e8:	2100      	movs	r1, #0
   d67ea:	f7ff b98d 	b.w	d5b08 <hal_i2c_available>

000d67ee <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d67ee:	7c00      	ldrb	r0, [r0, #16]
   d67f0:	2100      	movs	r1, #0
   d67f2:	f7ff b991 	b.w	d5b18 <hal_i2c_read>

000d67f6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d67f6:	7c00      	ldrb	r0, [r0, #16]
   d67f8:	2100      	movs	r1, #0
   d67fa:	f7ff b995 	b.w	d5b28 <hal_i2c_peek>

000d67fe <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d67fe:	7c00      	ldrb	r0, [r0, #16]
   d6800:	2100      	movs	r1, #0
   d6802:	f7ff b999 	b.w	d5b38 <hal_i2c_flush>

000d6806 <_ZN7TwoWireD0Ev>:
   d6806:	b510      	push	{r4, lr}
   d6808:	2114      	movs	r1, #20
   d680a:	4604      	mov	r4, r0
   d680c:	f000 fa2d 	bl	d6c6a <_ZdlPvj>
   d6810:	4620      	mov	r0, r4
   d6812:	bd10      	pop	{r4, pc}

000d6814 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6814:	b510      	push	{r4, lr}
   d6816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d681a:	4604      	mov	r4, r0
   d681c:	4608      	mov	r0, r1
   d681e:	2100      	movs	r1, #0
   d6820:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6824:	4b03      	ldr	r3, [pc, #12]	; (d6834 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6826:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6828:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d682a:	4611      	mov	r1, r2
   d682c:	f7ff f994 	bl	d5b58 <hal_i2c_init>
}
   d6830:	4620      	mov	r0, r4
   d6832:	bd10      	pop	{r4, pc}
   d6834:	000d79ac 	.word	0x000d79ac

000d6838 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   d6838:	7c00      	ldrb	r0, [r0, #16]
   d683a:	2200      	movs	r2, #0
   d683c:	f7ff b93c 	b.w	d5ab8 <hal_i2c_set_speed>

000d6840 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6840:	2300      	movs	r3, #0
   d6842:	7c00      	ldrb	r0, [r0, #16]
   d6844:	461a      	mov	r2, r3
   d6846:	4619      	mov	r1, r3
   d6848:	f7ff b93e 	b.w	d5ac8 <hal_i2c_begin>

000d684c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d684c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d684e:	2200      	movs	r2, #0
   d6850:	2314      	movs	r3, #20
   d6852:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d6856:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d685a:	780b      	ldrb	r3, [r1, #0]
   d685c:	f88d 3008 	strb.w	r3, [sp, #8]
   d6860:	684b      	ldr	r3, [r1, #4]
   d6862:	9303      	str	r3, [sp, #12]
   d6864:	68cb      	ldr	r3, [r1, #12]
   d6866:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d6868:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d686a:	7a0b      	ldrb	r3, [r1, #8]
   d686c:	9305      	str	r3, [sp, #20]
   d686e:	a901      	add	r1, sp, #4
   d6870:	f7ff f97a 	bl	d5b68 <hal_i2c_request_ex>
}
   d6874:	b007      	add	sp, #28
   d6876:	f85d fb04 	ldr.w	pc, [sp], #4

000d687a <_ZN7TwoWire11requestFromEhjh>:
{
   d687a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d687c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d687e:	f88d 1000 	strb.w	r1, [sp]
   d6882:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6886:	9103      	str	r1, [sp, #12]
   d6888:	bf18      	it	ne
   d688a:	2301      	movne	r3, #1
   d688c:	4669      	mov	r1, sp
    size_ = size;
   d688e:	9201      	str	r2, [sp, #4]
   d6890:	f88d 3008 	strb.w	r3, [sp, #8]
   d6894:	f7ff ffda 	bl	d684c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6898:	b005      	add	sp, #20
   d689a:	f85d fb04 	ldr.w	pc, [sp], #4

000d689e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d689e:	2301      	movs	r3, #1
   d68a0:	f7ff bfeb 	b.w	d687a <_ZN7TwoWire11requestFromEhjh>

000d68a4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d68a4:	7c00      	ldrb	r0, [r0, #16]
   d68a6:	2200      	movs	r2, #0
   d68a8:	f7ff b916 	b.w	d5ad8 <hal_i2c_begin_transmission>

000d68ac <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d68ac:	b2c9      	uxtb	r1, r1
   d68ae:	f7ff bff9 	b.w	d68a4 <_ZN7TwoWire17beginTransmissionEh>

000d68b2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d68b2:	7c00      	ldrb	r0, [r0, #16]
   d68b4:	2200      	movs	r2, #0
   d68b6:	f7ff b917 	b.w	d5ae8 <hal_i2c_end_transmission>

000d68ba <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d68ba:	2101      	movs	r1, #1
   d68bc:	f7ff bff9 	b.w	d68b2 <_ZN7TwoWire15endTransmissionEh>

000d68c0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d68c0:	2200      	movs	r2, #0
   d68c2:	6840      	ldr	r0, [r0, #4]
   d68c4:	4611      	mov	r1, r2
   d68c6:	f7ff ba13 	b.w	d5cf0 <network_ready>

000d68ca <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d68ca:	2200      	movs	r2, #0
   d68cc:	6840      	ldr	r0, [r0, #4]
   d68ce:	4611      	mov	r1, r2
   d68d0:	f7ff ba2e 	b.w	d5d30 <network_listening>

000d68d4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d68d4:	2200      	movs	r2, #0
   d68d6:	6840      	ldr	r0, [r0, #4]
   d68d8:	4611      	mov	r1, r2
   d68da:	f7ff ba39 	b.w	d5d50 <network_get_listen_timeout>

000d68de <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d68de:	6840      	ldr	r0, [r0, #4]
   d68e0:	2200      	movs	r2, #0
   d68e2:	f7ff ba2d 	b.w	d5d40 <network_set_listen_timeout>

000d68e6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d68e6:	6840      	ldr	r0, [r0, #4]
   d68e8:	2200      	movs	r2, #0
   d68ea:	f081 0101 	eor.w	r1, r1, #1
   d68ee:	f7ff ba17 	b.w	d5d20 <network_listen>

000d68f2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d68f2:	2300      	movs	r3, #0
   d68f4:	6840      	ldr	r0, [r0, #4]
   d68f6:	461a      	mov	r2, r3
   d68f8:	4619      	mov	r1, r3
   d68fa:	f7ff ba09 	b.w	d5d10 <network_off>

000d68fe <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d68fe:	2200      	movs	r2, #0
   d6900:	6840      	ldr	r0, [r0, #4]
   d6902:	4611      	mov	r1, r2
   d6904:	f7ff b9e4 	b.w	d5cd0 <network_connecting>

000d6908 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6908:	6840      	ldr	r0, [r0, #4]
   d690a:	2200      	movs	r2, #0
   d690c:	2102      	movs	r1, #2
   d690e:	f7ff b9e7 	b.w	d5ce0 <network_disconnect>

000d6912 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6912:	2300      	movs	r3, #0
   d6914:	6840      	ldr	r0, [r0, #4]
   d6916:	461a      	mov	r2, r3
   d6918:	f7ff b9d2 	b.w	d5cc0 <network_connect>

000d691c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d691c:	4b02      	ldr	r3, [pc, #8]	; (d6928 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d691e:	2204      	movs	r2, #4
   d6920:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6922:	4a02      	ldr	r2, [pc, #8]	; (d692c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6924:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d6926:	4770      	bx	lr
   d6928:	2003e7c4 	.word	0x2003e7c4
   d692c:	000d79d4 	.word	0x000d79d4

000d6930 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6930:	2300      	movs	r3, #0
   d6932:	6840      	ldr	r0, [r0, #4]
   d6934:	461a      	mov	r2, r3
   d6936:	f7ff b9c3 	b.w	d5cc0 <network_connect>

000d693a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d693a:	6840      	ldr	r0, [r0, #4]
   d693c:	2200      	movs	r2, #0
   d693e:	2102      	movs	r1, #2
   d6940:	f7ff b9ce 	b.w	d5ce0 <network_disconnect>

000d6944 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6944:	2200      	movs	r2, #0
   d6946:	6840      	ldr	r0, [r0, #4]
   d6948:	4611      	mov	r1, r2
   d694a:	f7ff b9c1 	b.w	d5cd0 <network_connecting>

000d694e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d694e:	2200      	movs	r2, #0
   d6950:	6840      	ldr	r0, [r0, #4]
   d6952:	4611      	mov	r1, r2
   d6954:	f7ff b9cc 	b.w	d5cf0 <network_ready>

000d6958 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6958:	2300      	movs	r3, #0
   d695a:	6840      	ldr	r0, [r0, #4]
   d695c:	461a      	mov	r2, r3
   d695e:	4619      	mov	r1, r3
   d6960:	f7ff b9ce 	b.w	d5d00 <network_on>

000d6964 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6964:	2300      	movs	r3, #0
   d6966:	6840      	ldr	r0, [r0, #4]
   d6968:	461a      	mov	r2, r3
   d696a:	4619      	mov	r1, r3
   d696c:	f7ff b9d0 	b.w	d5d10 <network_off>

000d6970 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d6970:	6840      	ldr	r0, [r0, #4]
   d6972:	2100      	movs	r1, #0
   d6974:	f7ff b9f4 	b.w	d5d60 <network_is_on>

000d6978 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d6978:	6840      	ldr	r0, [r0, #4]
   d697a:	2100      	movs	r1, #0
   d697c:	f7ff b9f8 	b.w	d5d70 <network_is_off>

000d6980 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6980:	6840      	ldr	r0, [r0, #4]
   d6982:	2200      	movs	r2, #0
   d6984:	f081 0101 	eor.w	r1, r1, #1
   d6988:	f7ff b9ca 	b.w	d5d20 <network_listen>

000d698c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d698c:	6840      	ldr	r0, [r0, #4]
   d698e:	2200      	movs	r2, #0
   d6990:	f7ff b9d6 	b.w	d5d40 <network_set_listen_timeout>

000d6994 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6994:	2200      	movs	r2, #0
   d6996:	6840      	ldr	r0, [r0, #4]
   d6998:	4611      	mov	r1, r2
   d699a:	f7ff b9d9 	b.w	d5d50 <network_get_listen_timeout>

000d699e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d699e:	2200      	movs	r2, #0
   d69a0:	6840      	ldr	r0, [r0, #4]
   d69a2:	4611      	mov	r1, r2
   d69a4:	f7ff b9c4 	b.w	d5d30 <network_listening>

000d69a8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d69a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d69ac:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d69ae:	b095      	sub	sp, #84	; 0x54
   d69b0:	4616      	mov	r6, r2
   d69b2:	460d      	mov	r5, r1
   d69b4:	4607      	mov	r7, r0
    IPAddress addr;
   d69b6:	f7ff fdc3 	bl	d6540 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d69ba:	4621      	mov	r1, r4
   d69bc:	2218      	movs	r2, #24
   d69be:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d69c0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d69c2:	f000 f973 	bl	d6cac <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d69c6:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d69c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d69cc:	4621      	mov	r1, r4
   d69ce:	466b      	mov	r3, sp
   d69d0:	aa0c      	add	r2, sp, #48	; 0x30
   d69d2:	4630      	mov	r0, r6
   d69d4:	f7fe ffb0 	bl	d5938 <netdb_getaddrinfo>
    if (!r) {
   d69d8:	4604      	mov	r4, r0
   d69da:	2800      	cmp	r0, #0
   d69dc:	d14c      	bne.n	d6a78 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d69de:	4602      	mov	r2, r0
   d69e0:	2101      	movs	r1, #1
   d69e2:	6868      	ldr	r0, [r5, #4]
   d69e4:	f7ff f984 	bl	d5cf0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d69e8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d69ea:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d69ec:	4622      	mov	r2, r4
   d69ee:	6868      	ldr	r0, [r5, #4]
   d69f0:	f7ff f97e 	bl	d5cf0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d69f4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d69f6:	4681      	mov	r9, r0
        bool ok = false;
   d69f8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d69fa:	2e00      	cmp	r6, #0
   d69fc:	d03c      	beq.n	d6a78 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d69fe:	2900      	cmp	r1, #0
   d6a00:	d13a      	bne.n	d6a78 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6a02:	6873      	ldr	r3, [r6, #4]
   d6a04:	2b02      	cmp	r3, #2
   d6a06:	d003      	beq.n	d6a10 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6a08:	2b0a      	cmp	r3, #10
   d6a0a:	d011      	beq.n	d6a30 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6a0c:	69f6      	ldr	r6, [r6, #28]
   d6a0e:	e7f4      	b.n	d69fa <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6a10:	f1b8 0f00 	cmp.w	r8, #0
   d6a14:	d00a      	beq.n	d6a2c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6a16:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d6a18:	a806      	add	r0, sp, #24
   d6a1a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d6a1c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d6a1e:	f7ff fdbd 	bl	d659c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6a24:	1d3c      	adds	r4, r7, #4
   d6a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6a28:	682b      	ldr	r3, [r5, #0]
   d6a2a:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d6a2c:	4641      	mov	r1, r8
   d6a2e:	e7ed      	b.n	d6a0c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6a30:	f1b9 0f00 	cmp.w	r9, #0
   d6a34:	d101      	bne.n	d6a3a <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6a36:	4649      	mov	r1, r9
   d6a38:	e7e8      	b.n	d6a0c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6a3a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6a3c:	2210      	movs	r2, #16
   d6a3e:	a801      	add	r0, sp, #4
   d6a40:	f000 f934 	bl	d6cac <memset>
                    a.v = 6;
   d6a44:	2306      	movs	r3, #6
   d6a46:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6a4a:	ad01      	add	r5, sp, #4
   d6a4c:	f104 0308 	add.w	r3, r4, #8
   d6a50:	3418      	adds	r4, #24
   d6a52:	6818      	ldr	r0, [r3, #0]
   d6a54:	6859      	ldr	r1, [r3, #4]
   d6a56:	462a      	mov	r2, r5
   d6a58:	c203      	stmia	r2!, {r0, r1}
   d6a5a:	3308      	adds	r3, #8
   d6a5c:	42a3      	cmp	r3, r4
   d6a5e:	4615      	mov	r5, r2
   d6a60:	d1f7      	bne.n	d6a52 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d6a62:	a901      	add	r1, sp, #4
   d6a64:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6a66:	ad07      	add	r5, sp, #28
   d6a68:	f7ff fd78 	bl	d655c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6a6e:	1d3c      	adds	r4, r7, #4
   d6a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6a72:	682b      	ldr	r3, [r5, #0]
   d6a74:	7023      	strb	r3, [r4, #0]
   d6a76:	e7de      	b.n	d6a36 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6a78:	9800      	ldr	r0, [sp, #0]
   d6a7a:	f7fe ff55 	bl	d5928 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6a7e:	4638      	mov	r0, r7
   d6a80:	b015      	add	sp, #84	; 0x54
   d6a82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6a88 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6a88:	4b02      	ldr	r3, [pc, #8]	; (d6a94 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6a8a:	4a03      	ldr	r2, [pc, #12]	; (d6a98 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6a8c:	601a      	str	r2, [r3, #0]
   d6a8e:	2200      	movs	r2, #0
   d6a90:	605a      	str	r2, [r3, #4]

} // spark
   d6a92:	4770      	bx	lr
   d6a94:	2003e7cc 	.word	0x2003e7cc
   d6a98:	000d7a10 	.word	0x000d7a10

000d6a9c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6a9c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6a9e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6aa0:	d902      	bls.n	d6aa8 <pinAvailable+0xc>
    return false;
   d6aa2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6aa4:	b002      	add	sp, #8
   d6aa6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6aa8:	f1a0 030b 	sub.w	r3, r0, #11
   d6aac:	2b02      	cmp	r3, #2
   d6aae:	d81a      	bhi.n	d6ae6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6ab0:	4c17      	ldr	r4, [pc, #92]	; (d6b10 <pinAvailable+0x74>)
   d6ab2:	7821      	ldrb	r1, [r4, #0]
   d6ab4:	f3bf 8f5b 	dmb	ish
   d6ab8:	f011 0101 	ands.w	r1, r1, #1
   d6abc:	d10b      	bne.n	d6ad6 <pinAvailable+0x3a>
   d6abe:	4620      	mov	r0, r4
   d6ac0:	9101      	str	r1, [sp, #4]
   d6ac2:	f7fd faf5 	bl	d40b0 <__cxa_guard_acquire>
   d6ac6:	9901      	ldr	r1, [sp, #4]
   d6ac8:	b128      	cbz	r0, d6ad6 <pinAvailable+0x3a>
   d6aca:	4812      	ldr	r0, [pc, #72]	; (d6b14 <pinAvailable+0x78>)
   d6acc:	f7ff f9cc 	bl	d5e68 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6ad0:	4620      	mov	r0, r4
   d6ad2:	f7fd faf2 	bl	d40ba <__cxa_guard_release>
   d6ad6:	4b0f      	ldr	r3, [pc, #60]	; (d6b14 <pinAvailable+0x78>)
   d6ad8:	7818      	ldrb	r0, [r3, #0]
   d6ada:	f7ff f865 	bl	d5ba8 <hal_spi_is_enabled>
   d6ade:	2800      	cmp	r0, #0
   d6ae0:	d1df      	bne.n	d6aa2 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6ae2:	2001      	movs	r0, #1
   d6ae4:	e7de      	b.n	d6aa4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6ae6:	2801      	cmp	r0, #1
   d6ae8:	d809      	bhi.n	d6afe <pinAvailable+0x62>
   d6aea:	f000 f891 	bl	d6c10 <_Z19__fetch_global_Wirev>
   d6aee:	2100      	movs	r1, #0
   d6af0:	7c00      	ldrb	r0, [r0, #16]
   d6af2:	f7ff f829 	bl	d5b48 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6af6:	f080 0001 	eor.w	r0, r0, #1
   d6afa:	b2c0      	uxtb	r0, r0
   d6afc:	e7d2      	b.n	d6aa4 <pinAvailable+0x8>
   d6afe:	3809      	subs	r0, #9
   d6b00:	2801      	cmp	r0, #1
   d6b02:	d8ee      	bhi.n	d6ae2 <pinAvailable+0x46>
   d6b04:	f7ff fe30 	bl	d6768 <_Z22__fetch_global_Serial1v>
   d6b08:	7c00      	ldrb	r0, [r0, #16]
   d6b0a:	f7fe ffc5 	bl	d5a98 <hal_usart_is_enabled>
   d6b0e:	e7f2      	b.n	d6af6 <pinAvailable+0x5a>
   d6b10:	2003e644 	.word	0x2003e644
   d6b14:	2003e648 	.word	0x2003e648

000d6b18 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6b18:	2823      	cmp	r0, #35	; 0x23
{
   d6b1a:	b538      	push	{r3, r4, r5, lr}
   d6b1c:	4604      	mov	r4, r0
   d6b1e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6b20:	d80a      	bhi.n	d6b38 <pinMode+0x20>
   d6b22:	29ff      	cmp	r1, #255	; 0xff
   d6b24:	d008      	beq.n	d6b38 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6b26:	f7ff ffb9 	bl	d6a9c <pinAvailable>
   d6b2a:	b128      	cbz	r0, d6b38 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6b2c:	4629      	mov	r1, r5
   d6b2e:	4620      	mov	r0, r4
}
   d6b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6b34:	f7fe bf10 	b.w	d5958 <HAL_Pin_Mode>
}
   d6b38:	bd38      	pop	{r3, r4, r5, pc}

000d6b3a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6b3a:	b538      	push	{r3, r4, r5, lr}
   d6b3c:	4604      	mov	r4, r0
   d6b3e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6b40:	f7fe ff12 	bl	d5968 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6b44:	28ff      	cmp	r0, #255	; 0xff
   d6b46:	d010      	beq.n	d6b6a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6b48:	2806      	cmp	r0, #6
   d6b4a:	d804      	bhi.n	d6b56 <digitalWrite+0x1c>
   d6b4c:	234d      	movs	r3, #77	; 0x4d
   d6b4e:	fa23 f000 	lsr.w	r0, r3, r0
   d6b52:	07c3      	lsls	r3, r0, #31
   d6b54:	d409      	bmi.n	d6b6a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6b56:	4620      	mov	r0, r4
   d6b58:	f7ff ffa0 	bl	d6a9c <pinAvailable>
   d6b5c:	b128      	cbz	r0, d6b6a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6b5e:	4629      	mov	r1, r5
   d6b60:	4620      	mov	r0, r4
}
   d6b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6b66:	f7fe bf07 	b.w	d5978 <HAL_GPIO_Write>
}
   d6b6a:	bd38      	pop	{r3, r4, r5, pc}

000d6b6c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6b6c:	b510      	push	{r4, lr}
   d6b6e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6b70:	f7fe fefa 	bl	d5968 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d6b74:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d6b76:	b2db      	uxtb	r3, r3
   d6b78:	2b01      	cmp	r3, #1
   d6b7a:	d908      	bls.n	d6b8e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6b7c:	4620      	mov	r0, r4
   d6b7e:	f7ff ff8d 	bl	d6a9c <pinAvailable>
   d6b82:	b120      	cbz	r0, d6b8e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6b84:	4620      	mov	r0, r4
}
   d6b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d6b8a:	f7fe befd 	b.w	d5988 <HAL_GPIO_Read>
}
   d6b8e:	2000      	movs	r0, #0
   d6b90:	bd10      	pop	{r4, pc}

000d6b92 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d6b92:	b538      	push	{r3, r4, r5, lr}
   d6b94:	4604      	mov	r4, r0
   d6b96:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d6b98:	f7ff ff80 	bl	d6a9c <pinAvailable>
   d6b9c:	b1f0      	cbz	r0, d6bdc <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d6b9e:	2104      	movs	r1, #4
   d6ba0:	4620      	mov	r0, r4
   d6ba2:	f7fe fed1 	bl	d5948 <HAL_Validate_Pin_Function>
   d6ba6:	2804      	cmp	r0, #4
   d6ba8:	d105      	bne.n	d6bb6 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d6baa:	b2a9      	uxth	r1, r5
   d6bac:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   d6bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   d6bb2:	f7fe bef1 	b.w	d5998 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d6bb6:	2102      	movs	r1, #2
   d6bb8:	4620      	mov	r0, r4
   d6bba:	f7fe fec5 	bl	d5948 <HAL_Validate_Pin_Function>
   d6bbe:	2802      	cmp	r0, #2
   d6bc0:	d10c      	bne.n	d6bdc <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d6bc2:	4620      	mov	r0, r4
   d6bc4:	f7fe fed0 	bl	d5968 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d6bc8:	2801      	cmp	r0, #1
   d6bca:	d001      	beq.n	d6bd0 <_Z11analogWritetm+0x3e>
   d6bcc:	2804      	cmp	r0, #4
   d6bce:	d105      	bne.n	d6bdc <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   d6bd0:	4629      	mov	r1, r5
   d6bd2:	4620      	mov	r0, r4
}
   d6bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   d6bd8:	f7fe bee6 	b.w	d59a8 <hal_pwm_write_ext>
}
   d6bdc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6be0 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6be0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6be2:	2300      	movs	r3, #0
   d6be4:	2520      	movs	r5, #32
   d6be6:	8043      	strh	r3, [r0, #2]
   d6be8:	2314      	movs	r3, #20
{
   d6bea:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6bec:	8003      	strh	r3, [r0, #0]
   d6bee:	6085      	str	r5, [r0, #8]
   d6bf0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6bf2:	4906      	ldr	r1, [pc, #24]	; (d6c0c <_Z17acquireWireBufferv+0x2c>)
   d6bf4:	4628      	mov	r0, r5
   d6bf6:	f000 f83a 	bl	d6c6e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6bfa:	4904      	ldr	r1, [pc, #16]	; (d6c0c <_Z17acquireWireBufferv+0x2c>)
	};
   d6bfc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6bfe:	4628      	mov	r0, r5
   d6c00:	f000 f835 	bl	d6c6e <_ZnajRKSt9nothrow_t>
	};
   d6c04:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6c06:	4620      	mov	r0, r4
   d6c08:	bd38      	pop	{r3, r4, r5, pc}
   d6c0a:	bf00      	nop
   d6c0c:	000d7a44 	.word	0x000d7a44

000d6c10 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6c10:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6c12:	4d0f      	ldr	r5, [pc, #60]	; (d6c50 <_Z19__fetch_global_Wirev+0x40>)
   d6c14:	7829      	ldrb	r1, [r5, #0]
   d6c16:	f3bf 8f5b 	dmb	ish
   d6c1a:	f011 0401 	ands.w	r4, r1, #1
{
   d6c1e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6c20:	d113      	bne.n	d6c4a <_Z19__fetch_global_Wirev+0x3a>
   d6c22:	4628      	mov	r0, r5
   d6c24:	f7fd fa44 	bl	d40b0 <__cxa_guard_acquire>
   d6c28:	b178      	cbz	r0, d6c4a <_Z19__fetch_global_Wirev+0x3a>
   d6c2a:	a801      	add	r0, sp, #4
   d6c2c:	f7ff ffd8 	bl	d6be0 <_Z17acquireWireBufferv>
   d6c30:	aa01      	add	r2, sp, #4
   d6c32:	4621      	mov	r1, r4
   d6c34:	4807      	ldr	r0, [pc, #28]	; (d6c54 <_Z19__fetch_global_Wirev+0x44>)
   d6c36:	f7ff fded 	bl	d6814 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6c3a:	4628      	mov	r0, r5
   d6c3c:	f7fd fa3d 	bl	d40ba <__cxa_guard_release>
   d6c40:	4a05      	ldr	r2, [pc, #20]	; (d6c58 <_Z19__fetch_global_Wirev+0x48>)
   d6c42:	4906      	ldr	r1, [pc, #24]	; (d6c5c <_Z19__fetch_global_Wirev+0x4c>)
   d6c44:	4803      	ldr	r0, [pc, #12]	; (d6c54 <_Z19__fetch_global_Wirev+0x44>)
   d6c46:	f000 f80b 	bl	d6c60 <__aeabi_atexit>
	return wire;
}
   d6c4a:	4802      	ldr	r0, [pc, #8]	; (d6c54 <_Z19__fetch_global_Wirev+0x44>)
   d6c4c:	b007      	add	sp, #28
   d6c4e:	bd30      	pop	{r4, r5, pc}
   d6c50:	2003e7d8 	.word	0x2003e7d8
   d6c54:	2003e7dc 	.word	0x2003e7dc
   d6c58:	2003e5cc 	.word	0x2003e5cc
   d6c5c:	000d67bd 	.word	0x000d67bd

000d6c60 <__aeabi_atexit>:
   d6c60:	460b      	mov	r3, r1
   d6c62:	4601      	mov	r1, r0
   d6c64:	4618      	mov	r0, r3
   d6c66:	f000 b805 	b.w	d6c74 <__cxa_atexit>

000d6c6a <_ZdlPvj>:
   d6c6a:	f7fd ba14 	b.w	d4096 <_ZdlPv>

000d6c6e <_ZnajRKSt9nothrow_t>:
   d6c6e:	f7fd ba10 	b.w	d4092 <_Znaj>
	...

000d6c74 <__cxa_atexit>:
   d6c74:	b510      	push	{r4, lr}
   d6c76:	4c05      	ldr	r4, [pc, #20]	; (d6c8c <__cxa_atexit+0x18>)
   d6c78:	4613      	mov	r3, r2
   d6c7a:	b12c      	cbz	r4, d6c88 <__cxa_atexit+0x14>
   d6c7c:	460a      	mov	r2, r1
   d6c7e:	4601      	mov	r1, r0
   d6c80:	2002      	movs	r0, #2
   d6c82:	f3af 8000 	nop.w
   d6c86:	bd10      	pop	{r4, pc}
   d6c88:	4620      	mov	r0, r4
   d6c8a:	e7fc      	b.n	d6c86 <__cxa_atexit+0x12>
   d6c8c:	00000000 	.word	0x00000000

000d6c90 <memcpy>:
   d6c90:	440a      	add	r2, r1
   d6c92:	4291      	cmp	r1, r2
   d6c94:	f100 33ff 	add.w	r3, r0, #4294967295
   d6c98:	d100      	bne.n	d6c9c <memcpy+0xc>
   d6c9a:	4770      	bx	lr
   d6c9c:	b510      	push	{r4, lr}
   d6c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6ca6:	4291      	cmp	r1, r2
   d6ca8:	d1f9      	bne.n	d6c9e <memcpy+0xe>
   d6caa:	bd10      	pop	{r4, pc}

000d6cac <memset>:
   d6cac:	4402      	add	r2, r0
   d6cae:	4603      	mov	r3, r0
   d6cb0:	4293      	cmp	r3, r2
   d6cb2:	d100      	bne.n	d6cb6 <memset+0xa>
   d6cb4:	4770      	bx	lr
   d6cb6:	f803 1b01 	strb.w	r1, [r3], #1
   d6cba:	e7f9      	b.n	d6cb0 <memset+0x4>

000d6cbc <srand>:
   d6cbc:	b538      	push	{r3, r4, r5, lr}
   d6cbe:	4b0d      	ldr	r3, [pc, #52]	; (d6cf4 <srand+0x38>)
   d6cc0:	681d      	ldr	r5, [r3, #0]
   d6cc2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6cc4:	4604      	mov	r4, r0
   d6cc6:	b97b      	cbnz	r3, d6ce8 <srand+0x2c>
   d6cc8:	2018      	movs	r0, #24
   d6cca:	f7ff f861 	bl	d5d90 <malloc>
   d6cce:	4a0a      	ldr	r2, [pc, #40]	; (d6cf8 <srand+0x3c>)
   d6cd0:	4b0a      	ldr	r3, [pc, #40]	; (d6cfc <srand+0x40>)
   d6cd2:	63a8      	str	r0, [r5, #56]	; 0x38
   d6cd4:	e9c0 2300 	strd	r2, r3, [r0]
   d6cd8:	4b09      	ldr	r3, [pc, #36]	; (d6d00 <srand+0x44>)
   d6cda:	6083      	str	r3, [r0, #8]
   d6cdc:	230b      	movs	r3, #11
   d6cde:	8183      	strh	r3, [r0, #12]
   d6ce0:	2201      	movs	r2, #1
   d6ce2:	2300      	movs	r3, #0
   d6ce4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6ce8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6cea:	2200      	movs	r2, #0
   d6cec:	611c      	str	r4, [r3, #16]
   d6cee:	615a      	str	r2, [r3, #20]
   d6cf0:	bd38      	pop	{r3, r4, r5, pc}
   d6cf2:	bf00      	nop
   d6cf4:	2003e568 	.word	0x2003e568
   d6cf8:	abcd330e 	.word	0xabcd330e
   d6cfc:	e66d1234 	.word	0xe66d1234
   d6d00:	0005deec 	.word	0x0005deec

000d6d04 <strcpy>:
   d6d04:	4603      	mov	r3, r0
   d6d06:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6d0a:	f803 2b01 	strb.w	r2, [r3], #1
   d6d0e:	2a00      	cmp	r2, #0
   d6d10:	d1f9      	bne.n	d6d06 <strcpy+0x2>
   d6d12:	4770      	bx	lr

000d6d14 <strlen>:
   d6d14:	4603      	mov	r3, r0
   d6d16:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6d1a:	2a00      	cmp	r2, #0
   d6d1c:	d1fb      	bne.n	d6d16 <strlen+0x2>
   d6d1e:	1a18      	subs	r0, r3, r0
   d6d20:	3801      	subs	r0, #1
   d6d22:	4770      	bx	lr

000d6d24 <dynalib_user>:
   d6d24:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d6d34:	0000 0000 6544 6976 6563 6e20 746f 6620     ....Device not f
   d6d44:	756f 646e 202e 6c50 6165 6573 6320 6568     ound. Please che
   d6d54:	6b63 7720 7269 6e69 2e67 5000 6f72 6978     ck wiring..Proxi
   d6d64:	696d 7974 5620 6c61 6575 203a 4100 626d     mity Value: .Amb
   d6d74:	6569 746e 4c20 6769 7468 5620 6c61 6575     ient Light Value
   d6d84:	203a 4900 4332 4120 6464 6572 7373 203a     : .I2C Address: 
   d6d94:	6400 6665 7561 746c 0020 534d 0042 534c     .default .MSB.LS
   d6da4:	0042 533c 4950 6553 7474 6e69 7367 6420     B.<SPISettings d
   d6db4:	6665 7561 746c 003e 533c 4950 6553 7474     efault>.<SPISett
   d6dc4:	6e69 7367 2520 2573 2075 7325 4d20 444f     ings %s%u %s MOD
   d6dd4:	2545 3e75                                    E%u>.

000d6dd9 <_ZL4font>:
   d6dd9:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   d6de9:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   d6df9:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   d6e09:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   d6e19:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   d6e29:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   d6e39:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   d6e49:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   d6e59:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   d6e69:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   d6e79:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   d6e89:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   d6e99:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   d6ea9:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   d6eb9:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   d6ec9:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   d6ed9:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   d6ee9:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   d6ef9:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   d6f09:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   d6f19:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   d6f29:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   d6f39:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   d6f49:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   d6f59:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   d6f69:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   d6f79:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   d6f89:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   d6f99:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   d6fa9:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   d6fb9:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   d6fc9:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   d6fd9:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   d6fe9:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   d6ff9:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   d7009:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   d7019:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   d7029:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   d7039:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   d7049:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   d7059:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   d7069:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   d7079:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   d7089:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   d7099:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   d70a9:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   d70b9:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   d70c9:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   d70d9:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   d70e9:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   d70f9:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   d7109:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   d7119:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   d7129:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   d7139:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   d7149:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   d7159:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   d7169:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   d7179:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   d7189:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   d7199:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   d71a9:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   d71b9:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   d71c9:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   d71d9:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   d71e9:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   d71f9:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   d7209:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   d7219:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   d7229:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   d7239:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   d7249:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   d7259:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   d7269:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   d7279:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   d7289:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   d7299:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   d72a9:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   d72b9:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   d72c9:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
   d72d9:	0000                                         ...

000d72dc <_ZTV12Adafruit_GFX>:
	...
   d72ec:	4a49 000d 6221 000d 409d 000d 4451 000d     IJ..!b...@..QD..
   d72fc:	4453 000d 4485 000d 4461 000d 4473 000d     SD...D..aD..sD..
   d730c:	4395 000d 4451 000d 467d 000d 45f7 000d     .C..QD..}F...E..
   d731c:	449d 000d 44db 000d 4515 000d 455b 000d     .D...D...E..[E..
   d732c:	45f9 000d 4577 000d                         .E..wE..

000d7334 <_ZTV16OledWingAdafruit>:
	...
   d733c:	4b59 000d 4b79 000d 4a49 000d 6221 000d     YK..yK..IJ..!b..
   d734c:	5059 000d 4451 000d 4453 000d 4485 000d     YP..QD..SD...D..
   d735c:	4461 000d 4473 000d 4395 000d 4451 000d     aD..sD...C..QD..
   d736c:	467d 000d 5213 000d 57a7 000d 5759 000d     }F...R...W..YW..
   d737c:	4515 000d 455b 000d 45f9 000d 4577 000d     .E..[E...E..wE..

000d738c <_ZTVN8particle11SPISettingsE>:
	...
   d7394:	4341 000d 4315 000d 4317 000d               AC...C...C..

000d73a0 <_ZL12splash1_data>:
   d73a0:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   d73b0:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   d73c0:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   d73d0:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   d73e0:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   d73f0:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   d7408:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   d7418:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   d7428:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   d7438:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   d7448:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   d7458:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   d7468:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   d7478:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   d7488:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   d7498:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   d74a8:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   d74b8:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   d74c8:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   d74d8:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   d74e8:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   d74f8:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   d7508:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   d7518:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   d7530:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   d7548:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   d7558:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   d7568:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   d7578:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   d7588:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   d7598:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   d75a8:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   d75b8:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   d75c8:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   d75d8:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   d75e8:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   d75f8:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   d7608:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   d7618:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   d7628:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   d7638:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   d7648:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   d7658:	fdff 5b6b 6adb c0fd                         ..k[.j..

000d7660 <_ZL12splash2_data>:
   d7660:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   d7670:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   d7680:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   d769c:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   d76ac:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   d76bc:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   d76cc:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   d76dc:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   d76ec:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   d76fc:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   d770c:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   d771c:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   d772c:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   d773c:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   d774c:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   d775c:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   d776c:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   d777c:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   d778c:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   d779c:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   d77ac:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   d77bc:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   d77cc:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   d77dc:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   d77f4:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   d7804:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   d7814:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   d7824:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   d7834:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000d7840 <_ZTV16Adafruit_SSD1306>:
	...
   d7848:	502d 000d 5045 000d 4a49 000d 6221 000d     -P..EP..IJ..!b..
   d7858:	5059 000d 4451 000d 4453 000d 4485 000d     YP..QD..SD...D..
   d7868:	4461 000d 4473 000d 4395 000d 4451 000d     aD..sD...C..QD..
   d7878:	467d 000d 5213 000d 57a7 000d 5759 000d     }F...R...W..YW..
   d7888:	4515 000d 455b 000d 45f9 000d 4577 000d     .E..[E...E..wE..

000d7898 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   d7898:	8000 e0c0 f8f0 fefc                         ........

000d78a0 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   d78a0:	0100 0703 1f0f 7f3f                         ......?.

000d78a8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   d78a8:	d5ae a880                                   ....

000d78ac <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   d78ac:	00d3 8d40                                   ..@.

000d78b0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   d78b0:	0020 c8a1                                    ...

000d78b4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   d78b4:	40db a6a4 af2e                              .@....

000d78ba <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   d78ba:	02da 8f81                                   ....

000d78be <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   d78be:	12da                                         ...

000d78c1 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   d78c1:	02da                                         ...

000d78c4 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   d78c4:	0022 21ff 0000 0000                         "..!....

000d78cc <_ZTVN5spark13EthernetClassE>:
	...
   d78d4:	5e3f 000d 5e35 000d 5e2b 000d 5e21 000d     ?^..5^..+^..!^..
   d78e4:	5e15 000d 5e09 000d 6971 000d 6979 000d     .^...^..qi..yi..
   d78f4:	5dfd 000d 5df5 000d 5deb 000d 5de1 000d     .]...]...]...]..
   d7904:	69a9 000d                                   .i..

000d7908 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d7908:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   d7918:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d7928:	7361 7463 6d69 0065                         asctime.

000d7930 <_ZTV9IPAddress>:
	...
   d7938:	64dd 000d 64cd 000d 64cf 000d               .d...d...d..

000d7944 <_ZTV9USBSerial>:
	...
   d794c:	65bd 000d 6625 000d 65fb 000d 6221 000d     .e..%f...e..!b..
   d795c:	65ed 000d 65bf 000d 65cf 000d 661f 000d     .e...e...e...f..
   d796c:	65df 000d 65b9 000d                         .e...e..

000d7974 <_ZTV11USARTSerial>:
	...
   d797c:	66c1 000d 672d 000d 6705 000d 6221 000d     .f..-g...g..!b..
   d798c:	66d5 000d 66f1 000d 66e3 000d 66ff 000d     .f...f...f...f..
   d799c:	66c3 000d 66c7 000d                         .f...f..

000d79a4 <_ZTV7TwoWire>:
	...
   d79ac:	67bd 000d 6807 000d 67df 000d 67bf 000d     .g...h...g...g..
   d79bc:	67e7 000d 67ef 000d 67f7 000d 67ff 000d     .g...g...g...g..

000d79cc <_ZTVN5spark9WiFiClassE>:
	...
   d79d4:	6913 000d 6909 000d 68ff 000d 68c1 000d     .i...i...h...h..
   d79e4:	6349 000d 68f3 000d 6971 000d 6979 000d     Ic...h..qi..yi..
   d79f4:	68e7 000d 68df 000d 68d5 000d 68cb 000d     .h...h...h...h..
   d7a04:	69a9 000d                                   .i..

000d7a08 <_ZTVN5spark12NetworkClassE>:
	...
   d7a10:	6931 000d 693b 000d 6945 000d 694f 000d     1i..;i..Ei..Oi..
   d7a20:	6959 000d 6965 000d 6971 000d 6979 000d     Yi..ei..qi..yi..
   d7a30:	6981 000d 698d 000d 6995 000d 699f 000d     .i...i...i...i..
   d7a40:	69a9 000d                                   .i..

000d7a44 <_ZSt7nothrow>:
	...

000d7a45 <link_const_variable_data_end>:
   d7a45:	00          	.byte	0x00
	...

000d7a48 <link_constructors_location>:
   d7a48:	000d42dd 	.word	0x000d42dd
   d7a4c:	000d5e49 	.word	0x000d5e49
   d7a50:	000d5fd9 	.word	0x000d5fd9
   d7a54:	000d61f9 	.word	0x000d61f9
   d7a58:	000d6355 	.word	0x000d6355
   d7a5c:	000d6365 	.word	0x000d6365
   d7a60:	000d638d 	.word	0x000d638d
   d7a64:	000d691d 	.word	0x000d691d
   d7a68:	000d6a89 	.word	0x000d6a89

000d7a6c <link_constructors_end>:
   d7a6c:	00000000 	.word	0x00000000
